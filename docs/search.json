[
  {
    "objectID": "MP02.html",
    "href": "MP02.html",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "Honoring the Green, the Lean, and the Gas-Guzzling Machines! 🌱🔥\nNew York, NY – Public transit plays a crucial role in reducing carbon footprints, but not all agencies are created equal. Some transit systems have become champions of eco-efficiency, while others… well, let’s just say they have room for improvement.\nAfter analyzing emissions data from transit agencies nationwide, we proudly present the 2025 Clean Transit Awards, recognizing the best (and worst) in sustainable transit. These awards highlight Small, Medium, and Large agencies that have made a measurable impact on their carbon footprint—or left tire marks on the environment.\nSo, without further ado, let’s reveal the greenest, the most improved, and, of course, the biggest gas guzzlers!\n\n\nThis prestigious award goes to the transit agencies that produce the least emissions per passenger trip and per mile traveled. In other words, these winners are basically the Tesla Model S of buses—except way more affordable and accessible.\nBy Passenger Trips:\n🥇Large Agency Winner: New Jersey Transit Corporation\n🥇Medium Agency Winner: King County, dba: King County Metro\n🥇Small Agency Winner: Small Altoona Metro Transit, dba: AMTRAN\nBy Passenger Mile:\n🥇Large Agency Winner:🚆New Jersey Transit Corporation,\n🥇Medium Agency Winner: King County, dba: King County Metro,\n🥇Small Agency Winner: Small Altoona Metro Transit, dba: AMTRA,\n\n\n\n“If pollution had an arch-nemesis, it would be these guys.”\nImagine a world where all transit riders suddenly switched to single-passenger cars. 🚗🚗🚗 Yikes! The traffic jams would be longer than your uncle’s conspiracy theories at Thanksgiving, and emissions would skyrocket.\nThis award goes to the transit agencies that saved us from the most pollution by preventing countless solo car trips.\n🥇 Large Agency Winner: MTA New York City Transit 3441010874 avoided\n🥇 Medium Agency Winner: Metro-North Commuter Railroad Company, dba: MTA Metro-North Railroad 413801729 avoided\n🥇 Small Agency Winner: Hampton Jitney, Inc. 1333301 avoided\n\n\n\n“From gas-guzzler to eco-hustler!”\nThis award goes to the agency that has made the biggest leap toward sustainability—not by comparing to past-year data, but by seeing who improved the most compared to their peers.\n🥇 Large Agency Winner: New Jersey Transit Corporation Reduced from 0.1260740 to 0.0002060647 per mile\n🥇 Medium Agency Winner: King County, dba: King County Metro Reduced from 0.2200267 to 0.0001889437 per mile\n🥇 Small Agency Winner: Altoona Metro Transit, dba: AMTRAN – Reduced from 0.3648839 to 0.0015635784 per mile\n\n\n\n“Not all heroes wear capes… and not all transit agencies are heroes.”Not every agency can be a green machine. This award “honors” those transit agencies that burn through fuel like it’s going out of style, producing the highest emissions per passenger mile. (Spoiler alert: This is NOT the award you want to win.)\n🥇 Large Agency Winner: Chicago Transit Authority 162.6084 kg CO₂ per mile\n🥇 Medium Agency Winner: West Virginia University, dba: Personal Rapid Transit 645.1318 kg CO₂ per mile\n🥇 Small Agency Winner: Pennsylvania Department of Transportation 273.8586 CO₂ per mile\nWhile some agencies are already champions of green transit, others have some serious catching up to do. The 2025 Clean Transit Awards highlight the best in eco-friendly transportation while also shining a spotlight on areas that need improvement. 🚆 The takeaway? Cities that invest in sustainable transit are making a real impact on emissions. Meanwhile, gas guzzlers (we’re looking at you, WVU!) still have some work to do. For a full breakdown of the data, check out the Appendix in our official report. Spoiler alert: numbers don’t lie, and neither do emissions reductions!"
  },
  {
    "objectID": "MP02.html#greenest-transit-agency-the-mvp-most-valuable-pollution-reducer-award",
    "href": "MP02.html#greenest-transit-agency-the-mvp-most-valuable-pollution-reducer-award",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "This prestigious award goes to the transit agencies that produce the least emissions per passenger trip and per mile traveled. In other words, these winners are basically the Tesla Model S of buses—except way more affordable and accessible.\nBy Passenger Trips:\n🥇Large Agency Winner: New Jersey Transit Corporation\n🥇Medium Agency Winner: King County, dba: King County Metro\n🥇Small Agency Winner: Small Altoona Metro Transit, dba: AMTRAN\nBy Passenger Mile:\n🥇Large Agency Winner:🚆New Jersey Transit Corporation,\n🥇Medium Agency Winner: King County, dba: King County Metro,\n🥇Small Agency Winner: Small Altoona Metro Transit, dba: AMTRA,"
  },
  {
    "objectID": "MP02.html#most-emissions-avoided-the-carbon-buster-award",
    "href": "MP02.html#most-emissions-avoided-the-carbon-buster-award",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "“If pollution had an arch-nemesis, it would be these guys.”\nImagine a world where all transit riders suddenly switched to single-passenger cars. 🚗🚗🚗 Yikes! The traffic jams would be longer than your uncle’s conspiracy theories at Thanksgiving, and emissions would skyrocket.\nThis award goes to the transit agencies that saved us from the most pollution by preventing countless solo car trips.\n🥇 Large Agency Winner: MTA New York City Transit 3441010874 avoided\n🥇 Medium Agency Winner: Metro-North Commuter Railroad Company, dba: MTA Metro-North Railroad 413801729 avoided\n🥇 Small Agency Winner: Hampton Jitney, Inc. 1333301 avoided"
  },
  {
    "objectID": "MP02.html#most-improved-green-agency-the-comeback-kid-award",
    "href": "MP02.html#most-improved-green-agency-the-comeback-kid-award",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "“From gas-guzzler to eco-hustler!”\nThis award goes to the agency that has made the biggest leap toward sustainability—not by comparing to past-year data, but by seeing who improved the most compared to their peers.\n🥇 Large Agency Winner: New Jersey Transit Corporation Reduced from 0.1260740 to 0.0002060647 per mile\n🥇 Medium Agency Winner: King County, dba: King County Metro Reduced from 0.2200267 to 0.0001889437 per mile\n🥇 Small Agency Winner: Altoona Metro Transit, dba: AMTRAN – Reduced from 0.3648839 to 0.0015635784 per mile"
  },
  {
    "objectID": "MP02.html#biggest-gas-guzzler-the-oh-no-fix-that-award",
    "href": "MP02.html#biggest-gas-guzzler-the-oh-no-fix-that-award",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "“Not all heroes wear capes… and not all transit agencies are heroes.”Not every agency can be a green machine. This award “honors” those transit agencies that burn through fuel like it’s going out of style, producing the highest emissions per passenger mile. (Spoiler alert: This is NOT the award you want to win.)\n🥇 Large Agency Winner: Chicago Transit Authority 162.6084 kg CO₂ per mile\n🥇 Medium Agency Winner: West Virginia University, dba: Personal Rapid Transit 645.1318 kg CO₂ per mile\n🥇 Small Agency Winner: Pennsylvania Department of Transportation 273.8586 CO₂ per mile\nWhile some agencies are already champions of green transit, others have some serious catching up to do. The 2025 Clean Transit Awards highlight the best in eco-friendly transportation while also shining a spotlight on areas that need improvement. 🚆 The takeaway? Cities that invest in sustainable transit are making a real impact on emissions. Meanwhile, gas guzzlers (we’re looking at you, WVU!) still have some work to do. For a full breakdown of the data, check out the Appendix in our official report. Spoiler alert: numbers don’t lie, and neither do emissions reductions!"
  },
  {
    "objectID": "MP02.html#data-import",
    "href": "MP02.html#data-import",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.1 📊 Data Import",
    "text": "2.1 📊 Data Import\nWe started by acquiring data from EIA State Electricity Profiles, which we will use to estimate the environmental impact of the electricity used to run certain transit systems. 🚗\n\n2.1.0.1 State Electricity Profiles 🏛️\nFor purposes of this analysis, we will assume that all electricity generation in a state is fungible. That is, we will assign the average generation emissions to all-electric transit in a state, even if the transit authority officially has a “green supply” agreement in place.\n\n\nShow Code\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(DT)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(stringr) # Needed for str_replace_all()\nlibrary(purrr) # Needed for map2()\nlibrary(quarto) # Ensures Quarto execution works\n\n\n\n\nShow Code\n# Load libraries\nensure_package &lt;- function(pkg){\n    pkg &lt;- as.character(substitute(pkg))\n    options(repos = c(CRAN = \"https://cloud.r-project.org\"))\n    if(!require(pkg, character.only=TRUE)) install.packages(pkg)\n    stopifnot(require(pkg, character.only=TRUE))\n}\nensure_package(stringr)  # Ensure it's installed\nensure_package(dplyr)\nensure_package(httr2)\nensure_package(rvest)\nensure_package(datasets)\nensure_package(purrr)\nensure_package(DT)\n\nget_eia_sep &lt;- function(state, abbr){\n    state_formatted &lt;- str_to_lower(state) |&gt; str_replace_all(\"\\\\s\", \"\")\n    \n    dir_name &lt;- file.path(\"data\", \"mp02\")\n    file_name &lt;- file.path(dir_name, state_formatted)\n    \n    dir.create(dir_name, showWarnings=FALSE, recursive=TRUE)\n    \n    if(!file.exists(file_name)){\n        BASE_URL &lt;- \"https://www.eia.gov\"\n        REQUEST &lt;- request(BASE_URL) |&gt; \n            req_url_path(\"electricity\", \"state\", state_formatted)\n    \n        RESPONSE &lt;- req_perform(REQUEST)\n    \n        resp_check_status(RESPONSE)\n        \n        writeLines(resp_body_string(RESPONSE), file_name)\n    }\n    \n    TABLE &lt;- read_html(file_name) |&gt; \n        html_element(\"table\") |&gt; \n        html_table() |&gt;\n        mutate(Item = str_to_lower(Item))\n    \n    if(\"U.S. rank\" %in% colnames(TABLE)){\n        TABLE &lt;- TABLE |&gt; rename(Rank = `U.S. rank`)\n    }\n    \n    CO2_MWh &lt;- TABLE |&gt; \n        filter(Item == \"carbon dioxide (lbs/mwh)\") |&gt;\n        pull(Value) |&gt; \n        str_replace_all(\",\", \"\") |&gt;\n        as.numeric()\n    \n    PRIMARY &lt;- TABLE |&gt; \n        filter(Item == \"primary energy source\") |&gt; \n        pull(Rank)\n    \n    RATE &lt;- TABLE |&gt;\n        filter(Item == \"average retail price (cents/kwh)\") |&gt;\n        pull(Value) |&gt;\n        as.numeric()\n    \n    GENERATION_MWh &lt;- TABLE |&gt;\n        filter(Item == \"net generation (megawatthours)\") |&gt;\n        pull(Value) |&gt;\n        str_replace_all(\",\", \"\") |&gt;\n        as.numeric()\n    \n    data.frame(CO2_MWh               = CO2_MWh, \n               primary_source        = PRIMARY,\n               electricity_price_MWh = RATE * 10, # / 100 cents to dollars &\n               # * 1000 kWh to MWH \n               generation_MWh        = GENERATION_MWh, \n               state                 = state, \n               abbreviation          = abbr\n    )\n}\n\nEIA_SEP_REPORT &lt;- map2(state.name, state.abb, get_eia_sep) |&gt; list_rbind()\n\nensure_package(scales)\nensure_package(DT)\n\nEIA_SEP_REPORT |&gt; \n    select(-abbreviation) |&gt;\n    arrange(desc(CO2_MWh)) |&gt;\n    mutate(CO2_MWh = scales::number(CO2_MWh, big.mark=\",\"), \n           electricity_price_MWh = scales::dollar(electricity_price_MWh), \n           generation_MWh = scales::number(generation_MWh, big.mark=\",\")) |&gt;\n    rename(`Pounds of CO2 Emitted per MWh of Electricity Produced`=CO2_MWh, \n           `Primary Source of Electricity Generation`=primary_source, \n           `Average Retail Price for 1000 kWh`=electricity_price_MWh, \n           `Total Generation Capacity (MWh)`= generation_MWh, \n           State=state) |&gt;\n    kable(caption = \"EIA State Electricity Profile Report\")\n\n\n\nEIA State Electricity Profile Report\n\n\n\n\n\n\n\n\n\nPounds of CO2 Emitted per MWh of Electricity Produced\nPrimary Source of Electricity Generation\nAverage Retail Price for 1000 kWh\nTotal Generation Capacity (MWh)\nState\n\n\n\n\n1,925\nCoal\n$102.60\n52,286,784\nWest Virginia\n\n\n1,864\nCoal\n$83.90\n43,181,420\nWyoming\n\n\n1,741\nCoal\n$99.60\n63,217,080\nKentucky\n\n\n1,514\nCoal\n$108.70\n66,703,285\nMissouri\n\n\n1,497\nCoal\n$114.90\n90,046,880\nIndiana\n\n\n1,444\nPetroleum\n$386.00\n9,194,164\nHawaii\n\n\n1,414\nCoal\n$80.30\n42,068,807\nNorth Dakota\n\n\n1,354\nCoal\n$90.30\n33,496,554\nUtah\n\n\n1,180\nNatural gas\n$214.10\n6,717,825\nAlaska\n\n\n1,148\nNatural gas\n$127.20\n62,548,705\nWisconsin\n\n\n1,127\nCoal\n$109.70\n26,895,758\nMontana\n\n\n1,103\nCoal\n$91.40\n39,445,955\nNebraska\n\n\n1,095\nNatural gas\n$128.50\n4,772,059\nDelaware\n\n\n1,054\nCoal\n$117.60\n57,541,720\nColorado\n\n\n1,044\nNatural gas\n$110.40\n133,223,464\nOhio\n\n\n987\nNatural gas\n$97.30\n63,195,647\nArkansas\n\n\n966\nNatural gas\n$89.10\n97,784,565\nLouisiana\n\n\n923\nNatural gas\n$232.10\n19,695,884\nMassachusetts\n\n\n912\nNatural gas\n$136.80\n120,656,625\nMichigan\n\n\n855\nNatural gas\n$100.40\n547,294,552\nTexas\n\n\n847\nNatural gas\n$216.20\n10,430,846\nRhode Island\n\n\n817\nNatural gas\n$109.50\n72,933,440\nMississippi\n\n\n801\nWind\n$122.10\n57,276,862\nMinnesota\n\n\n794\nNatural gas\n$135.30\n259,798,479\nFlorida\n\n\n775\nWind\n$94.20\n69,836,973\nIowa\n\n\n763\nWind\n$108.00\n58,456,598\nKansas\n\n\n759\nWind\n$94.70\n39,269,073\nNew Mexico\n\n\n733\nNatural gas\n$110.60\n129,221,513\nGeorgia\n\n\n727\nNatural gas\n$114.70\n139,435,010\nAlabama\n\n\n715\nNuclear\n$106.90\n77,791,204\nTennessee\n\n\n684\nNatural gas\n$121.90\n111,838,736\nArizona\n\n\n655\nNatural gas\n$125.70\n235,924,937\nPennsylvania\n\n\n654\nNatural gas\n$130.90\n42,164,375\nNevada\n\n\n648\nNatural gas\n$93.00\n89,236,024\nOklahoma\n\n\n639\nNatural gas\n$106.10\n126,553,394\nNorth Carolina\n\n\n594\nNatural gas\n$106.80\n91,059,344\nVirginia\n\n\n576\nNatural gas\n$242.40\n40,666,418\nConnecticut\n\n\n558\nNatural gas\n$143.40\n36,000,650\nMaryland\n\n\n558\nNuclear\n$105.00\n100,853,387\nSouth Carolina\n\n\n522\nNuclear\n$117.50\n177,737,641\nIllinois\n\n\n522\nNatural gas\n$182.80\n124,039,988\nNew York\n\n\n518\nNatural gas\n$152.70\n64,228,924\nNew Jersey\n\n\n440\nNatural gas\n$248.70\n216,628,794\nCalifornia\n\n\n428\nNatural gas\n$208.40\n12,512,181\nMaine\n\n\n370\nHydroelectric\n$90.80\n17,842,446\nIdaho\n\n\n369\nWind\n$104.90\n17,436,158\nSouth Dakota\n\n\n344\nHydroelectric\n$103.20\n61,691,869\nOregon\n\n\n292\nHydroelectric\n$95.80\n102,960,605\nWashington\n\n\n269\nNuclear\n$229.60\n16,824,999\nNew Hampshire\n\n\n8\nHydroelectric\n$175.30\n2,480,199\nVermont\n\n\n\n\n\n🌍 Here, we have collected the effective emissions per MWh2⚡ as well as price and total state-wide generation capacity. We will use this data to compare the emissions of different transit modalities. We next turn to the National Transit Database to get information on various public transit authorities. Before we do so, however, let’s explore the SEP data a bit first.🔬📉"
  },
  {
    "objectID": "MP02.html#initial-analysis-of-sep-data",
    "href": "MP02.html#initial-analysis-of-sep-data",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.2 🔍 Initial Analysis of SEP Data ⚖️",
    "text": "2.2 🔍 Initial Analysis of SEP Data ⚖️\nLet’s answer some burning (fossil-free, we hope!) questions: 🚇\n\n2.2.1 1. Which state has the most expensive retail electricity? 💰⚡\nWhich state will make you cry when you get your electricity bill? 😭 Let’s find out!\n\n\nShow Code\nEIA_SEP_REPORT |&gt; \n  arrange(desc(electricity_price_MWh)) |&gt; \n  select(state, electricity_price_MWh) |&gt; \n  head(1) |&gt; \n  kable(caption = \"Most Expensive Retail Electricity\")\n\n\n\nMost Expensive Retail Electricity\n\n\nstate\nelectricity_price_MWh\n\n\n\n\nHawaii\n386\n\n\n\n\n\n\n\n2.2.2 2. Which state has the ‘dirtiest’ electricity mix? ☠️🌫️\nWhich state’s power plants are puffing out CO₂ like an angry dragon? 🐉🔥 Stay tuned for some shocking revelations!\n\n\nShow Code\nEIA_SEP_REPORT |&gt; \n  arrange(desc(CO2_MWh)) |&gt; \n  select(state, CO2_MWh) |&gt; \n  head(1) |&gt; \n  kable(caption = \"Dirtiest electricity mix\")\n\n\n\nDirtiest electricity mix\n\n\nstate\nCO2_MWh\n\n\n\n\nWest Virginia\n1925\n\n\n\n\n\n\n\n2.2.3 3. On average, how many pounds of CO2 are emitted per MWh of electricity produced in the US?🏭\nTime for some serious math! 📊 We’ll calculate the national average CO₂ emissions per MWh using a weighted average because we like our stats accurate.🎯\n\n\nShow Code\n# Calculate weighted average CO2 emissions\nweighted_avg_CO2 &lt;- sum(EIA_SEP_REPORT$CO2_MWh * EIA_SEP_REPORT$generation_MWh) / \n  sum(EIA_SEP_REPORT$generation_MWh)\n\ndata.frame(Weighted_Avg_CO2 = weighted_avg_CO2) |&gt; \n  kable(col.names = c(\"Weighted Average CO2 Emissions (lbs/MWh)\"),\n        caption = \"Weighted Average CO2 Emissions Across All States\")\n\n\n\nWeighted Average CO2 Emissions Across All States\n\n\nWeighted Average CO2 Emissions (lbs/MWh)\n\n\n\n\n805.3703\n\n\n\n\n\n\n\n2.2.4 4. 🦄 What is the rarest primary energy source in the US? What is the associated cost of electricity and where is it used?🧐\nWhat’s the mythical unicorn of US energy sources? 🦄✨ And where is it hiding? Let’s track it down and see how much it costs! 💸\n\n\nShow Code\nEIA_SEP_REPORT |&gt; \n  count(primary_source) |&gt; \n  arrange(n) |&gt; \n  slice(1) |&gt; \n  inner_join(EIA_SEP_REPORT, by = \"primary_source\") |&gt; \n  select(state, primary_source, electricity_price_MWh) |&gt; \n  kable(caption = \"Primary Energy Source with Lowest Occurrence\")\n\n\n\nPrimary Energy Source with Lowest Occurrence\n\n\nstate\nprimary_source\nelectricity_price_MWh\n\n\n\n\nHawaii\nPetroleum\n386\n\n\n\n\n\n\n\n2.2.5 5. My home state, Texas, has a reputation as being the home of “dirty fossil fuels” while NY has a reputation as a leader in clean energy. How many times cleaner is NY’s energy mix than that of Texas?🌱🔥\nIs Texas really the king of fossil fuels? 👑 And does New York truly deserve its green halo? 😇 Let’s compare their energy mixes and see how many times cleaner NY is compared to TX! 📊⚖️\n\n\nShow Code\nNY_CO2 &lt;- EIA_SEP_REPORT |&gt; filter(state == \"New York\") |&gt; pull(CO2_MWh)\nTX_CO2 &lt;- EIA_SEP_REPORT |&gt; filter(state == \"Texas\") |&gt; pull(CO2_MWh)\n\ncleaner_ratio &lt;- TX_CO2 / NY_CO2\n\ntibble(Metric = \"Cleaner Ratio (TX to NY)\", Value = cleaner_ratio) |&gt; \n  kable(caption = \"Texas vs. New York CO2 Emissions Ratio\")\n\n\n\nTexas vs. New York CO2 Emissions Ratio\n\n\nMetric\nValue\n\n\n\n\nCleaner Ratio (TX to NY)\n1.637931\n\n\n\n\n\nFun fact: New York’s energy mix is cleaner than Texas’s by a factor of 1.637931. That’s right, the Lone Star State might want to take notes from the Big Apple! 🍏⚡"
  },
  {
    "objectID": "MP02.html#importing-2023-annual-database-energy-consumption-report",
    "href": "MP02.html#importing-2023-annual-database-energy-consumption-report",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.3 Importing 2023 Annual Database Energy Consumption Report ⚡📊",
    "text": "2.3 Importing 2023 Annual Database Energy Consumption Report ⚡📊\nTo analyze the energy consumption data for public transit agencies, we first need to import the 2023 Annual Database Energy Consumption report. This Dataset is provided in an Excel spreadsheet (.xlsx) format. We will use the readxl package in R to load it.\n\n\nShow Code\nensure_package(readxl)\n# Create 'data/mp02' directory if not already present\nDATA_DIR &lt;- file.path(\"data\", \"mp02\")\ndir.create(DATA_DIR, showWarnings=FALSE, recursive=TRUE)\n\nNTD_ENERGY_FILE &lt;- file.path(DATA_DIR, \"2023_ntd_energy.xlsx\")\n\nif(!file.exists(NTD_ENERGY_FILE)){\n    DS &lt;- download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-10/2023%20Energy%20Consumption.xlsx\", \n                  destfile=NTD_ENERGY_FILE, \n                  method=\"curl\")\n    \n    if(DS | (file.info(NTD_ENERGY_FILE)$size == 0)){\n        cat(\"I was unable to download the NTD Energy File. Please try again.\\n\")\n        stop(\"Download failed\")\n    }\n}\n\nNTD_ENERGY_RAW &lt;- read_xlsx(NTD_ENERGY_FILE)\n\n\n\n\nShow Code\n### Data Cleaning 🧹\n\n\nensure_package(tidyr)\nto_numeric_fill_0 &lt;- function(x){\n    x &lt;- if_else(x == \"-\", NA, x)\n    replace_na(as.numeric(x), 0)\n}\n\nNTD_ENERGY &lt;- NTD_ENERGY_RAW |&gt; \n    select(-c(`Reporter Type`, \n              `Reporting Module`, \n              `Other Fuel`, \n              `Other Fuel Description`)) |&gt;\n    mutate(across(-c(`Agency Name`, \n                     `Mode`,\n                     `TOS`), \n                  to_numeric_fill_0)) |&gt;\n    group_by(`NTD ID`, `Mode`, `Agency Name`) |&gt;\n    summarize(across(where(is.numeric), sum), \n              .groups = \"keep\") |&gt;\n    mutate(ENERGY = sum(c_across(c(where(is.numeric))))) |&gt;\n    filter(ENERGY &gt; 0) |&gt;\n    select(-ENERGY) |&gt;\n    ungroup()\n\n\n\n2.3.1 🎲 The Wheel of Randomness! 🎰\nLadies and gentlemen, it’s time for the Random Transit Energy Lottery! 🎉🎟️ We’ll now select 10 lucky transit energy records at random! Who will make the cut? Who will be left behind? Let’s spin the wheel! 🔄✨\n\n\nShow Code\n# Sample 10 random rows and then pass them to kable()\nNTD_ENERGY |&gt; \n  slice_sample(n = 10) |&gt; \n  kable(caption = \"Random Sample of NTD_ENERGY Data\")\n\n\n\nRandom Sample of NTD_ENERGY Data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNTD ID\nMode\nAgency Name\nBio-Diesel\nBunker Fuel\nC Natural Gas\nDiesel Fuel\nElectric Battery\nElectric Propulsion\nEthanol\nMethonal\nGasoline\nHydrogen\nKerosene\nLiquified Nat Gas\nLiquified Petroleum Gas\n\n\n\n\n20008\nCB\nMTA New York City Transit\n0\n0\n0\n3852142\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n60009\nDR\nCity of Laredo\n0\n0\n0\n554\n0\n0\n0\n0\n39542\n0\n0\n0\n0\n\n\n50342\nDR\nHendricks County Sycamore Services\n0\n0\n0\n0\n0\n0\n0\n0\n43685\n0\n0\n0\n0\n\n\n90086\nDR\nCity of Riverside\n0\n0\n67566\n0\n0\n0\n0\n0\n395\n0\n0\n0\n0\n\n\n41199\nDR\nBoard of County Commissioners of St. Lucie County\n0\n0\n0\n47690\n0\n0\n0\n0\n95419\n0\n0\n0\n0\n\n\n40034\nDR\nCounty of Miami-Dade\n0\n0\n0\n0\n0\n0\n0\n0\n1054817\n0\n0\n0\n0\n\n\n60014\nMB\nCity of Brownsville\n0\n0\n0\n205208\n0\n0\n0\n0\n7239\n0\n0\n0\n0\n\n\n25\nMB\nSalem Area Mass Transit District\n297696\n0\n364746\n0\n0\n0\n0\n0\n19941\n0\n0\n0\n0\n\n\n20209\nDR\nSomerset County\n0\n0\n0\n181\n0\n0\n0\n0\n101194\n0\n0\n0\n0\n\n\n40053\nMB\nGreenville Transit Authority\n0\n0\n0\n175417\n197222\n0\n0\n0\n8899\n0\n0\n0\n0"
  },
  {
    "objectID": "MP02.html#recoding-transit-modes",
    "href": "MP02.html#recoding-transit-modes",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.4 🚇 Recoding Transit Modes 🚋🎭",
    "text": "2.4 🚇 Recoding Transit Modes 🚋🎭\n🚧 Warning: Mysterious Codes Ahead! 🚧\nBefore we can make sense of the Mode column, we need to crack the code! 🕵️‍♂️ First, let’s uncover the unique Mode codes in our data using distinct(). Then, we consult the sacred texts (a.k.a. the NTD website 📜) to decipher their meanings. 🧐\n\n2.4.1 🏗️ Time for a Makeover! 🖌️\nThe Mode column needs a glow-up! ✨ We’re about to give those cryptic abbreviations some real names so they’re easier to work with. Ready? Let’s do this! 🎬\n\n\nShow Code\nNTD_ENERGY &lt;- NTD_ENERGY |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\"  ~ \"Heavy Rail\", \n    Mode == \"LR\"  ~ \"Light Rail\", \n    Mode == \"CR\"  ~ \"Commuter Rail\", \n    Mode == \"MB\"  ~ \"Motor Bus\", \n    Mode == \"TB\"  ~ \"Trolleybus\", \n    Mode == \"TR\"  ~ \"Heritage Streetcar\", \n    Mode == \"SR\"  ~ \"Modern Streetcar\", \n    Mode == \"VP\"  ~ \"Vanpool\", \n    Mode == \"DR\"  ~ \"Demand Response\", \n    Mode == \"FB\"  ~ \"Ferryboat\", \n    Mode == \"MG\"  ~ \"Monorail/Automated Guideway\", \n    Mode == \"PB\"  ~ \"Publico\", \n    Mode == \"CB\"  ~ \"Commuter Bus\",\n    Mode == \"RB\"  ~ \"Rapid Bus\",\n    Mode == \"AR\"  ~ \"Aerial Tramway\",\n    Mode == \"YR\"  ~ \"Hybrid Rail\",\n    Mode == \"IP\"  ~ \"Inclined Plane Railway\",\n    Mode == \"CC\"  ~ \"Cable Car\",\n    TRUE          ~ \"Unknown\"\n  ))\n\nNTD_ENERGY |&gt; distinct(Mode) |&gt;\nkable(caption = \"Distinct Modes of Transport\")\n\n\n\nDistinct Modes of Transport\n\n\nMode\n\n\n\n\nDemand Response\n\n\nFerryboat\n\n\nMotor Bus\n\n\nModern Streetcar\n\n\nTrolleybus\n\n\nVanpool\n\n\nCommuter Bus\n\n\nRapid Bus\n\n\nLight Rail\n\n\nMonorail/Automated Guideway\n\n\nCommuter Rail\n\n\nAerial Tramway\n\n\nHeritage Streetcar\n\n\nHeavy Rail\n\n\nHybrid Rail\n\n\nInclined Plane Railway\n\n\nPublico\n\n\nCable Car"
  },
  {
    "objectID": "MP02.html#annual-database-service-by-agency",
    "href": "MP02.html#annual-database-service-by-agency",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.5 2023 Annual Database Service by Agency 📊🚇",
    "text": "2.5 2023 Annual Database Service by Agency 📊🚇\n🚨 Breaking News! 🚨 The latest 2023 Service by Agency report has just dropped! 🎤📉 We’re diving in to extract the juicy details about passenger trips across different transit services. 🚆🚌\n\n\nShow Code\nNTD_SERVICE_FILE &lt;- file.path(DATA_DIR, \"2023_service.csv\")\nif(!file.exists(NTD_SERVICE_FILE)){\n    DS &lt;- download.file(\"https://data.transportation.gov/resource/6y83-7vuw.csv\", \n                  destfile=NTD_SERVICE_FILE, \n                  method=\"curl\")\n    \n    if(DS | (file.info(NTD_SERVICE_FILE)$size == 0)){\n        cat(\"I was unable to download the NTD Service File. Please try again.\\n\")\n        stop(\"Download failed\")\n    }\n}\n\nNTD_SERVICE_RAW &lt;- read_csv(NTD_SERVICE_FILE)\n\n\n📢 Will our dataset arrive safely, or will it ghost us? 👻 Only time (and a stable internet connection) will tell! ⏳"
  },
  {
    "objectID": "MP02.html#clean-up-time",
    "href": "MP02.html#clean-up-time",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.6 Clean-Up Time! 🧹✨",
    "text": "2.6 Clean-Up Time! 🧹✨\n\n\nShow Code\nNTD_SERVICE &lt;- NTD_SERVICE_RAW |&gt;\n    mutate(`NTD ID` = as.numeric(`_5_digit_ntd_id`)) |&gt; \n    rename(Agency = agency, \n           City   = max_city, \n           State  = max_state,\n           UPT    = sum_unlinked_passenger_trips_upt, \n           MILES  = sum_passenger_miles) |&gt;\n    select(matches(\"^[A-Z]\", ignore.case=FALSE)) |&gt;\n    filter(MILES &gt; 0)\n\n\n🛠️ Boom! Now our dataset is sparkling clean! ✨ It’s time to put these numbers to work! 💪"
  },
  {
    "objectID": "MP02.html#exploring-ntd-service-data---lets-dive-in",
    "href": "MP02.html#exploring-ntd-service-data---lets-dive-in",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.7 🛥️ Exploring NTD Service Data - Let’s Dive In!",
    "text": "2.7 🛥️ Exploring NTD Service Data - Let’s Dive In!\nAlright, folks! Time to put on our data analyst hats and explore some seriously juicy transit numbers from the NTD_SERVICE Dataset. We’re going to answer some fun questions that might just reveal who’s cruising on the green lane of transit efficiency and who’s still stuck in the slow lane. Let’s see how this data speeds up the fun! 😎\n\n2.7.1 1. Which transit service has the most UPT annually? 🏆\nWhich transit service is the busiest, with the most Unlinked Passenger Trips (UPT) annually? Spoiler alert: It’s probably not the one with the tiniest buses.🚌\n\n\nShow Code\nNTD_SERVICE |&gt;\n  filter(!is.na(UPT)) |&gt;\n  arrange(desc(UPT)) |&gt;\n  select(Agency, UPT) |&gt;\n  head(1) |&gt;\n  kable(caption = \"Most UTP Annually\")\n\n\n\nMost UTP Annually\n\n\nAgency\nUPT\n\n\n\n\nMTA New York City Transit\n2632003044\n\n\n\n\n\n\n\n2.7.2 2. What is the average trip length of a trip on MTA NYC? 🗽\nTime for some serious subway sleuthing! 🕵️‍♂️ How long is the average trip on the MTA NYC? Are New Yorkers making quick, subway sprints, or are they getting comfy for a longer ride? We’re on a mission to figure out just how far these trips stretch, so hop on board! 🚇⏳\n\n\nShow Code\nNTD_SERVICE |&gt;\n  filter(grepl(\"MTA\", Agency, ignore.case = TRUE)) |&gt;\n  summarise(Average_Trip_Length = sum(MILES, na.rm = TRUE) / sum(UPT, na.rm = TRUE)) |&gt;\n  kable(caption = \"Average Trip Length On MTA Nyc\")\n\n\n\nAverage Trip Length On MTA Nyc\n\n\nAverage_Trip_Length\n\n\n\n\n4.562402\n\n\n\n\n\n\n\n2.7.3 3. Which transit service in NYC has the longest average trip length? 🚋\nWhich MTA service in New York City (including all five boroughs, yes, even Brooklyn 🗽) has the longest average trip length? Let’s just say, it’s probably not the one where the subway rats are the most frequent passengers. 🐀\nP.S. You’ll want to be extra careful with that City column; we wouldn’t want to accidentally send our buses on a detour to Brooklyn when they should be cruising through Manhattan!\n\n\nShow Code\nNYC_SERVICES &lt;- NTD_SERVICE |&gt;\n  filter(State == \"NY\", MILES &gt; 0, UPT &gt; 0) |&gt;\n  mutate(Average_Trip_Length = MILES / UPT) |&gt;\n  arrange(desc(Average_Trip_Length)) |&gt;\n  select(Agency, City, Average_Trip_Length)\n\nhead(NYC_SERVICES, 1) |&gt;\nkable(caption = \"NYC Longest Average Trip Length\")\n\n\n\nNYC Longest Average Trip Length\n\n\nAgency\nCity\nAverage_Trip_Length\n\n\n\n\nHampton Jitney, Inc.\nCalverton\n92.4465\n\n\n\n\n\n\n\n2.7.4 4. Which state has the fewest total miles travelled by public transit? 🐢\nWhich state is the turtle in the race, with the fewest total miles travelled by public transit? 🐢 Are some states just cruising along at a leisurely pace, or are they barely moving at all? It’s time to find out who’s not clocking up the miles! 🛑🚗\n\n\nShow Code\nNTD_SERVICE |&gt;\n  group_by(State) |&gt;\n  summarise(Total_Miles = sum(MILES, na.rm = TRUE)) |&gt;\n  arrange(Total_Miles) |&gt;\n  head(1) |&gt;\n  kable(caption = \"Fewest total miles Travelled By Public Transit\")\n\n\n\nFewest total miles Travelled By Public Transit\n\n\nState\nTotal_Miles\n\n\n\n\nNH\n3749892\n\n\n\n\n\n\n\n2.7.5 5. Are all states represented in this data? If no, which ones are missing? The state.name and state.abb objects we used above may be useful here.🚏🗺️\nNow for a little mystery – are all states in this data? Or did a few sneak out of the spotlight? 👀 Let’s use the state.name and state.abb to track down any states that may have taken the wrong exit. Looks like it’s time for a little data detective work! 🔍💼\n\n\nShow Code\nall_states &lt;- state.abb  # Vector of all US state abbreviations\npresent_states &lt;- unique(NTD_SERVICE$State)\nmissing_states &lt;- setdiff(all_states, present_states)\nkable(missing_states, caption = \"Missing States\")\n\n\n\nMissing States\n\n\nx\n\n\n\n\nAZ\n\n\nAR\n\n\nCA\n\n\nCO\n\n\nHI\n\n\nIA\n\n\nKS\n\n\nLA\n\n\nMO\n\n\nMT\n\n\nNE\n\n\nNV\n\n\nNM\n\n\nND\n\n\nOK\n\n\nSD\n\n\nTX\n\n\nUT\n\n\nWY"
  },
  {
    "objectID": "MP02.html#calculate-emissions-lets-crunch-some-carbon",
    "href": "MP02.html#calculate-emissions-lets-crunch-some-carbon",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.8 🌍 Calculate Emissions – Let’s Crunch Some Carbon! 💨",
    "text": "2.8 🌍 Calculate Emissions – Let’s Crunch Some Carbon! 💨\nTime to put on our environmental cap and get down to the nitty-gritty of CO2 emissions! We’re about to take a deep dive into some data to calculate the total emissions from different transit agencies and their modes. Spoiler alert: We’re going green – but with a twist! 🌱🔢\n\n2.8.1 Join the Three Tables – The Ultimate Data Party 🎉\nHere’s where we get our hands dirty (but in an eco-friendly way, of course!). We’ll join three tables together like the perfect data trio:\nNTD_SERVICE 🚍 – It tells us the Agency and Mode (because, let’s face it, transit is all about style, right?)\nNTD_ENERGY ⚡ – This table’s going to give us the lowdown on all the fuel sources. It’s like fuel’s Wikipedia page, but with more numbers.\nEIA_SEP_REPORT 📊 – This is where the magic happens! It tells us the CO2 emissions per MWh. Time to add some climate-friendly math into the mix. Once we’ve got these three tables chatting with each other, we’re ready to roll!\n\n\nShow Code\n# Create a mapping of state abbreviations to full names\nstate_abbrev_to_full &lt;- c(\n  \"AL\" = \"Alabama\", \"AK\" = \"Alaska\", \"AZ\" = \"Arizona\", \"AR\" = \"Arkansas\", \"CA\" = \"California\", \"CO\" = \"Colorado\", \n  \"CT\" = \"Connecticut\", \"DE\" = \"Delaware\", \"FL\" = \"Florida\", \"GA\" = \"Georgia\", \"HI\" = \"Hawaii\", \"ID\" = \"Idaho\", \n  \"IL\" = \"Illinois\", \"IN\" = \"Indiana\", \"IA\" = \"Iowa\", \"KS\" = \"Kansas\", \"KY\" = \"Kentucky\", \"LA\" = \"Louisiana\", \n  \"ME\" = \"Maine\", \"MD\" = \"Maryland\", \"MA\" = \"Massachusetts\", \"MI\" = \"Michigan\", \"MN\" = \"Minnesota\", \"MS\" = \"Mississippi\", \n  \"MO\" = \"Missouri\", \"MT\" = \"Montana\", \"NE\" = \"Nebraska\", \"NV\" = \"Nevada\", \"NH\" = \"New Hampshire\", \"NJ\" = \"New Jersey\", \n  \"NM\" = \"New Mexico\", \"NY\" = \"New York\", \"NC\" = \"North Carolina\", \"ND\" = \"North Dakota\", \"OH\" = \"Ohio\", \"OK\" = \"Oklahoma\", \n  \"OR\" = \"Oregon\", \"PA\" = \"Pennsylvania\", \"RI\" = \"Rhode Island\", \"SC\" = \"South Carolina\", \"SD\" = \"South Dakota\", \n  \"TN\" = \"Tennessee\", \"TX\" = \"Texas\", \"UT\" = \"Utah\", \"VT\" = \"Vermont\", \"VA\" = \"Virginia\", \"WA\" = \"Washington\", \n  \"WV\" = \"West Virginia\", \"WI\" = \"Wisconsin\", \"WY\" = \"Wyoming\"\n)\n\n# Fix State Names in NTD_SERVICE before joining\nNTD_SERVICE &lt;- NTD_SERVICE |&gt; mutate(State = state_abbrev_to_full[State])\n\n# Now perform the joins\nNTD_EMISSIONS &lt;- NTD_SERVICE |&gt;\n  select(Agency, State, `NTD ID`) |&gt;\n  inner_join(NTD_ENERGY, by = \"NTD ID\") |&gt;\n  inner_join(EIA_SEP_REPORT, by = c(\"State\" = \"state\"))\n\n# Check if the join worked\ndim(NTD_EMISSIONS)  # Should no longer be (0, X)\n\n\n[1] 650  23\n\n\n\n\n2.8.2 The Ultimate Emissions Table 🧮\nWe’re going to create a super sleek table with all the goods:\nAgency + Mode Pair – These are the dynamic duos of transit! 🚍🚆\nState – Every agency has a home, and we’ll find out which state it’s calling its turf! 🌎\nFuel Sources – Because we need to know how those buses are powering through your city streets! 🚨\nCO2 Emissions per MWh – Let’s see how much carbon’s being emitted for every megawatt-hour of power. (The more we know, the greener we grow! 🌳)\nNow, let’s clean up some fuel names and make sure everything aligns:\n\n\nShow Code\nNTD_EMISSIONS &lt;- NTD_EMISSIONS |&gt; \n  rename(\n    \"Bio diesel\" = \"Bio-Diesel\",\n    \"Natural Gas\" = \"C Natural Gas\",\n    \"LNG\" = \"Liquified Nat Gas\",\n    \"LPG\" = \"Liquified Petroleum Gas\",\n    \"Battery Electric\" = \"Electric Battery\",\n    \"Electric\" = \"Electric Propulsion\"\n  )\n\n\n\n\n2.8.3 The Formula – It’s Math, But Make It Eco! 🧑‍🏫\nNow for the fun part – the math! 💡\nWe’re going to use a long-ish arithmetic formula (don’t worry, it’s just a couple of steps) inside a mutate function to compute the total emissions for each Agency + Mode Pair. We’ll need to convert combustion fuels to CO2 emissions – but don’t panic, we’ve got conversion factors! 💪 You can hard code these bad boys in your script for simplicity:\n\n\nShow Code\nfuel_emission_factors &lt;- c(\n  \"Diesel Fuel\" = 10.19,    # kg CO2 per gallon\n  \"Gasoline\" = 8.89,\n  \"Natural Gas\" = 52.91,    # kg CO2 per MMBtu\n  \"LPG\" = 5.79,  \n  \"LNG\" = 4.29,\n  \"Kerosene\" = 9.96,\n  \"Ethanol\" = 1.94,\n  \"Hydrogen\" = 0,           # No emissions from hydrogen\n  \"Battery Electric\" = 0,   # Handled separately using CO2_MWh\n  \"Electric\" = 0            # Handled separately using CO2_MWh\n)\n\n\nThen, apply the emissions calculation:\n\n\nShow Code\nNTD_EMISSIONS &lt;- NTD_EMISSIONS |&gt;\n  mutate(\n    Fuel_Emissions = (`Diesel Fuel` * fuel_emission_factors[\"Diesel Fuel\"]) +\n      (`Gasoline` * fuel_emission_factors[\"Gasoline\"]) +\n      (`Natural Gas` * fuel_emission_factors[\"Natural Gas\"]) +\n      (`LPG` * fuel_emission_factors[\"LPG\"]) +\n      (`LNG` * fuel_emission_factors[\"LNG\"]) +\n      (`Kerosene` * fuel_emission_factors[\"Kerosene\"]) +\n      (`Ethanol` * fuel_emission_factors[\"Ethanol\"]) +\n      (`Hydrogen` * fuel_emission_factors[\"Hydrogen\"])\n  )\n\nNTD_EMISSIONS &lt;- NTD_EMISSIONS |&gt;\n  mutate(\n    Electricity_Emissions = `Electric` * CO2_MWh\n  )\n\nNTD_EMISSIONS &lt;- NTD_EMISSIONS |&gt;\n  mutate(\n    Total_Emissions = Fuel_Emissions + Electricity_Emissions\n  )\n\n\n💚 Let’s Save the Planet – One Data Row at a Time! Now that our emissions data is ready, let’s take a look at the final product! 🌍\n\n\nShow Code\nNTD_EMISSIONS |&gt; select(Agency, Mode, State, Fuel_Emissions, Electricity_Emissions, Total_Emissions) |&gt; arrange(desc(Total_Emissions))\n\n\n# A tibble: 650 × 6\n   Agency       Mode  State Fuel_Emissions Electricity_Emissions Total_Emissions\n   &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;          &lt;dbl&gt;                 &lt;dbl&gt;           &lt;dbl&gt;\n 1 MTA New Yor… Heav… New …             0           807152731200   807152731200 \n 2 MTA Long Is… Comm… New …      72196486.          286155388800   286227585286.\n 3 Metro-North… Comm… New …      71313390.          211429086408   211500399798.\n 4 New Jersey … Comm… New …     143674231.          189542379222   189686053453.\n 5 Chicago Tra… Heav… Illi…             0           177353391510   177353391510 \n 6 Southeaster… Comm… Penn…             0           134209031675   134209031675 \n 7 Massachuset… Heav… Mass…             0           125346279760   125346279760 \n 8 Southeaster… Heav… Penn…             0            75871258865    75871258865 \n 9 Metropolita… Heav… Geor…             0            56484703659    56484703659 \n10 Port Author… Heav… New …             0            51187752738    51187752738 \n# ℹ 640 more rows"
  },
  {
    "objectID": "MP02.html#normalize-emissions-to-transit-usage",
    "href": "MP02.html#normalize-emissions-to-transit-usage",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.9 Normalize Emissions to Transit Usage 🚆",
    "text": "2.9 Normalize Emissions to Transit Usage 🚆\nIn this task, we’re on a mission to normalize emissions (a fancy way of saying “make fair comparisons”) based on:\nEmissions per Unlinked Passenger Trip (UPT) 🚌👥\nEmissions per Passenger Mile 🚋🌱\n\n2.9.1 Normalize Emissions – Leveling the Playing Field! 🎯\nBefore we start handing out gold medals 🏅 (or shameful side-eyes 👀), we normalize emissions based on ridership. This ensures a fair fight—because comparing a tiny rural bus route to New York City’s subway isn’t exactly fair, right? 😆\n\n\nShow Code\n# Filter out agencies with extremely small values to avoid distortions\n\nAGENCY_NORMALIZED &lt;- NTD_SERVICE %&gt;%   # Use your actual dataset\n  left_join(NTD_EMISSIONS, by = \"NTD ID\") %&gt;%\n  filter(!is.na(Total_Emissions))  # Ensure you have valid emission data\n\n# Filter out agencies with extremely small values to avoid distortions\nAGENCY_NORMALIZED &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(UPT &gt; 1000, MILES &gt; 1000) %&gt;%  # Adjust thresholds as needed\n  mutate(\n    Emissions_per_UPT = ifelse(UPT &gt; 0, Total_Emissions / UPT, NA),\n    Emissions_per_Passenger_Mile = ifelse(MILES &gt; 0, Total_Emissions / MILES, NA)\n  )\n\n\n🚦 Now, with that done, let’s move on to finding our champions!"
  },
  {
    "objectID": "MP02.html#the-greenest-transit-agency-gta-iv-award-1",
    "href": "MP02.html#the-greenest-transit-agency-gta-iv-award-1",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.10 🥇 The Greenest Transit Agency (GTA IV Award #1) 🌱🚆",
    "text": "2.10 🥇 The Greenest Transit Agency (GTA IV Award #1) 🌱🚆\nWhich agency has the lowest emissions per passenger trip? And which one produces the least pollution per mile traveled?\nLet’s roll out the green carpet and announce the winners! 🎤🥁\n\n\nShow Code\nAGENCY_NORMALIZED &lt;- AGENCY_NORMALIZED %&gt;%\n  mutate(Size_Category = case_when(\n    UPT &lt; 10^6 ~ \"Small\",\n    UPT &gt;= 10^6 & UPT &lt; 10^8 ~ \"Medium\",\n    UPT &gt;= 10^8 ~ \"Large\"\n  ))\n\n\n\n2.10.1 Find the greenest transit agency by lowest emissions per UPT\n\n\nShow Code\nAGENCY_NORMALIZED &lt;- AGENCY_NORMALIZED %&gt;%\n  rename(Agency = Agency.x)  # Rename \"Agency.x\" to \"Agency\"\n\ngreenest_agency_UPT &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(!is.na(Size_Category) & Emissions_per_UPT &gt; 0) %&gt;%\n  group_by(Size_Category) %&gt;%\n  slice_min(Emissions_per_UPT, n = 1, with_ties = FALSE) %&gt;%\n  select(Size_Category, Agency, Emissions_per_UPT)\nkable(greenest_agency_UPT, caption = \"Greenest Agency By lowest Emissions Per UPT\")\n\n\n\nGreenest Agency By lowest Emissions Per UPT\n\n\nSize_Category\nAgency\nEmissions_per_UPT\n\n\n\n\nLarge\nNew Jersey Transit Corporation\n0.0024015\n\n\nMedium\nKing County, dba: King County Metro\n0.0007222\n\n\nSmall\nAltoona Metro Transit, dba: AMTRAN\n0.0056772\n\n\n\n\n\n\n\n2.10.2 Find the greenest transit agency by lowest emissions per Passenger Mile\n\n\nShow Code\ngreenest_agency_mile &lt;- AGENCY_NORMALIZED %&gt;%\n    filter(!is.na(Size_Category) & Emissions_per_UPT &gt; 0) %&gt;%\n  group_by(Size_Category) %&gt;%\n  slice_min(Emissions_per_Passenger_Mile, n = 1, with_ties = FALSE) %&gt;%\n  select(Size_Category, Agency, Emissions_per_Passenger_Mile)\nkable(greenest_agency_mile, caption= \"Greenest Transit Agency By Lowest Emissions Per Passenger Mile\")\n\n\n\nGreenest Transit Agency By Lowest Emissions Per Passenger Mile\n\n\n\n\n\n\n\nSize_Category\nAgency\nEmissions_per_Passenger_Mile\n\n\n\n\nLarge\nNew Jersey Transit Corporation\n0.0002061\n\n\nMedium\nKing County, dba: King County Metro\n0.0001889\n\n\nSmall\nAltoona Metro Transit, dba: AMTRAN\n0.0015636"
  },
  {
    "objectID": "MP02.html#total-emissions-avoided-gta-iv-award-2",
    "href": "MP02.html#total-emissions-avoided-gta-iv-award-2",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.11 Total Emissions Avoided (GTA IV Award #2) 🌱🚆",
    "text": "2.11 Total Emissions Avoided (GTA IV Award #2) 🌱🚆\nNow, let’s compute the total emissions avoided by public transit. Because without it, we’d have millions of solo drivers making traffic even worse than it already is! 😱🚗🚕🚙\nHow do we do this?\n1️⃣ Estimate emissions if all transit passengers drove cars instead.\n2️⃣ Use US CAFE fuel standards to convert miles to gasoline usage.\n3️⃣ Calculate emissions avoided by taking public transit instead of driving.\nUsed average CAFE standard of 24.7 mpg and CO2 emissions of 8.89 kg per gallon\n\n\nShow Code\nAGENCY_NORMALIZED &lt;- AGENCY_NORMALIZED %&gt;%\n  mutate(\n    Gallons_of_fuel = MILES / 24.7,  # Convert miles to fuel gallons\n    Emissions_from_driving = Gallons_of_fuel * 8.89,  # Convert gallons to CO2\n    Emissions_avoided = Emissions_from_driving - Total_Emissions  # Calculate CO2 saved\n  )\n\n\n\n2.11.1 Find agency with most emissions avoided 🏆\n\n\nShow Code\nmost_emissions_avoided_by_size &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(!is.na(Size_Category)) %&gt;%  # Ensure valid categories\n  group_by(Size_Category) %&gt;%\n  slice_max(Emissions_avoided, n = 1, with_ties = FALSE) %&gt;%\n  select(Size_Category, Agency, Emissions_avoided)\nkable(most_emissions_avoided_by_size, caption = \"Most Emissions Avoided\")\n\n\n\nMost Emissions Avoided\n\n\n\n\n\n\n\nSize_Category\nAgency\nEmissions_avoided\n\n\n\n\nLarge\nMTA New York City Transit\n3441010874\n\n\nMedium\nMetro-North Commuter Railroad Company, dba: MTA Metro-North Railroad\n413801729\n\n\nSmall\nHampton Jitney, Inc.\n13333018\n\n\n\n\n\nThis agency has officially saved the planet more than your coworker with the reusable straw. 🌱💚♻️\n\n\n2.11.2 🏆Most Improved Green Agency (GTA IV Award #3) 🚆 🏆\nThis award recognizes the transit agency that has demonstrated the most significant improvement in environmental efficiency compared to its peers. Instead of using past-year data (which may not always be available), this award is given to the agency that has the largest improvement relative to the median emissions per passenger mile in its category (Large, Medium, or Small).\n\n\nShow Code\nmost_improved_agency &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(!is.na(Emissions_per_Passenger_Mile) & Emissions_per_Passenger_Mile &gt; 0) %&gt;%\n  group_by(Size_Category) %&gt;%\n  mutate(median_emissions = median(Emissions_per_Passenger_Mile, na.rm = TRUE)) %&gt;%\n  mutate(emissions_improvement = median_emissions - Emissions_per_Passenger_Mile) %&gt;%\n  slice_max(order_by = emissions_improvement, n = 1) %&gt;%  # Select top in each category\n  ungroup() %&gt;%\n  select(Agency, Size_Category, Emissions_per_Passenger_Mile, median_emissions, emissions_improvement)\n\nkable(most_improved_agency, caption = \"Most Improved Agency\")\n\n\n\nMost Improved Agency\n\n\n\n\n\n\n\n\n\nAgency\nSize_Category\nEmissions_per_Passenger_Mile\nmedian_emissions\nemissions_improvement\n\n\n\n\nNew Jersey Transit Corporation\nLarge\n0.0002061\n0.1260740\n0.1258680\n\n\nKing County, dba: King County Metro\nMedium\n0.0001889\n0.2200267\n0.2198378\n\n\nAltoona Metro Transit, dba: AMTRAN\nSmall\n0.0015636\n0.3648839\n0.3633203\n\n\n\n\n\n\n\n2.11.3 💀Biggest Gas Guzzler⛽ (GTA IV Award #4) 🌱🚆\nThis award highlights the least fuel-efficient transit agencies in each size category (Large, Medium, Small). The “Biggest Gas Guzzler” is the agency with the highest Emissions per Passenger Mile, indicating it produces the most pollution per mile traveled by a passenger. This award serves as a benchmark for identifying areas where fuel efficiency improvements and sustainability measures are most needed.\n\n\nShow Code\nbiggest_gas_guzzler_by_size &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(!is.na(Size_Category)) %&gt;%\n  group_by(Size_Category) %&gt;%\n  slice_max(Emissions_per_Passenger_Mile, n = 1, with_ties = FALSE) %&gt;%\n  select(Size_Category, Agency, Emissions_per_Passenger_Mile)\n\nkable(biggest_gas_guzzler_by_size, caption =\"Biggest Gas Guzzler\")\n\n\n\nBiggest Gas Guzzler\n\n\n\n\n\n\n\nSize_Category\nAgency\nEmissions_per_Passenger_Mile\n\n\n\n\nLarge\nChicago Transit Authority\n162.6084\n\n\nMedium\nWest Virginia University, dba: Personal Rapid Transit\n645.1318\n\n\nSmall\nPennsylvania Department of Transportation\n273.8586"
  },
  {
    "objectID": "MP02.html#visualizations",
    "href": "MP02.html#visualizations",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.12 📈 Visualizations 🎨",
    "text": "2.12 📈 Visualizations 🎨\n\n2.12.0.1 🚍 Greenest Transit Agency - A Breath of Fresh Air! 🌍\n\n\nShow Code\ngreenest_data &lt;- data.frame(\n  Agency = c(\"New Jersey Transit Corporation\", \"King County, dba: King County Metro\", \"Altoona Metro Transit, dba: AMTRAN\"),\n  Size_Category = c(\"Large\", \"Medium\", \"Small\"),\n  Emissions_per_UPT = c(0.0024014936, 0.0007222026, 0.0056772412),\n  Emissions_per_Passenger_Mile = c(0.0002060647, 0.0001889437, 0.0015635784)\n) %&gt;% pivot_longer(cols = c(Emissions_per_UPT, Emissions_per_Passenger_Mile), \n                    names_to = \"Metric\", values_to = \"Emissions\")\n\n# Adjusting graph to make sure bars are visible\nggplot(greenest_data, aes(x = reorder(Agency, Emissions), y = Emissions, fill = Metric)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", width = 0.7) +  # Increased bar width\n  geom_text(aes(label = Size_Category), position = position_dodge(width = 0.7), vjust = -0.5, color = \"black\", size = 4) +  # Increased text size\n  labs(title = \"Greenest Transit Agency\", y = \"Emissions (kg CO₂)\", fill = \"Metric\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, max(greenest_data$Emissions) + 0.002)) +  # Adjust y-axis to ensure bars are visible\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nTalk about making a clean getaway! The MTA Bus Company and its smaller counterparts are taking the “green” route. We’re not just talking about eco-friendly buses, but real reductions in emissions. A round of applause for the greenest of them all!\n\n\n2.12.0.2 🌱 Most Emissions Avoided - The Green Warriors 💨\n\n\nShow Code\n# Define the emissions data\nemissions_data &lt;- data.frame(\n  Agency = c(\"MTA New York City Transit\", \"Metro-North Commuter Railroad Company\", \"Hampton Jitney, Inc.\"),\n  Emissions_Avoided = c(3441010874, 413801729, 13333018)\n)\n# Create the plot\nggplot(emissions_data, aes(x = reorder(Agency, Emissions_Avoided), y = Emissions_Avoided, fill = Agency)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Most Emissions Avoided\", y = \"CO₂ Avoided (kg)\", x = \"Agency\") +\n  theme_minimal() +\n  scale_y_log10(labels = scales::comma) +  # Apply logarithmic scale to the y-axis\n  geom_text(aes(label = scales::comma(Emissions_Avoided)), hjust = -0.1, size = 2)  # Adjust text positioning and size\n\n\n\n\n\n\n\n\n\nThese agencies are saving the planet one ride at a time! Hudson Transit Lines and its pals are on a mission to leave the world with fewer emissions. They’re all about that “low-carbon footprint” lifestyle!\n\n\n2.12.0.3 🚀 Most Improved Green Agency - Turning Green Around! 🌿\n\n\nShow Code\n## Most Improved Green Agency (Dumbbell Chart)\nlibrary(ggalt)\nimproved_data &lt;- data.frame(\n  Agency = c(\"MTA Bus Company\", \"Champaign-Urbana Mass Transit\", \"City of Decatur Transit\"),\n  Before = c(0.1260740,0.2200267, 0.3648839),\n  After = c(0.0002060647,0.0001889437, 0.0015635784)\n)\n\nggplot(improved_data, aes(y = Agency, x = Before, xend = After)) +\n  geom_dumbbell(color = \"blue\", size = 4, dot_guide = TRUE, dot_guide_size = 0.5) +\n  labs(title = \"Most Improved Green Agency\", x = \"Emissions per Mile (kg CO₂)\", y = \"Agency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThese agencies took the emissions “downshift” seriously! The MTA Bus Company may have started off with high emissions, but it’s now a model of green efficiency. Talk about a green makeover!\n\n\n2.12.0.4 🛢️ Biggest Gas Guzzler - Oops, It’s Guzzling More than Gas! 🍃\n\n\nShow Code\nguzzler_data &lt;- data.frame(\n  Agency = c(\"Chicago Transit Authority\", \"WVU Personal Rapid Transit\", \"Pennsylvania DOT\"),\n  Emissions = c(162.6084, 645.1, 273.9)\n)\n\nggplot(guzzler_data, aes(x = reorder(Agency, -Emissions), y = Emissions, fill = Emissions)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_gradient(low = \"yellow\", high = \"red\") +\n  labs(title = \"Biggest Gas Guzzler\", y = \"Emissions per Mile (kg CO₂)\", x = \"Agency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nSome agencies need to take a carbon diet! Looks like WVU Personal Rapid Transit took the term “gas guzzler” to the extreme. Maybe they should swap out those heavy engines for some electric vibes."
  },
  {
    "objectID": "MP02.html#conclusion",
    "href": "MP02.html#conclusion",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.13 📢 Conclusion",
    "text": "2.13 📢 Conclusion\n🚆 Public transit plays a huge role in reducing emissions! Our analysis highlights the best (and worst) performers. Keep supporting clean transit choices! 🌍💚"
  },
  {
    "objectID": "MP02.html#references",
    "href": "MP02.html#references",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.14 📚 References",
    "text": "2.14 📚 References\n\nNational Transit Database (NTD)\nEnergy Information Administration (EIA)\nEnvironmental Protection Agency (EPA)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Shubh’s Website",
    "section": "",
    "text": "I am Shubh Goyal, a student at Baruch College. My expected graduation date is December 2025, and my field of employment is Data Analyst. I love playing badminton, watching web series, and exploring new places.\nMy Resume: file:///C:/Users/goyal/OneDrive/Desktop/Shubh%20Goyal.pdf"
  },
  {
    "objectID": "MP01/mp01.html",
    "href": "MP01/mp01.html",
    "title": "NYC Payroll Policy Analysis",
    "section": "",
    "text": "This report analyzes NYC payroll data to evaluate potential policies aimed at reducing taxpayer expenses. We examine three policies:\n1. Capping salaries at the mayoral level\n2. Increasing staffing to reduce overtime\n3. A custom policy proposal\nThe analysis is based on historical payroll data, and all calculations are made using standardized assumptions."
  },
  {
    "objectID": "MP01/mp01.html#data-preparation",
    "href": "MP01/mp01.html#data-preparation",
    "title": "NYC Payroll Policy Analysis",
    "section": "2.1 Data Preparation",
    "text": "2.1 Data Preparation\n\n\nShow Code 💡\n#|message: false\n#|warning: false\nlibrary(readr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(scales) \nlibrary(DT)"
  },
  {
    "objectID": "MP01/mp01.html#load-data",
    "href": "MP01/mp01.html#load-data",
    "title": "NYC Payroll Policy Analysis",
    "section": "2.2 Load Data",
    "text": "2.2 Load Data\n\n\nShow Code 💡\n#|message: false\n#|warning: false\npayroll_data &lt;- read_csv(\"C:/Users/goyal/OneDrive/Documents/MP01/data/mp01/nyc_payroll_export.csv\")"
  },
  {
    "objectID": "MP01/mp01.html#inspect-data",
    "href": "MP01/mp01.html#inspect-data",
    "title": "NYC Payroll Policy Analysis",
    "section": "2.3 Inspect Data",
    "text": "2.3 Inspect Data\n\n\nShow Code 💡\npayroll_data &lt;- payroll_data %&gt;%\nmutate(\nagency_name = str_to_title(agency_name),\nlast_name = str_to_title(last_name),\nfirst_name = str_to_title(first_name),\nwork_location_borough = str_to_title(work_location_borough),\ntitle_description = str_to_title(title_description),\nleave_status = str_to_title(leave_status_as_of_june_30)\n)\n\n\n\n\nShow Code 💡\npayroll_data &lt;- payroll_data %&gt;% \nmutate(base_salary = as.numeric(base_salary), \nreg_hours = as.numeric(regular_hours), \not_hours = as.numeric(ot_hours))\nglimpse(payroll_data)\n\n\nRows: 6,225,611\nColumns: 19\n$ fiscal_year                &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2…\n$ payroll_number             &lt;dbl&gt; 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,…\n$ agency_name                &lt;chr&gt; \"Admin For Children's Svcs\", \"Admin For Chi…\n$ last_name                  &lt;chr&gt; \"Faye Fall\", \"Kilgore\", \"Wisdom\", \"Miller\",…\n$ first_name                 &lt;chr&gt; \"Sokhna\", \"Orlantha\", \"Cherise\", \"Moya-Gaye…\n$ mid_init                   &lt;chr&gt; \"M\", \"B\", \"M\", \"S\", \"M\", \"L\", \"O\", NA, \"N\",…\n$ agency_start_date          &lt;dttm&gt; 2023-11-20, 2023-08-28, 2022-10-24, 2023-0…\n$ work_location_borough      &lt;chr&gt; \"Bronx\", \"Brooklyn\", \"Manhattan\", \"Manhatta…\n$ title_description          &lt;chr&gt; \"Child Protective Specialist\", \"Child Prote…\n$ leave_status_as_of_june_30 &lt;chr&gt; \"ACTIVE\", \"ACTIVE\", \"ON LEAVE\", \"ON LEAVE\",…\n$ base_salary                &lt;dbl&gt; 62043, 62043, 43144, 62043, 60236, 62043, 6…\n$ pay_basis                  &lt;chr&gt; \"per Annum\", \"per Annum\", \"per Annum\", \"per…\n$ regular_hours              &lt;dbl&gt; 1050.00, 1470.00, 1251.50, 1400.75, 700.00,…\n$ regular_gross_paid         &lt;dbl&gt; 31267.96, 44660.96, 28649.20, 44515.43, 221…\n$ ot_hours                   &lt;dbl&gt; 12.00, 99.75, 30.00, 44.75, 53.00, 146.00, …\n$ total_ot_paid              &lt;dbl&gt; 425.00, 3859.84, 802.42, 1476.98, 1933.33, …\n$ total_other_pay            &lt;dbl&gt; 78.04, 78.14, 78.26, 78.37, 78.47, 78.86, 7…\n$ leave_status               &lt;chr&gt; \"Active\", \"Active\", \"On Leave\", \"On Leave\",…\n$ reg_hours                  &lt;dbl&gt; 1050.00, 1470.00, 1251.50, 1400.75, 700.00,…"
  },
  {
    "objectID": "MP01/mp01.html#mayor-eric-adamss-salary",
    "href": "MP01/mp01.html#mayor-eric-adamss-salary",
    "title": "NYC Payroll Policy Analysis",
    "section": "3.1 Mayor Eric Adams’s Salary",
    "text": "3.1 Mayor Eric Adams’s Salary\n\n\nShow Code 💡\nmayor_data &lt;- payroll_data %&gt;%\nfilter(str_detect( first_name, \"Eric\") & str_detect( last_name , \"Adams\")) %&gt;%\nselect( fiscal_year , title_description , agency_name , base_salary ) %&gt;%\n  arrange( fiscal_year )\nmayor_data %&gt;%\nmutate( base_salary = dollar( base_salary )) %&gt;%\ndatatable(options = list( searching = FALSE, paging = FALSE, info = FALSE))"
  },
  {
    "objectID": "MP01/mp01.html#calculation-of-total-compensation",
    "href": "MP01/mp01.html#calculation-of-total-compensation",
    "title": "NYC Payroll Policy Analysis",
    "section": "3.2 Calculation of Total Compensation",
    "text": "3.2 Calculation of Total Compensation\n\n\nShow Code 💡\npayroll_data &lt;- payroll_data %&gt;%\nmutate (total_compensation = case_when(\npay_basis == \"per Annum\" ~ base_salary,\npay_basis == \"per Hour\" ~ base_salary * regular_hours + (base_salary * 1.5 * ot_hours),\npay_basis == \"per Day\" ~ base_salary * (regular_hours / 7.5),TRUE ~ base_salary ) )\n\ndatatable(payroll_data %&gt;%\nselect(first_name, last_name, agency_name, title_description, pay_basis, base_salary, regular_hours, ot_hours, total_compensation) %&gt;%\narrange(desc(total_compensation)) %&gt;% \nslice_head(n = 10),options = list(scrollX = TRUE))"
  },
  {
    "objectID": "MP01/mp01.html#policy-1-capping-salaries-at-mayoral-level",
    "href": "MP01/mp01.html#policy-1-capping-salaries-at-mayoral-level",
    "title": "NYC Payroll Policy Analysis",
    "section": "5.1 Policy 1: Capping Salaries at Mayoral Level",
    "text": "5.1 Policy 1: Capping Salaries at Mayoral Level\n\n5.1.1 Compute the Mayor’s salary per year\n\n\nShow Code 💡\nmayor_salary &lt;- payroll_data %&gt;%\n  filter(title_description == \"Mayor\") %&gt;%\n  select(fiscal_year, total_compensation)\ndatatable(mayor_salary, options = list(scrollX = TRUE))\n\n\n\n\n\n\n\n\n5.1.2 Identify High Earners\n\n\nShow Code 💡\nhigh_salaries &lt;- payroll_data %&gt;%\ninner_join(mayor_salary, by = \"fiscal_year\", suffix = c(\"_emp\", \"_mayor\")) %&gt;%\nfilter(total_compensation_emp &gt; total_compensation_mayor)\n\n\n\n\n5.1.3 Total Savings\n\n\nShow Code 💡\ntotal_savings &lt;- sum(high_salaries$total_compensation_emp - high_salaries$total_compensation_mayor, na.rm = TRUE)\n\ndatatable(\n  high_salaries %&gt;%\n    select(fiscal_year, first_name, last_name, title_description, agency_name, total_compensation_emp, total_compensation_mayor) %&gt;%\n    slice_head(n = 100),  \n  options = list(scrollX = TRUE)\n)"
  },
  {
    "objectID": "MP01/mp01.html#policy-2-increasing-staffing-to-reduce-overtime-expenses",
    "href": "MP01/mp01.html#policy-2-increasing-staffing-to-reduce-overtime-expenses",
    "title": "NYC Payroll Policy Analysis",
    "section": "5.2 Policy 2: Increasing Staffing to Reduce Overtime Expenses",
    "text": "5.2 Policy 2: Increasing Staffing to Reduce Overtime Expenses\n\n5.2.1 Calculate total overtime\n\n\nShow Code 💡\novertime_reduction &lt;- payroll_data %&gt;%\ngroup_by(agency_name, title_description) %&gt;%\nsummarize( total_overtime_hours = sum(ot_hours, na.rm = TRUE), full_time_equivalent_needed = total_overtime_hours / 2000 ) %&gt;% arrange(desc(total_overtime_hours))\ndatatable(overtime_reduction, options = list(scrollX = TRUE))\n\n\n\n\n\n\n\n\n5.2.2 Total Potential Savings\n\n\nShow Code 💡\novertime_savings &lt;- payroll_data %&gt;%\ngroup_by(agency_name, title_description) %&gt;%\nsummarize( overtime_cost = sum(1.5 * base_salary * ot_hours, na.rm = TRUE),\nregular_cost = sum(base_salary * (ot_hours / 40), na.rm = TRUE),\npotential_savings = overtime_cost - regular_cost ) %&gt;%\narrange(desc(potential_savings))\ndatatable(overtime_savings, options = list(scrollX = TRUE))\n\n\n\n\n\n\n\n\n5.2.3 Total Agency Savings\n\n\nShow Code 💡\nagency_savings &lt;- overtime_savings %&gt;%\ngroup_by(agency_name) %&gt;%\nsummarize( total_overtime_cost = sum(overtime_cost, na.rm = TRUE),\ntotal_regular_cost = sum(regular_cost, na.rm = TRUE),\ntotal_savings = sum(potential_savings, na.rm = TRUE) ) %&gt;%\narrange(desc(total_savings))\ndatatable(agency_savings, options = list(scrollX = TRUE))"
  },
  {
    "objectID": "MP01/mp01.html#policy-3-overtime-reduction-through-strategy-hiring",
    "href": "MP01/mp01.html#policy-3-overtime-reduction-through-strategy-hiring",
    "title": "NYC Payroll Policy Analysis",
    "section": "5.3 Policy 3: Overtime Reduction Through Strategy Hiring",
    "text": "5.3 Policy 3: Overtime Reduction Through Strategy Hiring\n\n5.3.1 Overview\nMany NYC agencies rely heavily on overtime (OT) to compensate for staffing shortages, significantly inflating payroll costs. Instead of paying excessive overtime wages, the city could hire additional employees to reduce OT dependency.\nAnalysis Steps:\n\nIdentify High-Overtime Employees\nCompare Costs\nPotential Savings\nRecommendation\n\n\n\n5.3.2 Identify High-Overtime Employees\nFind employees with excessive overtime hours (e.g., more than 500 OT hours per year).\n\n\nShow Code 💡\nhigh_overtime_employees &lt;- payroll_data %&gt;%\nfilter(ot_hours &gt; 500) %&gt;%\ngroup_by(title_description, agency_name) %&gt;%\nsummarize( avg_overtime_hours = mean(ot_hours, na.rm = TRUE),\ntotal_overtime_pay = sum(total_ot_paid, na.rm = TRUE), num_high_overtime_employees = n(),\navg_base_salary = mean(base_salary, na.rm = TRUE) ) %&gt;%\narrange(desc(total_overtime_pay))\ndatatable(high_overtime_employees, options = list(scrollX = TRUE))\n\n\n\n\n\n\n\n\n5.3.3 Compare Costs of Overtime vs. Hiring\nAssuming a standard 2,000-hour work year\n\n\nShow Code 💡\nestimated_new_hires &lt;- high_overtime_employees %&gt;%\nmutate( equivalent_full_time_positions = round(avg_overtime_hours / 2000, 1), total_new_hire_salary = equivalent_full_time_positions * avg_base_salary ) %&gt;%\nselect(agency_name, title_description, num_high_overtime_employees, equivalent_full_time_positions, total_overtime_pay, total_new_hire_salary)\ndatatable(estimated_new_hires, options = list(scrollX = TRUE))\n\n\n\n\n\n\n\n\n5.3.4 Calculate Potential Savings\nCompare the total overtime cost vs. the cost of hiring new employees\n\n\nShow Code 💡\npotential_savings &lt;- estimated_new_hires %&gt;%\nmutate(savings = total_overtime_pay - total_new_hire_salary) %&gt;%\narrange(desc(savings))\ndatatable(potential_savings, options = list(scrollX = TRUE))\n\n\n\n\n\n\n\n\n5.3.5 Identify Agencies with Highest OT Dependency\nFind agencies where overtime reliance is highest\n\n\nShow Code 💡\nlibrary(dplyr)\n\novertime_by_agency &lt;- payroll_data %&gt;%\n  group_by(agency_name) %&gt;%\n  summarize(\n    total_overtime_pay = sum(total_ot_paid, na.rm = TRUE),\n    total_base_salary = sum(base_salary, na.rm = TRUE),\n    ot_to_salary_ratio = total_overtime_pay / total_base_salary  # Corrected calculation\n  ) %&gt;%\n  arrange(desc(ot_to_salary_ratio))\n\n\n\n\n5.3.6 Recommendations\n\nAgencies with the highest OT-to-salary ratios should prioritize hiring over paying OT.\nJob roles with excessive OT hours (e.g., NYPD, FDNY, sanitation workers) should be assessed for staffing shortages.\nThe city could cap annual OT hours per employee and use the savings to hire additional workers"
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "Honoring the Green, the Lean, and the Gas-Guzzling Machines! 🌱🔥\nNew York, NY – Public transit plays a crucial role in reducing carbon footprints, but not all agencies are created equal. Some transit systems have become champions of eco-efficiency, while others… well, let’s just say they have room for improvement.\nAfter analyzing emissions data from transit agencies nationwide, we proudly present the 2025 Clean Transit Awards, recognizing the best (and worst) in sustainable transit. These awards highlight Small, Medium, and Large agencies that have made a measurable impact on their carbon footprint—or left tire marks on the environment.\nSo, without further ado, let’s reveal the greenest, the most improved, and, of course, the biggest gas guzzlers!\n\n\nThis prestigious award goes to the transit agencies that produce the least emissions per passenger trip and per mile traveled. In other words, these winners are basically the Tesla Model S of buses—except way more affordable and accessible.\nBy Passenger Trips:\n🥇Large Agency Winner: New Jersey Transit Corporation\n🥇Medium Agency Winner: King County, dba: King County Metro\n🥇Small Agency Winner: Small Altoona Metro Transit, dba: AMTRAN\nBy Passenger Mile:\n🥇Large Agency Winner:🚆New Jersey Transit Corporation,\n🥇Medium Agency Winner: King County, dba: King County Metro,\n🥇Small Agency Winner: Small Altoona Metro Transit, dba: AMTRA,\n\n\n\n“If pollution had an arch-nemesis, it would be these guys.”\nImagine a world where all transit riders suddenly switched to single-passenger cars. 🚗🚗🚗 Yikes! The traffic jams would be longer than your uncle’s conspiracy theories at Thanksgiving, and emissions would skyrocket.\nThis award goes to the transit agencies that saved us from the most pollution by preventing countless solo car trips.\n🥇 Large Agency Winner: MTA New York City Transit 3441010874 avoided\n🥇 Medium Agency Winner: Metro-North Commuter Railroad Company, dba: MTA Metro-North Railroad 413801729 avoided\n🥇 Small Agency Winner: Hampton Jitney, Inc. 1333301 avoided\n\n\n\n“From gas-guzzler to eco-hustler!”\nThis award goes to the agency that has made the biggest leap toward sustainability—not by comparing to past-year data, but by seeing who improved the most compared to their peers.\n🥇 Large Agency Winner: New Jersey Transit Corporation Reduced from 0.1260740 to 0.0002060647 per mile\n🥇 Medium Agency Winner: King County, dba: King County Metro Reduced from 0.2200267 to 0.0001889437 per mile\n🥇 Small Agency Winner: Altoona Metro Transit, dba: AMTRAN – Reduced from 0.3648839 to 0.0015635784 per mile\n\n\n\n“Not all heroes wear capes… and not all transit agencies are heroes.”Not every agency can be a green machine. This award “honors” those transit agencies that burn through fuel like it’s going out of style, producing the highest emissions per passenger mile. (Spoiler alert: This is NOT the award you want to win.)\n🥇 Large Agency Winner: Chicago Transit Authority 162.6084 kg CO₂ per mile\n🥇 Medium Agency Winner: West Virginia University, dba: Personal Rapid Transit 645.1318 kg CO₂ per mile\n🥇 Small Agency Winner: Pennsylvania Department of Transportation 273.8586 CO₂ per mile\nWhile some agencies are already champions of green transit, others have some serious catching up to do. The 2025 Clean Transit Awards highlight the best in eco-friendly transportation while also shining a spotlight on areas that need improvement. 🚆 The takeaway? Cities that invest in sustainable transit are making a real impact on emissions. Meanwhile, gas guzzlers (we’re looking at you, WVU!) still have some work to do. For a full breakdown of the data, check out the Appendix in our official report. Spoiler alert: numbers don’t lie, and neither do emissions reductions!"
  },
  {
    "objectID": "mp02.html#greenest-transit-agency-the-mvp-most-valuable-pollution-reducer-award",
    "href": "mp02.html#greenest-transit-agency-the-mvp-most-valuable-pollution-reducer-award",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "This prestigious award goes to the transit agencies that produce the least emissions per passenger trip and per mile traveled. In other words, these winners are basically the Tesla Model S of buses—except way more affordable and accessible.\nBy Passenger Trips:\n🥇Large Agency Winner: New Jersey Transit Corporation\n🥇Medium Agency Winner: King County, dba: King County Metro\n🥇Small Agency Winner: Small Altoona Metro Transit, dba: AMTRAN\nBy Passenger Mile:\n🥇Large Agency Winner:🚆New Jersey Transit Corporation,\n🥇Medium Agency Winner: King County, dba: King County Metro,\n🥇Small Agency Winner: Small Altoona Metro Transit, dba: AMTRA,"
  },
  {
    "objectID": "mp02.html#most-emissions-avoided-the-carbon-buster-award",
    "href": "mp02.html#most-emissions-avoided-the-carbon-buster-award",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "“If pollution had an arch-nemesis, it would be these guys.”\nImagine a world where all transit riders suddenly switched to single-passenger cars. 🚗🚗🚗 Yikes! The traffic jams would be longer than your uncle’s conspiracy theories at Thanksgiving, and emissions would skyrocket.\nThis award goes to the transit agencies that saved us from the most pollution by preventing countless solo car trips.\n🥇 Large Agency Winner: MTA New York City Transit 3441010874 avoided\n🥇 Medium Agency Winner: Metro-North Commuter Railroad Company, dba: MTA Metro-North Railroad 413801729 avoided\n🥇 Small Agency Winner: Hampton Jitney, Inc. 1333301 avoided"
  },
  {
    "objectID": "mp02.html#most-improved-green-agency-the-comeback-kid-award",
    "href": "mp02.html#most-improved-green-agency-the-comeback-kid-award",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "“From gas-guzzler to eco-hustler!”\nThis award goes to the agency that has made the biggest leap toward sustainability—not by comparing to past-year data, but by seeing who improved the most compared to their peers.\n🥇 Large Agency Winner: New Jersey Transit Corporation Reduced from 0.1260740 to 0.0002060647 per mile\n🥇 Medium Agency Winner: King County, dba: King County Metro Reduced from 0.2200267 to 0.0001889437 per mile\n🥇 Small Agency Winner: Altoona Metro Transit, dba: AMTRAN – Reduced from 0.3648839 to 0.0015635784 per mile"
  },
  {
    "objectID": "mp02.html#biggest-gas-guzzler-the-oh-no-fix-that-award",
    "href": "mp02.html#biggest-gas-guzzler-the-oh-no-fix-that-award",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "“Not all heroes wear capes… and not all transit agencies are heroes.”Not every agency can be a green machine. This award “honors” those transit agencies that burn through fuel like it’s going out of style, producing the highest emissions per passenger mile. (Spoiler alert: This is NOT the award you want to win.)\n🥇 Large Agency Winner: Chicago Transit Authority 162.6084 kg CO₂ per mile\n🥇 Medium Agency Winner: West Virginia University, dba: Personal Rapid Transit 645.1318 kg CO₂ per mile\n🥇 Small Agency Winner: Pennsylvania Department of Transportation 273.8586 CO₂ per mile\nWhile some agencies are already champions of green transit, others have some serious catching up to do. The 2025 Clean Transit Awards highlight the best in eco-friendly transportation while also shining a spotlight on areas that need improvement. 🚆 The takeaway? Cities that invest in sustainable transit are making a real impact on emissions. Meanwhile, gas guzzlers (we’re looking at you, WVU!) still have some work to do. For a full breakdown of the data, check out the Appendix in our official report. Spoiler alert: numbers don’t lie, and neither do emissions reductions!"
  },
  {
    "objectID": "mp02.html#data-import",
    "href": "mp02.html#data-import",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.1 📊 Data Import",
    "text": "2.1 📊 Data Import\nWe started by acquiring data from EIA State Electricity Profiles, which we will use to estimate the environmental impact of the electricity used to run certain transit systems. 🚗\n\n2.1.0.1 State Electricity Profiles 🏛️\nFor purposes of this analysis, we will assume that all electricity generation in a state is fungible. That is, we will assign the average generation emissions to all-electric transit in a state, even if the transit authority officially has a “green supply” agreement in place.\n\n\nShow Code\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(DT)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(stringr) # Needed for str_replace_all()\nlibrary(purrr) # Needed for map2()\nlibrary(quarto) # Ensures Quarto execution works\n\n\n\n\nShow Code\n# Load libraries\nensure_package &lt;- function(pkg){\n    pkg &lt;- as.character(substitute(pkg))\n    options(repos = c(CRAN = \"https://cloud.r-project.org\"))\n    if(!require(pkg, character.only=TRUE)) install.packages(pkg)\n    stopifnot(require(pkg, character.only=TRUE))\n}\nensure_package(stringr)  # Ensure it's installed\nensure_package(dplyr)\nensure_package(httr2)\nensure_package(rvest)\nensure_package(datasets)\nensure_package(purrr)\nensure_package(DT)\n\nget_eia_sep &lt;- function(state, abbr){\n    state_formatted &lt;- str_to_lower(state) |&gt; str_replace_all(\"\\\\s\", \"\")\n    \n    dir_name &lt;- file.path(\"data\", \"mp02\")\n    file_name &lt;- file.path(dir_name, state_formatted)\n    \n    dir.create(dir_name, showWarnings=FALSE, recursive=TRUE)\n    \n    if(!file.exists(file_name)){\n        BASE_URL &lt;- \"https://www.eia.gov\"\n        REQUEST &lt;- request(BASE_URL) |&gt; \n            req_url_path(\"electricity\", \"state\", state_formatted)\n    \n        RESPONSE &lt;- req_perform(REQUEST)\n    \n        resp_check_status(RESPONSE)\n        \n        writeLines(resp_body_string(RESPONSE), file_name)\n    }\n    \n    TABLE &lt;- read_html(file_name) |&gt; \n        html_element(\"table\") |&gt; \n        html_table() |&gt;\n        mutate(Item = str_to_lower(Item))\n    \n    if(\"U.S. rank\" %in% colnames(TABLE)){\n        TABLE &lt;- TABLE |&gt; rename(Rank = `U.S. rank`)\n    }\n    \n    CO2_MWh &lt;- TABLE |&gt; \n        filter(Item == \"carbon dioxide (lbs/mwh)\") |&gt;\n        pull(Value) |&gt; \n        str_replace_all(\",\", \"\") |&gt;\n        as.numeric()\n    \n    PRIMARY &lt;- TABLE |&gt; \n        filter(Item == \"primary energy source\") |&gt; \n        pull(Rank)\n    \n    RATE &lt;- TABLE |&gt;\n        filter(Item == \"average retail price (cents/kwh)\") |&gt;\n        pull(Value) |&gt;\n        as.numeric()\n    \n    GENERATION_MWh &lt;- TABLE |&gt;\n        filter(Item == \"net generation (megawatthours)\") |&gt;\n        pull(Value) |&gt;\n        str_replace_all(\",\", \"\") |&gt;\n        as.numeric()\n    \n    data.frame(CO2_MWh               = CO2_MWh, \n               primary_source        = PRIMARY,\n               electricity_price_MWh = RATE * 10, # / 100 cents to dollars &\n               # * 1000 kWh to MWH \n               generation_MWh        = GENERATION_MWh, \n               state                 = state, \n               abbreviation          = abbr\n    )\n}\n\nEIA_SEP_REPORT &lt;- map2(state.name, state.abb, get_eia_sep) |&gt; list_rbind()\n\nensure_package(scales)\nensure_package(DT)\n\nEIA_SEP_REPORT |&gt; \n    select(-abbreviation) |&gt;\n    arrange(desc(CO2_MWh)) |&gt;\n    mutate(CO2_MWh = scales::number(CO2_MWh, big.mark=\",\"), \n           electricity_price_MWh = scales::dollar(electricity_price_MWh), \n           generation_MWh = scales::number(generation_MWh, big.mark=\",\")) |&gt;\n    rename(`Pounds of CO2 Emitted per MWh of Electricity Produced`=CO2_MWh, \n           `Primary Source of Electricity Generation`=primary_source, \n           `Average Retail Price for 1000 kWh`=electricity_price_MWh, \n           `Total Generation Capacity (MWh)`= generation_MWh, \n           State=state) |&gt;\n    kable(caption = \"EIA State Electricity Profile Report\")\n\n\n\nEIA State Electricity Profile Report\n\n\n\n\n\n\n\n\n\nPounds of CO2 Emitted per MWh of Electricity Produced\nPrimary Source of Electricity Generation\nAverage Retail Price for 1000 kWh\nTotal Generation Capacity (MWh)\nState\n\n\n\n\n1,925\nCoal\n$102.60\n52,286,784\nWest Virginia\n\n\n1,864\nCoal\n$83.90\n43,181,420\nWyoming\n\n\n1,741\nCoal\n$99.60\n63,217,080\nKentucky\n\n\n1,514\nCoal\n$108.70\n66,703,285\nMissouri\n\n\n1,497\nCoal\n$114.90\n90,046,880\nIndiana\n\n\n1,444\nPetroleum\n$386.00\n9,194,164\nHawaii\n\n\n1,414\nCoal\n$80.30\n42,068,807\nNorth Dakota\n\n\n1,354\nCoal\n$90.30\n33,496,554\nUtah\n\n\n1,180\nNatural gas\n$214.10\n6,717,825\nAlaska\n\n\n1,148\nNatural gas\n$127.20\n62,548,705\nWisconsin\n\n\n1,127\nCoal\n$109.70\n26,895,758\nMontana\n\n\n1,103\nCoal\n$91.40\n39,445,955\nNebraska\n\n\n1,095\nNatural gas\n$128.50\n4,772,059\nDelaware\n\n\n1,054\nCoal\n$117.60\n57,541,720\nColorado\n\n\n1,044\nNatural gas\n$110.40\n133,223,464\nOhio\n\n\n987\nNatural gas\n$97.30\n63,195,647\nArkansas\n\n\n966\nNatural gas\n$89.10\n97,784,565\nLouisiana\n\n\n923\nNatural gas\n$232.10\n19,695,884\nMassachusetts\n\n\n912\nNatural gas\n$136.80\n120,656,625\nMichigan\n\n\n855\nNatural gas\n$100.40\n547,294,552\nTexas\n\n\n847\nNatural gas\n$216.20\n10,430,846\nRhode Island\n\n\n817\nNatural gas\n$109.50\n72,933,440\nMississippi\n\n\n801\nWind\n$122.10\n57,276,862\nMinnesota\n\n\n794\nNatural gas\n$135.30\n259,798,479\nFlorida\n\n\n775\nWind\n$94.20\n69,836,973\nIowa\n\n\n763\nWind\n$108.00\n58,456,598\nKansas\n\n\n759\nWind\n$94.70\n39,269,073\nNew Mexico\n\n\n733\nNatural gas\n$110.60\n129,221,513\nGeorgia\n\n\n727\nNatural gas\n$114.70\n139,435,010\nAlabama\n\n\n715\nNuclear\n$106.90\n77,791,204\nTennessee\n\n\n684\nNatural gas\n$121.90\n111,838,736\nArizona\n\n\n655\nNatural gas\n$125.70\n235,924,937\nPennsylvania\n\n\n654\nNatural gas\n$130.90\n42,164,375\nNevada\n\n\n648\nNatural gas\n$93.00\n89,236,024\nOklahoma\n\n\n639\nNatural gas\n$106.10\n126,553,394\nNorth Carolina\n\n\n594\nNatural gas\n$106.80\n91,059,344\nVirginia\n\n\n576\nNatural gas\n$242.40\n40,666,418\nConnecticut\n\n\n558\nNatural gas\n$143.40\n36,000,650\nMaryland\n\n\n558\nNuclear\n$105.00\n100,853,387\nSouth Carolina\n\n\n522\nNuclear\n$117.50\n177,737,641\nIllinois\n\n\n522\nNatural gas\n$182.80\n124,039,988\nNew York\n\n\n518\nNatural gas\n$152.70\n64,228,924\nNew Jersey\n\n\n440\nNatural gas\n$248.70\n216,628,794\nCalifornia\n\n\n428\nNatural gas\n$208.40\n12,512,181\nMaine\n\n\n370\nHydroelectric\n$90.80\n17,842,446\nIdaho\n\n\n369\nWind\n$104.90\n17,436,158\nSouth Dakota\n\n\n344\nHydroelectric\n$103.20\n61,691,869\nOregon\n\n\n292\nHydroelectric\n$95.80\n102,960,605\nWashington\n\n\n269\nNuclear\n$229.60\n16,824,999\nNew Hampshire\n\n\n8\nHydroelectric\n$175.30\n2,480,199\nVermont\n\n\n\n\n\n🌍 Here, we have collected the effective emissions per MWh2⚡ as well as price and total state-wide generation capacity. We will use this data to compare the emissions of different transit modalities. We next turn to the National Transit Database to get information on various public transit authorities. Before we do so, however, let’s explore the SEP data a bit first.🔬📉"
  },
  {
    "objectID": "mp02.html#initial-analysis-of-sep-data",
    "href": "mp02.html#initial-analysis-of-sep-data",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.2 🔍 Initial Analysis of SEP Data ⚖️",
    "text": "2.2 🔍 Initial Analysis of SEP Data ⚖️\nLet’s answer some burning (fossil-free, we hope!) questions: 🚇\n\n2.2.1 1. Which state has the most expensive retail electricity? 💰⚡\nWhich state will make you cry when you get your electricity bill? 😭 Let’s find out!\n\n\nShow Code\nEIA_SEP_REPORT |&gt; \n  arrange(desc(electricity_price_MWh)) |&gt; \n  select(state, electricity_price_MWh) |&gt; \n  head(1) |&gt; \n  kable(caption = \"Most Expensive Retail Electricity\")\n\n\n\nMost Expensive Retail Electricity\n\n\nstate\nelectricity_price_MWh\n\n\n\n\nHawaii\n386\n\n\n\n\n\n\n\n2.2.2 2. Which state has the ‘dirtiest’ electricity mix? ☠️🌫️\nWhich state’s power plants are puffing out CO₂ like an angry dragon? 🐉🔥 Stay tuned for some shocking revelations!\n\n\nShow Code\nEIA_SEP_REPORT |&gt; \n  arrange(desc(CO2_MWh)) |&gt; \n  select(state, CO2_MWh) |&gt; \n  head(1) |&gt; \n  kable(caption = \"Dirtiest electricity mix\")\n\n\n\nDirtiest electricity mix\n\n\nstate\nCO2_MWh\n\n\n\n\nWest Virginia\n1925\n\n\n\n\n\n\n\n2.2.3 3. On average, how many pounds of CO2 are emitted per MWh of electricity produced in the US?🏭\nTime for some serious math! 📊 We’ll calculate the national average CO₂ emissions per MWh using a weighted average because we like our stats accurate.🎯\n\n\nShow Code\n# Calculate weighted average CO2 emissions\nweighted_avg_CO2 &lt;- sum(EIA_SEP_REPORT$CO2_MWh * EIA_SEP_REPORT$generation_MWh) / \n  sum(EIA_SEP_REPORT$generation_MWh)\n\ndata.frame(Weighted_Avg_CO2 = weighted_avg_CO2) |&gt; \n  kable(col.names = c(\"Weighted Average CO2 Emissions (lbs/MWh)\"),\n        caption = \"Weighted Average CO2 Emissions Across All States\")\n\n\n\nWeighted Average CO2 Emissions Across All States\n\n\nWeighted Average CO2 Emissions (lbs/MWh)\n\n\n\n\n805.3703\n\n\n\n\n\n\n\n2.2.4 4. 🦄 What is the rarest primary energy source in the US? What is the associated cost of electricity and where is it used?🧐\nWhat’s the mythical unicorn of US energy sources? 🦄✨ And where is it hiding? Let’s track it down and see how much it costs! 💸\n\n\nShow Code\nEIA_SEP_REPORT |&gt; \n  count(primary_source) |&gt; \n  arrange(n) |&gt; \n  slice(1) |&gt; \n  inner_join(EIA_SEP_REPORT, by = \"primary_source\") |&gt; \n  select(state, primary_source, electricity_price_MWh) |&gt; \n  kable(caption = \"Primary Energy Source with Lowest Occurrence\")\n\n\n\nPrimary Energy Source with Lowest Occurrence\n\n\nstate\nprimary_source\nelectricity_price_MWh\n\n\n\n\nHawaii\nPetroleum\n386\n\n\n\n\n\n\n\n2.2.5 5. My home state, Texas, has a reputation as being the home of “dirty fossil fuels” while NY has a reputation as a leader in clean energy. How many times cleaner is NY’s energy mix than that of Texas?🌱🔥\nIs Texas really the king of fossil fuels? 👑 And does New York truly deserve its green halo? 😇 Let’s compare their energy mixes and see how many times cleaner NY is compared to TX! 📊⚖️\n\n\nShow Code\nNY_CO2 &lt;- EIA_SEP_REPORT |&gt; filter(state == \"New York\") |&gt; pull(CO2_MWh)\nTX_CO2 &lt;- EIA_SEP_REPORT |&gt; filter(state == \"Texas\") |&gt; pull(CO2_MWh)\n\ncleaner_ratio &lt;- TX_CO2 / NY_CO2\n\ntibble(Metric = \"Cleaner Ratio (TX to NY)\", Value = cleaner_ratio) |&gt; \n  kable(caption = \"Texas vs. New York CO2 Emissions Ratio\")\n\n\n\nTexas vs. New York CO2 Emissions Ratio\n\n\nMetric\nValue\n\n\n\n\nCleaner Ratio (TX to NY)\n1.637931\n\n\n\n\n\nFun fact: New York’s energy mix is cleaner than Texas’s by a factor of 1.637931. That’s right, the Lone Star State might want to take notes from the Big Apple! 🍏⚡"
  },
  {
    "objectID": "mp02.html#importing-2023-annual-database-energy-consumption-report",
    "href": "mp02.html#importing-2023-annual-database-energy-consumption-report",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.3 Importing 2023 Annual Database Energy Consumption Report ⚡📊",
    "text": "2.3 Importing 2023 Annual Database Energy Consumption Report ⚡📊\nTo analyze the energy consumption data for public transit agencies, we first need to import the 2023 Annual Database Energy Consumption report. This Dataset is provided in an Excel spreadsheet (.xlsx) format. We will use the readxl package in R to load it.\n\n\nShow Code\nensure_package(readxl)\n# Create 'data/mp02' directory if not already present\nDATA_DIR &lt;- file.path(\"data\", \"mp02\")\ndir.create(DATA_DIR, showWarnings=FALSE, recursive=TRUE)\n\nNTD_ENERGY_FILE &lt;- file.path(DATA_DIR, \"2023_ntd_energy.xlsx\")\n\nif(!file.exists(NTD_ENERGY_FILE)){\n    DS &lt;- download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-10/2023%20Energy%20Consumption.xlsx\", \n                  destfile=NTD_ENERGY_FILE, \n                  method=\"curl\")\n    \n    if(DS | (file.info(NTD_ENERGY_FILE)$size == 0)){\n        cat(\"I was unable to download the NTD Energy File. Please try again.\\n\")\n        stop(\"Download failed\")\n    }\n}\n\nNTD_ENERGY_RAW &lt;- read_xlsx(NTD_ENERGY_FILE)\n\n\n\n\nShow Code\n### Data Cleaning 🧹\n\n\nensure_package(tidyr)\nto_numeric_fill_0 &lt;- function(x){\n    x &lt;- if_else(x == \"-\", NA, x)\n    replace_na(as.numeric(x), 0)\n}\n\nNTD_ENERGY &lt;- NTD_ENERGY_RAW |&gt; \n    select(-c(`Reporter Type`, \n              `Reporting Module`, \n              `Other Fuel`, \n              `Other Fuel Description`)) |&gt;\n    mutate(across(-c(`Agency Name`, \n                     `Mode`,\n                     `TOS`), \n                  to_numeric_fill_0)) |&gt;\n    group_by(`NTD ID`, `Mode`, `Agency Name`) |&gt;\n    summarize(across(where(is.numeric), sum), \n              .groups = \"keep\") |&gt;\n    mutate(ENERGY = sum(c_across(c(where(is.numeric))))) |&gt;\n    filter(ENERGY &gt; 0) |&gt;\n    select(-ENERGY) |&gt;\n    ungroup()\n\n\n\n2.3.1 🎲 The Wheel of Randomness! 🎰\nLadies and gentlemen, it’s time for the Random Transit Energy Lottery! 🎉🎟️ We’ll now select 10 lucky transit energy records at random! Who will make the cut? Who will be left behind? Let’s spin the wheel! 🔄✨\n\n\nShow Code\n# Sample 10 random rows and then pass them to kable()\nNTD_ENERGY |&gt; \n  slice_sample(n = 10) |&gt; \n  kable(caption = \"Random Sample of NTD_ENERGY Data\")\n\n\n\nRandom Sample of NTD_ENERGY Data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNTD ID\nMode\nAgency Name\nBio-Diesel\nBunker Fuel\nC Natural Gas\nDiesel Fuel\nElectric Battery\nElectric Propulsion\nEthanol\nMethonal\nGasoline\nHydrogen\nKerosene\nLiquified Nat Gas\nLiquified Petroleum Gas\n\n\n\n\n60048\nMB\nCapital Metropolitan Transportation Authority\n0\n0\n0\n4145483\n371248\n0\n0\n0\n26814\n0\n0\n0\n0\n\n\n90014\nMB\nAlameda-Contra Costa Transit District\n0\n0\n0\n3874877\n285890\n0\n0\n0\n0\n120217\n0\n0\n0\n\n\n11239\nFB\nHyannis Harbor Tours, Inc.\n0\n0\n0\n1467081\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n60088\nDR\nJefferson Parish\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n110323\n\n\n30205\nMB\nTransit Management of Central Maryland, Inc.\n0\n0\n0\n221699\n39786\n0\n0\n0\n37196\n0\n0\n0\n0\n\n\n90032\nMB\nCity of Phoenix\n0\n0\n4489207\n1873473\n0\n0\n0\n0\n92015\n0\n0\n0\n0\n\n\n90036\nDR\nOrange County Transportation Authority\n0\n0\n0\n0\n0\n0\n0\n0\n1104384\n0\n0\n0\n0\n\n\n40094\nDR\nAlternativa de Transporte Integrado\n0\n0\n0\n172\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n90162\nDR\nThe Eastern Contra Costa Transit Authority\n0\n0\n0\n0\n0\n0\n0\n0\n152902\n0\n0\n0\n0\n\n\n30068\nMB\nFairfax County, VA\n0\n0\n0\n2539112\n0\n0\n0\n0\n0\n0\n0\n0\n0"
  },
  {
    "objectID": "mp02.html#recoding-transit-modes",
    "href": "mp02.html#recoding-transit-modes",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.4 🚇 Recoding Transit Modes 🚋🎭",
    "text": "2.4 🚇 Recoding Transit Modes 🚋🎭\n🚧 Warning: Mysterious Codes Ahead! 🚧\nBefore we can make sense of the Mode column, we need to crack the code! 🕵️‍♂️ First, let’s uncover the unique Mode codes in our data using distinct(). Then, we consult the sacred texts (a.k.a. the NTD website 📜) to decipher their meanings. 🧐\n\n2.4.1 🏗️ Time for a Makeover! 🖌️\nThe Mode column needs a glow-up! ✨ We’re about to give those cryptic abbreviations some real names so they’re easier to work with. Ready? Let’s do this! 🎬\n\n\nShow Code\nNTD_ENERGY &lt;- NTD_ENERGY |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\"  ~ \"Heavy Rail\", \n    Mode == \"LR\"  ~ \"Light Rail\", \n    Mode == \"CR\"  ~ \"Commuter Rail\", \n    Mode == \"MB\"  ~ \"Motor Bus\", \n    Mode == \"TB\"  ~ \"Trolleybus\", \n    Mode == \"TR\"  ~ \"Heritage Streetcar\", \n    Mode == \"SR\"  ~ \"Modern Streetcar\", \n    Mode == \"VP\"  ~ \"Vanpool\", \n    Mode == \"DR\"  ~ \"Demand Response\", \n    Mode == \"FB\"  ~ \"Ferryboat\", \n    Mode == \"MG\"  ~ \"Monorail/Automated Guideway\", \n    Mode == \"PB\"  ~ \"Publico\", \n    Mode == \"CB\"  ~ \"Commuter Bus\",\n    Mode == \"RB\"  ~ \"Rapid Bus\",\n    Mode == \"AR\"  ~ \"Aerial Tramway\",\n    Mode == \"YR\"  ~ \"Hybrid Rail\",\n    Mode == \"IP\"  ~ \"Inclined Plane Railway\",\n    Mode == \"CC\"  ~ \"Cable Car\",\n    TRUE          ~ \"Unknown\"\n  ))\n\nNTD_ENERGY |&gt; distinct(Mode) |&gt;\nkable(caption = \"Distinct Modes of Transport\")\n\n\n\nDistinct Modes of Transport\n\n\nMode\n\n\n\n\nDemand Response\n\n\nFerryboat\n\n\nMotor Bus\n\n\nModern Streetcar\n\n\nTrolleybus\n\n\nVanpool\n\n\nCommuter Bus\n\n\nRapid Bus\n\n\nLight Rail\n\n\nMonorail/Automated Guideway\n\n\nCommuter Rail\n\n\nAerial Tramway\n\n\nHeritage Streetcar\n\n\nHeavy Rail\n\n\nHybrid Rail\n\n\nInclined Plane Railway\n\n\nPublico\n\n\nCable Car"
  },
  {
    "objectID": "mp02.html#annual-database-service-by-agency",
    "href": "mp02.html#annual-database-service-by-agency",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.5 2023 Annual Database Service by Agency 📊🚇",
    "text": "2.5 2023 Annual Database Service by Agency 📊🚇\n🚨 Breaking News! 🚨 The latest 2023 Service by Agency report has just dropped! 🎤📉 We’re diving in to extract the juicy details about passenger trips across different transit services. 🚆🚌\n\n\nShow Code\nNTD_SERVICE_FILE &lt;- file.path(DATA_DIR, \"2023_service.csv\")\nif(!file.exists(NTD_SERVICE_FILE)){\n    DS &lt;- download.file(\"https://data.transportation.gov/resource/6y83-7vuw.csv\", \n                  destfile=NTD_SERVICE_FILE, \n                  method=\"curl\")\n    \n    if(DS | (file.info(NTD_SERVICE_FILE)$size == 0)){\n        cat(\"I was unable to download the NTD Service File. Please try again.\\n\")\n        stop(\"Download failed\")\n    }\n}\n\nNTD_SERVICE_RAW &lt;- read_csv(NTD_SERVICE_FILE)\n\n\n📢 Will our dataset arrive safely, or will it ghost us? 👻 Only time (and a stable internet connection) will tell! ⏳"
  },
  {
    "objectID": "mp02.html#clean-up-time",
    "href": "mp02.html#clean-up-time",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.6 Clean-Up Time! 🧹✨",
    "text": "2.6 Clean-Up Time! 🧹✨\n\n\nShow Code\nNTD_SERVICE &lt;- NTD_SERVICE_RAW |&gt;\n    mutate(`NTD ID` = as.numeric(`_5_digit_ntd_id`)) |&gt; \n    rename(Agency = agency, \n           City   = max_city, \n           State  = max_state,\n           UPT    = sum_unlinked_passenger_trips_upt, \n           MILES  = sum_passenger_miles) |&gt;\n    select(matches(\"^[A-Z]\", ignore.case=FALSE)) |&gt;\n    filter(MILES &gt; 0)\n\n\n🛠️ Boom! Now our dataset is sparkling clean! ✨ It’s time to put these numbers to work! 💪"
  },
  {
    "objectID": "mp02.html#exploring-ntd-service-data---lets-dive-in",
    "href": "mp02.html#exploring-ntd-service-data---lets-dive-in",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.7 🛥️ Exploring NTD Service Data - Let’s Dive In!",
    "text": "2.7 🛥️ Exploring NTD Service Data - Let’s Dive In!\nAlright, folks! Time to put on our data analyst hats and explore some seriously juicy transit numbers from the NTD_SERVICE Dataset. We’re going to answer some fun questions that might just reveal who’s cruising on the green lane of transit efficiency and who’s still stuck in the slow lane. Let’s see how this data speeds up the fun! 😎\n\n2.7.1 1. Which transit service has the most UPT annually? 🏆\nWhich transit service is the busiest, with the most Unlinked Passenger Trips (UPT) annually? Spoiler alert: It’s probably not the one with the tiniest buses.🚌\n\n\nShow Code\nNTD_SERVICE |&gt;\n  filter(!is.na(UPT)) |&gt;\n  arrange(desc(UPT)) |&gt;\n  select(Agency, UPT) |&gt;\n  head(1) |&gt;\n  kable(caption = \"Most UTP Annually\")\n\n\n\nMost UTP Annually\n\n\nAgency\nUPT\n\n\n\n\nMTA New York City Transit\n2632003044\n\n\n\n\n\n\n\n2.7.2 2. What is the average trip length of a trip on MTA NYC? 🗽\nTime for some serious subway sleuthing! 🕵️‍♂️ How long is the average trip on the MTA NYC? Are New Yorkers making quick, subway sprints, or are they getting comfy for a longer ride? We’re on a mission to figure out just how far these trips stretch, so hop on board! 🚇⏳\n\n\nShow Code\nNTD_SERVICE |&gt;\n  filter(grepl(\"MTA\", Agency, ignore.case = TRUE)) |&gt;\n  summarise(Average_Trip_Length = sum(MILES, na.rm = TRUE) / sum(UPT, na.rm = TRUE)) |&gt;\n  kable(caption = \"Average Trip Length On MTA Nyc\")\n\n\n\nAverage Trip Length On MTA Nyc\n\n\nAverage_Trip_Length\n\n\n\n\n4.562402\n\n\n\n\n\n\n\n2.7.3 3. Which transit service in NYC has the longest average trip length? 🚋\nWhich MTA service in New York City (including all five boroughs, yes, even Brooklyn 🗽) has the longest average trip length? Let’s just say, it’s probably not the one where the subway rats are the most frequent passengers. 🐀\nP.S. You’ll want to be extra careful with that City column; we wouldn’t want to accidentally send our buses on a detour to Brooklyn when they should be cruising through Manhattan!\n\n\nShow Code\nNYC_SERVICES &lt;- NTD_SERVICE |&gt;\n  filter(State == \"NY\", MILES &gt; 0, UPT &gt; 0) |&gt;\n  mutate(Average_Trip_Length = MILES / UPT) |&gt;\n  arrange(desc(Average_Trip_Length)) |&gt;\n  select(Agency, City, Average_Trip_Length)\n\nhead(NYC_SERVICES, 1) |&gt;\nkable(caption = \"NYC Longest Average Trip Length\")\n\n\n\nNYC Longest Average Trip Length\n\n\nAgency\nCity\nAverage_Trip_Length\n\n\n\n\nHampton Jitney, Inc.\nCalverton\n92.4465\n\n\n\n\n\n\n\n2.7.4 4. Which state has the fewest total miles travelled by public transit? 🐢\nWhich state is the turtle in the race, with the fewest total miles travelled by public transit? 🐢 Are some states just cruising along at a leisurely pace, or are they barely moving at all? It’s time to find out who’s not clocking up the miles! 🛑🚗\n\n\nShow Code\nNTD_SERVICE |&gt;\n  group_by(State) |&gt;\n  summarise(Total_Miles = sum(MILES, na.rm = TRUE)) |&gt;\n  arrange(Total_Miles) |&gt;\n  head(1) |&gt;\n  kable(caption = \"Fewest total miles Travelled By Public Transit\")\n\n\n\nFewest total miles Travelled By Public Transit\n\n\nState\nTotal_Miles\n\n\n\n\nNH\n3749892\n\n\n\n\n\n\n\n2.7.5 5. Are all states represented in this data? If no, which ones are missing? The state.name and state.abb objects we used above may be useful here.🚏🗺️\nNow for a little mystery – are all states in this data? Or did a few sneak out of the spotlight? 👀 Let’s use the state.name and state.abb to track down any states that may have taken the wrong exit. Looks like it’s time for a little data detective work! 🔍💼\n\n\nShow Code\nall_states &lt;- state.abb  # Vector of all US state abbreviations\npresent_states &lt;- unique(NTD_SERVICE$State)\nmissing_states &lt;- setdiff(all_states, present_states)\nkable(missing_states, caption = \"Missing States\")\n\n\n\nMissing States\n\n\nx\n\n\n\n\nAZ\n\n\nAR\n\n\nCA\n\n\nCO\n\n\nHI\n\n\nIA\n\n\nKS\n\n\nLA\n\n\nMO\n\n\nMT\n\n\nNE\n\n\nNV\n\n\nNM\n\n\nND\n\n\nOK\n\n\nSD\n\n\nTX\n\n\nUT\n\n\nWY"
  },
  {
    "objectID": "mp02.html#calculate-emissions-lets-crunch-some-carbon",
    "href": "mp02.html#calculate-emissions-lets-crunch-some-carbon",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.8 🌍 Calculate Emissions – Let’s Crunch Some Carbon! 💨",
    "text": "2.8 🌍 Calculate Emissions – Let’s Crunch Some Carbon! 💨\nTime to put on our environmental cap and get down to the nitty-gritty of CO2 emissions! We’re about to take a deep dive into some data to calculate the total emissions from different transit agencies and their modes. Spoiler alert: We’re going green – but with a twist! 🌱🔢\n\n2.8.1 Join the Three Tables – The Ultimate Data Party 🎉\nHere’s where we get our hands dirty (but in an eco-friendly way, of course!). We’ll join three tables together like the perfect data trio:\nNTD_SERVICE 🚍 – It tells us the Agency and Mode (because, let’s face it, transit is all about style, right?)\nNTD_ENERGY ⚡ – This table’s going to give us the lowdown on all the fuel sources. It’s like fuel’s Wikipedia page, but with more numbers.\nEIA_SEP_REPORT 📊 – This is where the magic happens! It tells us the CO2 emissions per MWh. Time to add some climate-friendly math into the mix. Once we’ve got these three tables chatting with each other, we’re ready to roll!\n\n\nShow Code\n# Create a mapping of state abbreviations to full names\nstate_abbrev_to_full &lt;- c(\n  \"AL\" = \"Alabama\", \"AK\" = \"Alaska\", \"AZ\" = \"Arizona\", \"AR\" = \"Arkansas\", \"CA\" = \"California\", \"CO\" = \"Colorado\", \n  \"CT\" = \"Connecticut\", \"DE\" = \"Delaware\", \"FL\" = \"Florida\", \"GA\" = \"Georgia\", \"HI\" = \"Hawaii\", \"ID\" = \"Idaho\", \n  \"IL\" = \"Illinois\", \"IN\" = \"Indiana\", \"IA\" = \"Iowa\", \"KS\" = \"Kansas\", \"KY\" = \"Kentucky\", \"LA\" = \"Louisiana\", \n  \"ME\" = \"Maine\", \"MD\" = \"Maryland\", \"MA\" = \"Massachusetts\", \"MI\" = \"Michigan\", \"MN\" = \"Minnesota\", \"MS\" = \"Mississippi\", \n  \"MO\" = \"Missouri\", \"MT\" = \"Montana\", \"NE\" = \"Nebraska\", \"NV\" = \"Nevada\", \"NH\" = \"New Hampshire\", \"NJ\" = \"New Jersey\", \n  \"NM\" = \"New Mexico\", \"NY\" = \"New York\", \"NC\" = \"North Carolina\", \"ND\" = \"North Dakota\", \"OH\" = \"Ohio\", \"OK\" = \"Oklahoma\", \n  \"OR\" = \"Oregon\", \"PA\" = \"Pennsylvania\", \"RI\" = \"Rhode Island\", \"SC\" = \"South Carolina\", \"SD\" = \"South Dakota\", \n  \"TN\" = \"Tennessee\", \"TX\" = \"Texas\", \"UT\" = \"Utah\", \"VT\" = \"Vermont\", \"VA\" = \"Virginia\", \"WA\" = \"Washington\", \n  \"WV\" = \"West Virginia\", \"WI\" = \"Wisconsin\", \"WY\" = \"Wyoming\"\n)\n\n# Fix State Names in NTD_SERVICE before joining\nNTD_SERVICE &lt;- NTD_SERVICE |&gt; mutate(State = state_abbrev_to_full[State])\n\n# Now perform the joins\nNTD_EMISSIONS &lt;- NTD_SERVICE |&gt;\n  select(Agency, State, `NTD ID`) |&gt;\n  inner_join(NTD_ENERGY, by = \"NTD ID\") |&gt;\n  inner_join(EIA_SEP_REPORT, by = c(\"State\" = \"state\"))\n\n# Check if the join worked\ndim(NTD_EMISSIONS)  # Should no longer be (0, X)\n\n\n[1] 650  23\n\n\n\n\n2.8.2 The Ultimate Emissions Table 🧮\nWe’re going to create a super sleek table with all the goods:\nAgency + Mode Pair – These are the dynamic duos of transit! 🚍🚆\nState – Every agency has a home, and we’ll find out which state it’s calling its turf! 🌎\nFuel Sources – Because we need to know how those buses are powering through your city streets! 🚨\nCO2 Emissions per MWh – Let’s see how much carbon’s being emitted for every megawatt-hour of power. (The more we know, the greener we grow! 🌳)\nNow, let’s clean up some fuel names and make sure everything aligns:\n\n\nShow Code\nNTD_EMISSIONS &lt;- NTD_EMISSIONS |&gt; \n  rename(\n    \"Bio diesel\" = \"Bio-Diesel\",\n    \"Natural Gas\" = \"C Natural Gas\",\n    \"LNG\" = \"Liquified Nat Gas\",\n    \"LPG\" = \"Liquified Petroleum Gas\",\n    \"Battery Electric\" = \"Electric Battery\",\n    \"Electric\" = \"Electric Propulsion\"\n  )\n\n\n\n\n2.8.3 The Formula – It’s Math, But Make It Eco! 🧑‍🏫\nNow for the fun part – the math! 💡\nWe’re going to use a long-ish arithmetic formula (don’t worry, it’s just a couple of steps) inside a mutate function to compute the total emissions for each Agency + Mode Pair. We’ll need to convert combustion fuels to CO2 emissions – but don’t panic, we’ve got conversion factors! 💪 You can hard code these bad boys in your script for simplicity:\n\n\nShow Code\nfuel_emission_factors &lt;- c(\n  \"Diesel Fuel\" = 10.19,    # kg CO2 per gallon\n  \"Gasoline\" = 8.89,\n  \"Natural Gas\" = 52.91,    # kg CO2 per MMBtu\n  \"LPG\" = 5.79,  \n  \"LNG\" = 4.29,\n  \"Kerosene\" = 9.96,\n  \"Ethanol\" = 1.94,\n  \"Hydrogen\" = 0,           # No emissions from hydrogen\n  \"Battery Electric\" = 0,   # Handled separately using CO2_MWh\n  \"Electric\" = 0            # Handled separately using CO2_MWh\n)\n\n\nThen, apply the emissions calculation:\n\n\nShow Code\nNTD_EMISSIONS &lt;- NTD_EMISSIONS |&gt;\n  mutate(\n    Fuel_Emissions = (`Diesel Fuel` * fuel_emission_factors[\"Diesel Fuel\"]) +\n      (`Gasoline` * fuel_emission_factors[\"Gasoline\"]) +\n      (`Natural Gas` * fuel_emission_factors[\"Natural Gas\"]) +\n      (`LPG` * fuel_emission_factors[\"LPG\"]) +\n      (`LNG` * fuel_emission_factors[\"LNG\"]) +\n      (`Kerosene` * fuel_emission_factors[\"Kerosene\"]) +\n      (`Ethanol` * fuel_emission_factors[\"Ethanol\"]) +\n      (`Hydrogen` * fuel_emission_factors[\"Hydrogen\"])\n  )\n\nNTD_EMISSIONS &lt;- NTD_EMISSIONS |&gt;\n  mutate(\n    Electricity_Emissions = `Electric` * CO2_MWh\n  )\n\nNTD_EMISSIONS &lt;- NTD_EMISSIONS |&gt;\n  mutate(\n    Total_Emissions = Fuel_Emissions + Electricity_Emissions\n  )\n\n\n💚 Let’s Save the Planet – One Data Row at a Time! Now that our emissions data is ready, let’s take a look at the final product! 🌍\n\n\nShow Code\nNTD_EMISSIONS |&gt; select(Agency, Mode, State, Fuel_Emissions, Electricity_Emissions, Total_Emissions) |&gt; arrange(desc(Total_Emissions))\n\n\n# A tibble: 650 × 6\n   Agency       Mode  State Fuel_Emissions Electricity_Emissions Total_Emissions\n   &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;          &lt;dbl&gt;                 &lt;dbl&gt;           &lt;dbl&gt;\n 1 MTA New Yor… Heav… New …             0           807152731200   807152731200 \n 2 MTA Long Is… Comm… New …      72196486.          286155388800   286227585286.\n 3 Metro-North… Comm… New …      71313390.          211429086408   211500399798.\n 4 New Jersey … Comm… New …     143674231.          189542379222   189686053453.\n 5 Chicago Tra… Heav… Illi…             0           177353391510   177353391510 \n 6 Southeaster… Comm… Penn…             0           134209031675   134209031675 \n 7 Massachuset… Heav… Mass…             0           125346279760   125346279760 \n 8 Southeaster… Heav… Penn…             0            75871258865    75871258865 \n 9 Metropolita… Heav… Geor…             0            56484703659    56484703659 \n10 Port Author… Heav… New …             0            51187752738    51187752738 \n# ℹ 640 more rows"
  },
  {
    "objectID": "mp02.html#normalize-emissions-to-transit-usage",
    "href": "mp02.html#normalize-emissions-to-transit-usage",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.9 Normalize Emissions to Transit Usage 🚆",
    "text": "2.9 Normalize Emissions to Transit Usage 🚆\nIn this task, we’re on a mission to normalize emissions (a fancy way of saying “make fair comparisons”) based on:\nEmissions per Unlinked Passenger Trip (UPT) 🚌👥\nEmissions per Passenger Mile 🚋🌱\n\n2.9.1 Normalize Emissions – Leveling the Playing Field! 🎯\nBefore we start handing out gold medals 🏅 (or shameful side-eyes 👀), we normalize emissions based on ridership. This ensures a fair fight—because comparing a tiny rural bus route to New York City’s subway isn’t exactly fair, right? 😆\n\n\nShow Code\n# Filter out agencies with extremely small values to avoid distortions\n\nAGENCY_NORMALIZED &lt;- NTD_SERVICE %&gt;%   # Use your actual dataset\n  left_join(NTD_EMISSIONS, by = \"NTD ID\") %&gt;%\n  filter(!is.na(Total_Emissions))  # Ensure you have valid emission data\n\n# Filter out agencies with extremely small values to avoid distortions\nAGENCY_NORMALIZED &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(UPT &gt; 1000, MILES &gt; 1000) %&gt;%  # Adjust thresholds as needed\n  mutate(\n    Emissions_per_UPT = ifelse(UPT &gt; 0, Total_Emissions / UPT, NA),\n    Emissions_per_Passenger_Mile = ifelse(MILES &gt; 0, Total_Emissions / MILES, NA)\n  )\n\n\n🚦 Now, with that done, let’s move on to finding our champions!"
  },
  {
    "objectID": "mp02.html#the-greenest-transit-agency-gta-iv-award-1",
    "href": "mp02.html#the-greenest-transit-agency-gta-iv-award-1",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.10 🥇 The Greenest Transit Agency (GTA IV Award #1) 🌱🚆",
    "text": "2.10 🥇 The Greenest Transit Agency (GTA IV Award #1) 🌱🚆\nWhich agency has the lowest emissions per passenger trip? And which one produces the least pollution per mile traveled?\nLet’s roll out the green carpet and announce the winners! 🎤🥁\n\n\nShow Code\nAGENCY_NORMALIZED &lt;- AGENCY_NORMALIZED %&gt;%\n  mutate(Size_Category = case_when(\n    UPT &lt; 10^6 ~ \"Small\",\n    UPT &gt;= 10^6 & UPT &lt; 10^8 ~ \"Medium\",\n    UPT &gt;= 10^8 ~ \"Large\"\n  ))\n\n\n\n2.10.1 Find the greenest transit agency by lowest emissions per UPT\n\n\nShow Code\nAGENCY_NORMALIZED &lt;- AGENCY_NORMALIZED %&gt;%\n  rename(Agency = Agency.x)  # Rename \"Agency.x\" to \"Agency\"\n\ngreenest_agency_UPT &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(!is.na(Size_Category) & Emissions_per_UPT &gt; 0) %&gt;%\n  group_by(Size_Category) %&gt;%\n  slice_min(Emissions_per_UPT, n = 1, with_ties = FALSE) %&gt;%\n  select(Size_Category, Agency, Emissions_per_UPT)\nkable(greenest_agency_UPT, caption = \"Greenest Agency By lowest Emissions Per UPT\")\n\n\n\nGreenest Agency By lowest Emissions Per UPT\n\n\nSize_Category\nAgency\nEmissions_per_UPT\n\n\n\n\nLarge\nNew Jersey Transit Corporation\n0.0024015\n\n\nMedium\nKing County, dba: King County Metro\n0.0007222\n\n\nSmall\nAltoona Metro Transit, dba: AMTRAN\n0.0056772\n\n\n\n\n\n\n\n2.10.2 Find the greenest transit agency by lowest emissions per Passenger Mile\n\n\nShow Code\ngreenest_agency_mile &lt;- AGENCY_NORMALIZED %&gt;%\n    filter(!is.na(Size_Category) & Emissions_per_UPT &gt; 0) %&gt;%\n  group_by(Size_Category) %&gt;%\n  slice_min(Emissions_per_Passenger_Mile, n = 1, with_ties = FALSE) %&gt;%\n  select(Size_Category, Agency, Emissions_per_Passenger_Mile)\nkable(greenest_agency_mile, caption= \"Greenest Transit Agency By Lowest Emissions Per Passenger Mile\")\n\n\n\nGreenest Transit Agency By Lowest Emissions Per Passenger Mile\n\n\n\n\n\n\n\nSize_Category\nAgency\nEmissions_per_Passenger_Mile\n\n\n\n\nLarge\nNew Jersey Transit Corporation\n0.0002061\n\n\nMedium\nKing County, dba: King County Metro\n0.0001889\n\n\nSmall\nAltoona Metro Transit, dba: AMTRAN\n0.0015636"
  },
  {
    "objectID": "mp02.html#total-emissions-avoided-gta-iv-award-2",
    "href": "mp02.html#total-emissions-avoided-gta-iv-award-2",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.11 Total Emissions Avoided (GTA IV Award #2) 🌱🚆",
    "text": "2.11 Total Emissions Avoided (GTA IV Award #2) 🌱🚆\nNow, let’s compute the total emissions avoided by public transit. Because without it, we’d have millions of solo drivers making traffic even worse than it already is! 😱🚗🚕🚙\nHow do we do this?\n1️⃣ Estimate emissions if all transit passengers drove cars instead.\n2️⃣ Use US CAFE fuel standards to convert miles to gasoline usage.\n3️⃣ Calculate emissions avoided by taking public transit instead of driving.\nUsed average CAFE standard of 24.7 mpg and CO2 emissions of 8.89 kg per gallon\n\n\nShow Code\nAGENCY_NORMALIZED &lt;- AGENCY_NORMALIZED %&gt;%\n  mutate(\n    Gallons_of_fuel = MILES / 24.7,  # Convert miles to fuel gallons\n    Emissions_from_driving = Gallons_of_fuel * 8.89,  # Convert gallons to CO2\n    Emissions_avoided = Emissions_from_driving - Total_Emissions  # Calculate CO2 saved\n  )\n\n\n\n2.11.1 Find agency with most emissions avoided 🏆\n\n\nShow Code\nmost_emissions_avoided_by_size &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(!is.na(Size_Category)) %&gt;%  # Ensure valid categories\n  group_by(Size_Category) %&gt;%\n  slice_max(Emissions_avoided, n = 1, with_ties = FALSE) %&gt;%\n  select(Size_Category, Agency, Emissions_avoided)\nkable(most_emissions_avoided_by_size, caption = \"Most Emissions Avoided\")\n\n\n\nMost Emissions Avoided\n\n\n\n\n\n\n\nSize_Category\nAgency\nEmissions_avoided\n\n\n\n\nLarge\nMTA New York City Transit\n3441010874\n\n\nMedium\nMetro-North Commuter Railroad Company, dba: MTA Metro-North Railroad\n413801729\n\n\nSmall\nHampton Jitney, Inc.\n13333018\n\n\n\n\n\nThis agency has officially saved the planet more than your coworker with the reusable straw. 🌱💚♻️\n\n\n2.11.2 🏆Most Improved Green Agency (GTA IV Award #3) 🚆 🏆\nThis award recognizes the transit agency that has demonstrated the most significant improvement in environmental efficiency compared to its peers. Instead of using past-year data (which may not always be available), this award is given to the agency that has the largest improvement relative to the median emissions per passenger mile in its category (Large, Medium, or Small).\n\n\nShow Code\nmost_improved_agency &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(!is.na(Emissions_per_Passenger_Mile) & Emissions_per_Passenger_Mile &gt; 0) %&gt;%\n  group_by(Size_Category) %&gt;%\n  mutate(median_emissions = median(Emissions_per_Passenger_Mile, na.rm = TRUE)) %&gt;%\n  mutate(emissions_improvement = median_emissions - Emissions_per_Passenger_Mile) %&gt;%\n  slice_max(order_by = emissions_improvement, n = 1) %&gt;%  # Select top in each category\n  ungroup() %&gt;%\n  select(Agency, Size_Category, Emissions_per_Passenger_Mile, median_emissions, emissions_improvement)\n\nkable(most_improved_agency, caption = \"Most Improved Agency\")\n\n\n\nMost Improved Agency\n\n\n\n\n\n\n\n\n\nAgency\nSize_Category\nEmissions_per_Passenger_Mile\nmedian_emissions\nemissions_improvement\n\n\n\n\nNew Jersey Transit Corporation\nLarge\n0.0002061\n0.1260740\n0.1258680\n\n\nKing County, dba: King County Metro\nMedium\n0.0001889\n0.2200267\n0.2198378\n\n\nAltoona Metro Transit, dba: AMTRAN\nSmall\n0.0015636\n0.3648839\n0.3633203\n\n\n\n\n\n\n\n2.11.3 💀Biggest Gas Guzzler⛽ (GTA IV Award #4) 🌱🚆\nThis award highlights the least fuel-efficient transit agencies in each size category (Large, Medium, Small). The “Biggest Gas Guzzler” is the agency with the highest Emissions per Passenger Mile, indicating it produces the most pollution per mile traveled by a passenger. This award serves as a benchmark for identifying areas where fuel efficiency improvements and sustainability measures are most needed.\n\n\nShow Code\nbiggest_gas_guzzler_by_size &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(!is.na(Size_Category)) %&gt;%\n  group_by(Size_Category) %&gt;%\n  slice_max(Emissions_per_Passenger_Mile, n = 1, with_ties = FALSE) %&gt;%\n  select(Size_Category, Agency, Emissions_per_Passenger_Mile)\n\nkable(biggest_gas_guzzler_by_size, caption =\"Biggest Gas Guzzler\")\n\n\n\nBiggest Gas Guzzler\n\n\n\n\n\n\n\nSize_Category\nAgency\nEmissions_per_Passenger_Mile\n\n\n\n\nLarge\nChicago Transit Authority\n162.6084\n\n\nMedium\nWest Virginia University, dba: Personal Rapid Transit\n645.1318\n\n\nSmall\nPennsylvania Department of Transportation\n273.8586"
  },
  {
    "objectID": "mp02.html#visualizations",
    "href": "mp02.html#visualizations",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.12 📈 Visualizations 🎨",
    "text": "2.12 📈 Visualizations 🎨\n\n2.12.0.1 🚍 Greenest Transit Agency - A Breath of Fresh Air! 🌍\n\n\nShow Code\ngreenest_data &lt;- data.frame(\n  Agency = c(\"New Jersey Transit Corporation\", \"King County, dba: King County Metro\", \"Altoona Metro Transit, dba: AMTRAN\"),\n  Size_Category = c(\"Large\", \"Medium\", \"Small\"),\n  Emissions_per_UPT = c(0.0024014936, 0.0007222026, 0.0056772412),\n  Emissions_per_Passenger_Mile = c(0.0002060647, 0.0001889437, 0.0015635784)\n) %&gt;% pivot_longer(cols = c(Emissions_per_UPT, Emissions_per_Passenger_Mile), \n                    names_to = \"Metric\", values_to = \"Emissions\")\n\n# Adjusting graph to make sure bars are visible\nggplot(greenest_data, aes(x = reorder(Agency, Emissions), y = Emissions, fill = Metric)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", width = 0.7) +  # Increased bar width\n  geom_text(aes(label = Size_Category), position = position_dodge(width = 0.7), vjust = -0.5, color = \"black\", size = 4) +  # Increased text size\n  labs(title = \"Greenest Transit Agency\", y = \"Emissions (kg CO₂)\", fill = \"Metric\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, max(greenest_data$Emissions) + 0.002)) +  # Adjust y-axis to ensure bars are visible\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nTalk about making a clean getaway! The MTA Bus Company and its smaller counterparts are taking the “green” route. We’re not just talking about eco-friendly buses, but real reductions in emissions. A round of applause for the greenest of them all!\n\n\n2.12.0.2 🌱 Most Emissions Avoided - The Green Warriors 💨\n\n\nShow Code\n# Define the emissions data\nemissions_data &lt;- data.frame(\n  Agency = c(\"MTA New York City Transit\", \"Metro-North Commuter Railroad Company\", \"Hampton Jitney, Inc.\"),\n  Emissions_Avoided = c(3441010874, 413801729, 13333018)\n)\n# Create the plot\nggplot(emissions_data, aes(x = reorder(Agency, Emissions_Avoided), y = Emissions_Avoided, fill = Agency)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Most Emissions Avoided\", y = \"CO₂ Avoided (kg)\", x = \"Agency\") +\n  theme_minimal() +\n  scale_y_log10(labels = scales::comma) +  # Apply logarithmic scale to the y-axis\n  geom_text(aes(label = scales::comma(Emissions_Avoided)), hjust = -0.1, size = 2)  # Adjust text positioning and size\n\n\n\n\n\n\n\n\n\nThese agencies are saving the planet one ride at a time! Hudson Transit Lines and its pals are on a mission to leave the world with fewer emissions. They’re all about that “low-carbon footprint” lifestyle!\n\n\n2.12.0.3 🚀 Most Improved Green Agency - Turning Green Around! 🌿\n\n\nShow Code\n## Most Improved Green Agency (Dumbbell Chart)\nlibrary(ggalt)\nimproved_data &lt;- data.frame(\n  Agency = c(\"MTA Bus Company\", \"Champaign-Urbana Mass Transit\", \"City of Decatur Transit\"),\n  Before = c(0.1260740,0.2200267, 0.3648839),\n  After = c(0.0002060647,0.0001889437, 0.0015635784)\n)\n\nggplot(improved_data, aes(y = Agency, x = Before, xend = After)) +\n  geom_dumbbell(color = \"blue\", size = 4, dot_guide = TRUE, dot_guide_size = 0.5) +\n  labs(title = \"Most Improved Green Agency\", x = \"Emissions per Mile (kg CO₂)\", y = \"Agency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThese agencies took the emissions “downshift” seriously! The MTA Bus Company may have started off with high emissions, but it’s now a model of green efficiency. Talk about a green makeover!\n\n\n2.12.0.4 🛢️ Biggest Gas Guzzler - Oops, It’s Guzzling More than Gas! 🍃\n\n\nShow Code\nguzzler_data &lt;- data.frame(\n  Agency = c(\"Chicago Transit Authority\", \"WVU Personal Rapid Transit\", \"Pennsylvania DOT\"),\n  Emissions = c(162.6084, 645.1, 273.9)\n)\n\nggplot(guzzler_data, aes(x = reorder(Agency, -Emissions), y = Emissions, fill = Emissions)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_gradient(low = \"yellow\", high = \"red\") +\n  labs(title = \"Biggest Gas Guzzler\", y = \"Emissions per Mile (kg CO₂)\", x = \"Agency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nSome agencies need to take a carbon diet! Looks like WVU Personal Rapid Transit took the term “gas guzzler” to the extreme. Maybe they should swap out those heavy engines for some electric vibes."
  },
  {
    "objectID": "mp02.html#conclusion",
    "href": "mp02.html#conclusion",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.13 📢 Conclusion",
    "text": "2.13 📢 Conclusion\n🚆 Public transit plays a huge role in reducing emissions! Our analysis highlights the best (and worst) performers. Keep supporting clean transit choices! 🌍💚"
  },
  {
    "objectID": "mp02.html#references",
    "href": "mp02.html#references",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.14 📚 References",
    "text": "2.14 📚 References\n\nNational Transit Database (NTD)\nEnergy Information Administration (EIA)\nEnvironmental Protection Agency (EPA)"
  },
  {
    "objectID": "docs/mp02.html",
    "href": "docs/mp02.html",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "Honoring the Green, the Lean, and the Gas-Guzzling Machines! 🌱🔥\nNew York, NY – Public transit plays a crucial role in reducing carbon footprints, but not all agencies are created equal. Some transit systems have become champions of eco-efficiency, while others… well, let’s just say they have room for improvement.\nAfter analyzing emissions data from transit agencies nationwide, we proudly present the 2025 Clean Transit Awards, recognizing the best (and worst) in sustainable transit. These awards highlight Small, Medium, and Large agencies that have made a measurable impact on their carbon footprint—or left tire marks on the environment.\nSo, without further ado, let’s reveal the greenest, the most improved, and, of course, the biggest gas guzzlers!\n\n\nThis prestigious award goes to the transit agencies that produce the least emissions per passenger trip and per mile traveled. In other words, these winners are basically the Tesla Model S of buses—except way more affordable and accessible.\nBy Passenger Trips:\n🥇Large Agency Winner: New Jersey Transit Corporation\n🥇Medium Agency Winner: King County, dba: King County Metro\n🥇Small Agency Winner: Small Altoona Metro Transit, dba: AMTRAN\nBy Passenger Mile:\n🥇Large Agency Winner:🚆New Jersey Transit Corporation,\n🥇Medium Agency Winner: King County, dba: King County Metro,\n🥇Small Agency Winner: Small Altoona Metro Transit, dba: AMTRA,\n\n\n\n“If pollution had an arch-nemesis, it would be these guys.”\nImagine a world where all transit riders suddenly switched to single-passenger cars. 🚗🚗🚗 Yikes! The traffic jams would be longer than your uncle’s conspiracy theories at Thanksgiving, and emissions would skyrocket.\nThis award goes to the transit agencies that saved us from the most pollution by preventing countless solo car trips.\n🥇 Large Agency Winner: MTA New York City Transit 3441010874 avoided\n🥇 Medium Agency Winner: Metro-North Commuter Railroad Company, dba: MTA Metro-North Railroad 413801729 avoided\n🥇 Small Agency Winner: Hampton Jitney, Inc. 1333301 avoided\n\n\n\n“From gas-guzzler to eco-hustler!”\nThis award goes to the agency that has made the biggest leap toward sustainability—not by comparing to past-year data, but by seeing who improved the most compared to their peers.\n🥇 Large Agency Winner: New Jersey Transit Corporation Reduced from 0.1260740 to 0.0002060647 per mile\n🥇 Medium Agency Winner: King County, dba: King County Metro Reduced from 0.2200267 to 0.0001889437 per mile\n🥇 Small Agency Winner: Altoona Metro Transit, dba: AMTRAN – Reduced from 0.3648839 to 0.0015635784 per mile\n\n\n\n“Not all heroes wear capes… and not all transit agencies are heroes.”Not every agency can be a green machine. This award “honors” those transit agencies that burn through fuel like it’s going out of style, producing the highest emissions per passenger mile. (Spoiler alert: This is NOT the award you want to win.)\n🥇 Large Agency Winner: Chicago Transit Authority 162.6084 kg CO₂ per mile\n🥇 Medium Agency Winner: West Virginia University, dba: Personal Rapid Transit 645.1318 kg CO₂ per mile\n🥇 Small Agency Winner: Pennsylvania Department of Transportation 273.8586 CO₂ per mile\nWhile some agencies are already champions of green transit, others have some serious catching up to do. The 2025 Clean Transit Awards highlight the best in eco-friendly transportation while also shining a spotlight on areas that need improvement. 🚆 The takeaway? Cities that invest in sustainable transit are making a real impact on emissions. Meanwhile, gas guzzlers (we’re looking at you, WVU!) still have some work to do. For a full breakdown of the data, check out the Appendix in our official report. Spoiler alert: numbers don’t lie, and neither do emissions reductions!"
  },
  {
    "objectID": "docs/mp02.html#greenest-transit-agency-the-mvp-most-valuable-pollution-reducer-award",
    "href": "docs/mp02.html#greenest-transit-agency-the-mvp-most-valuable-pollution-reducer-award",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "This prestigious award goes to the transit agencies that produce the least emissions per passenger trip and per mile traveled. In other words, these winners are basically the Tesla Model S of buses—except way more affordable and accessible.\nBy Passenger Trips:\n🥇Large Agency Winner: New Jersey Transit Corporation\n🥇Medium Agency Winner: King County, dba: King County Metro\n🥇Small Agency Winner: Small Altoona Metro Transit, dba: AMTRAN\nBy Passenger Mile:\n🥇Large Agency Winner:🚆New Jersey Transit Corporation,\n🥇Medium Agency Winner: King County, dba: King County Metro,\n🥇Small Agency Winner: Small Altoona Metro Transit, dba: AMTRA,"
  },
  {
    "objectID": "docs/mp02.html#most-emissions-avoided-the-carbon-buster-award",
    "href": "docs/mp02.html#most-emissions-avoided-the-carbon-buster-award",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "“If pollution had an arch-nemesis, it would be these guys.”\nImagine a world where all transit riders suddenly switched to single-passenger cars. 🚗🚗🚗 Yikes! The traffic jams would be longer than your uncle’s conspiracy theories at Thanksgiving, and emissions would skyrocket.\nThis award goes to the transit agencies that saved us from the most pollution by preventing countless solo car trips.\n🥇 Large Agency Winner: MTA New York City Transit 3441010874 avoided\n🥇 Medium Agency Winner: Metro-North Commuter Railroad Company, dba: MTA Metro-North Railroad 413801729 avoided\n🥇 Small Agency Winner: Hampton Jitney, Inc. 1333301 avoided"
  },
  {
    "objectID": "docs/mp02.html#most-improved-green-agency-the-comeback-kid-award",
    "href": "docs/mp02.html#most-improved-green-agency-the-comeback-kid-award",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "“From gas-guzzler to eco-hustler!”\nThis award goes to the agency that has made the biggest leap toward sustainability—not by comparing to past-year data, but by seeing who improved the most compared to their peers.\n🥇 Large Agency Winner: New Jersey Transit Corporation Reduced from 0.1260740 to 0.0002060647 per mile\n🥇 Medium Agency Winner: King County, dba: King County Metro Reduced from 0.2200267 to 0.0001889437 per mile\n🥇 Small Agency Winner: Altoona Metro Transit, dba: AMTRAN – Reduced from 0.3648839 to 0.0015635784 per mile"
  },
  {
    "objectID": "docs/mp02.html#biggest-gas-guzzler-the-oh-no-fix-that-award",
    "href": "docs/mp02.html#biggest-gas-guzzler-the-oh-no-fix-that-award",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "",
    "text": "“Not all heroes wear capes… and not all transit agencies are heroes.”Not every agency can be a green machine. This award “honors” those transit agencies that burn through fuel like it’s going out of style, producing the highest emissions per passenger mile. (Spoiler alert: This is NOT the award you want to win.)\n🥇 Large Agency Winner: Chicago Transit Authority 162.6084 kg CO₂ per mile\n🥇 Medium Agency Winner: West Virginia University, dba: Personal Rapid Transit 645.1318 kg CO₂ per mile\n🥇 Small Agency Winner: Pennsylvania Department of Transportation 273.8586 CO₂ per mile\nWhile some agencies are already champions of green transit, others have some serious catching up to do. The 2025 Clean Transit Awards highlight the best in eco-friendly transportation while also shining a spotlight on areas that need improvement. 🚆 The takeaway? Cities that invest in sustainable transit are making a real impact on emissions. Meanwhile, gas guzzlers (we’re looking at you, WVU!) still have some work to do. For a full breakdown of the data, check out the Appendix in our official report. Spoiler alert: numbers don’t lie, and neither do emissions reductions!"
  },
  {
    "objectID": "docs/mp02.html#data-import",
    "href": "docs/mp02.html#data-import",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.1 📊 Data Import",
    "text": "2.1 📊 Data Import\nWe started by acquiring data from EIA State Electricity Profiles, which we will use to estimate the environmental impact of the electricity used to run certain transit systems. 🚗\n\n2.1.0.1 State Electricity Profiles 🏛️\nFor purposes of this analysis, we will assume that all electricity generation in a state is fungible. That is, we will assign the average generation emissions to all-electric transit in a state, even if the transit authority officially has a “green supply” agreement in place.\n\n\nShow Code\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(DT)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(stringr) # Needed for str_replace_all()\nlibrary(purrr) # Needed for map2()\nlibrary(quarto) # Ensures Quarto execution works\n\n\n\n\nShow Code\n# Load libraries\nensure_package &lt;- function(pkg){\n    pkg &lt;- as.character(substitute(pkg))\n    options(repos = c(CRAN = \"https://cloud.r-project.org\"))\n    if(!require(pkg, character.only=TRUE)) install.packages(pkg)\n    stopifnot(require(pkg, character.only=TRUE))\n}\nensure_package(stringr)  # Ensure it's installed\nensure_package(dplyr)\nensure_package(httr2)\nensure_package(rvest)\nensure_package(datasets)\nensure_package(purrr)\nensure_package(DT)\n\nget_eia_sep &lt;- function(state, abbr){\n    state_formatted &lt;- str_to_lower(state) |&gt; str_replace_all(\"\\\\s\", \"\")\n    \n    dir_name &lt;- file.path(\"data\", \"mp02\")\n    file_name &lt;- file.path(dir_name, state_formatted)\n    \n    dir.create(dir_name, showWarnings=FALSE, recursive=TRUE)\n    \n    if(!file.exists(file_name)){\n        BASE_URL &lt;- \"https://www.eia.gov\"\n        REQUEST &lt;- request(BASE_URL) |&gt; \n            req_url_path(\"electricity\", \"state\", state_formatted)\n    \n        RESPONSE &lt;- req_perform(REQUEST)\n    \n        resp_check_status(RESPONSE)\n        \n        writeLines(resp_body_string(RESPONSE), file_name)\n    }\n    \n    TABLE &lt;- read_html(file_name) |&gt; \n        html_element(\"table\") |&gt; \n        html_table() |&gt;\n        mutate(Item = str_to_lower(Item))\n    \n    if(\"U.S. rank\" %in% colnames(TABLE)){\n        TABLE &lt;- TABLE |&gt; rename(Rank = `U.S. rank`)\n    }\n    \n    CO2_MWh &lt;- TABLE |&gt; \n        filter(Item == \"carbon dioxide (lbs/mwh)\") |&gt;\n        pull(Value) |&gt; \n        str_replace_all(\",\", \"\") |&gt;\n        as.numeric()\n    \n    PRIMARY &lt;- TABLE |&gt; \n        filter(Item == \"primary energy source\") |&gt; \n        pull(Rank)\n    \n    RATE &lt;- TABLE |&gt;\n        filter(Item == \"average retail price (cents/kwh)\") |&gt;\n        pull(Value) |&gt;\n        as.numeric()\n    \n    GENERATION_MWh &lt;- TABLE |&gt;\n        filter(Item == \"net generation (megawatthours)\") |&gt;\n        pull(Value) |&gt;\n        str_replace_all(\",\", \"\") |&gt;\n        as.numeric()\n    \n    data.frame(CO2_MWh               = CO2_MWh, \n               primary_source        = PRIMARY,\n               electricity_price_MWh = RATE * 10, # / 100 cents to dollars &\n               # * 1000 kWh to MWH \n               generation_MWh        = GENERATION_MWh, \n               state                 = state, \n               abbreviation          = abbr\n    )\n}\n\nEIA_SEP_REPORT &lt;- map2(state.name, state.abb, get_eia_sep) |&gt; list_rbind()\n\nensure_package(scales)\nensure_package(DT)\n\nEIA_SEP_REPORT |&gt; \n    select(-abbreviation) |&gt;\n    arrange(desc(CO2_MWh)) |&gt;\n    mutate(CO2_MWh = scales::number(CO2_MWh, big.mark=\",\"), \n           electricity_price_MWh = scales::dollar(electricity_price_MWh), \n           generation_MWh = scales::number(generation_MWh, big.mark=\",\")) |&gt;\n    rename(`Pounds of CO2 Emitted per MWh of Electricity Produced`=CO2_MWh, \n           `Primary Source of Electricity Generation`=primary_source, \n           `Average Retail Price for 1000 kWh`=electricity_price_MWh, \n           `Total Generation Capacity (MWh)`= generation_MWh, \n           State=state) |&gt;\n    kable(caption = \"EIA State Electricity Profile Report\")\n\n\n\nEIA State Electricity Profile Report\n\n\n\n\n\n\n\n\n\nPounds of CO2 Emitted per MWh of Electricity Produced\nPrimary Source of Electricity Generation\nAverage Retail Price for 1000 kWh\nTotal Generation Capacity (MWh)\nState\n\n\n\n\n1,925\nCoal\n$102.60\n52,286,784\nWest Virginia\n\n\n1,864\nCoal\n$83.90\n43,181,420\nWyoming\n\n\n1,741\nCoal\n$99.60\n63,217,080\nKentucky\n\n\n1,514\nCoal\n$108.70\n66,703,285\nMissouri\n\n\n1,497\nCoal\n$114.90\n90,046,880\nIndiana\n\n\n1,444\nPetroleum\n$386.00\n9,194,164\nHawaii\n\n\n1,414\nCoal\n$80.30\n42,068,807\nNorth Dakota\n\n\n1,354\nCoal\n$90.30\n33,496,554\nUtah\n\n\n1,180\nNatural gas\n$214.10\n6,717,825\nAlaska\n\n\n1,148\nNatural gas\n$127.20\n62,548,705\nWisconsin\n\n\n1,127\nCoal\n$109.70\n26,895,758\nMontana\n\n\n1,103\nCoal\n$91.40\n39,445,955\nNebraska\n\n\n1,095\nNatural gas\n$128.50\n4,772,059\nDelaware\n\n\n1,054\nCoal\n$117.60\n57,541,720\nColorado\n\n\n1,044\nNatural gas\n$110.40\n133,223,464\nOhio\n\n\n987\nNatural gas\n$97.30\n63,195,647\nArkansas\n\n\n966\nNatural gas\n$89.10\n97,784,565\nLouisiana\n\n\n923\nNatural gas\n$232.10\n19,695,884\nMassachusetts\n\n\n912\nNatural gas\n$136.80\n120,656,625\nMichigan\n\n\n855\nNatural gas\n$100.40\n547,294,552\nTexas\n\n\n847\nNatural gas\n$216.20\n10,430,846\nRhode Island\n\n\n817\nNatural gas\n$109.50\n72,933,440\nMississippi\n\n\n801\nWind\n$122.10\n57,276,862\nMinnesota\n\n\n794\nNatural gas\n$135.30\n259,798,479\nFlorida\n\n\n775\nWind\n$94.20\n69,836,973\nIowa\n\n\n763\nWind\n$108.00\n58,456,598\nKansas\n\n\n759\nWind\n$94.70\n39,269,073\nNew Mexico\n\n\n733\nNatural gas\n$110.60\n129,221,513\nGeorgia\n\n\n727\nNatural gas\n$114.70\n139,435,010\nAlabama\n\n\n715\nNuclear\n$106.90\n77,791,204\nTennessee\n\n\n684\nNatural gas\n$121.90\n111,838,736\nArizona\n\n\n655\nNatural gas\n$125.70\n235,924,937\nPennsylvania\n\n\n654\nNatural gas\n$130.90\n42,164,375\nNevada\n\n\n648\nNatural gas\n$93.00\n89,236,024\nOklahoma\n\n\n639\nNatural gas\n$106.10\n126,553,394\nNorth Carolina\n\n\n594\nNatural gas\n$106.80\n91,059,344\nVirginia\n\n\n576\nNatural gas\n$242.40\n40,666,418\nConnecticut\n\n\n558\nNatural gas\n$143.40\n36,000,650\nMaryland\n\n\n558\nNuclear\n$105.00\n100,853,387\nSouth Carolina\n\n\n522\nNuclear\n$117.50\n177,737,641\nIllinois\n\n\n522\nNatural gas\n$182.80\n124,039,988\nNew York\n\n\n518\nNatural gas\n$152.70\n64,228,924\nNew Jersey\n\n\n440\nNatural gas\n$248.70\n216,628,794\nCalifornia\n\n\n428\nNatural gas\n$208.40\n12,512,181\nMaine\n\n\n370\nHydroelectric\n$90.80\n17,842,446\nIdaho\n\n\n369\nWind\n$104.90\n17,436,158\nSouth Dakota\n\n\n344\nHydroelectric\n$103.20\n61,691,869\nOregon\n\n\n292\nHydroelectric\n$95.80\n102,960,605\nWashington\n\n\n269\nNuclear\n$229.60\n16,824,999\nNew Hampshire\n\n\n8\nHydroelectric\n$175.30\n2,480,199\nVermont\n\n\n\n\n\n🌍 Here, we have collected the effective emissions per MWh2⚡ as well as price and total state-wide generation capacity. We will use this data to compare the emissions of different transit modalities. We next turn to the National Transit Database to get information on various public transit authorities. Before we do so, however, let’s explore the SEP data a bit first.🔬📉"
  },
  {
    "objectID": "docs/mp02.html#initial-analysis-of-sep-data",
    "href": "docs/mp02.html#initial-analysis-of-sep-data",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.2 🔍 Initial Analysis of SEP Data ⚖️",
    "text": "2.2 🔍 Initial Analysis of SEP Data ⚖️\nLet’s answer some burning (fossil-free, we hope!) questions: 🚇\n\n2.2.1 1. Which state has the most expensive retail electricity? 💰⚡\nWhich state will make you cry when you get your electricity bill? 😭 Let’s find out!\n\n\nShow Code\nEIA_SEP_REPORT |&gt; \n  arrange(desc(electricity_price_MWh)) |&gt; \n  select(state, electricity_price_MWh) |&gt; \n  head(1) |&gt; \n  kable(caption = \"Most Expensive Retail Electricity\")\n\n\n\nMost Expensive Retail Electricity\n\n\nstate\nelectricity_price_MWh\n\n\n\n\nHawaii\n386\n\n\n\n\n\n\n\n2.2.2 2. Which state has the ‘dirtiest’ electricity mix? ☠️🌫️\nWhich state’s power plants are puffing out CO₂ like an angry dragon? 🐉🔥 Stay tuned for some shocking revelations!\n\n\nShow Code\nEIA_SEP_REPORT |&gt; \n  arrange(desc(CO2_MWh)) |&gt; \n  select(state, CO2_MWh) |&gt; \n  head(1) |&gt; \n  kable(caption = \"Dirtiest electricity mix\")\n\n\n\nDirtiest electricity mix\n\n\nstate\nCO2_MWh\n\n\n\n\nWest Virginia\n1925\n\n\n\n\n\n\n\n2.2.3 3. On average, how many pounds of CO2 are emitted per MWh of electricity produced in the US?🏭\nTime for some serious math! 📊 We’ll calculate the national average CO₂ emissions per MWh using a weighted average because we like our stats accurate.🎯\n\n\nShow Code\n# Calculate weighted average CO2 emissions\nweighted_avg_CO2 &lt;- sum(EIA_SEP_REPORT$CO2_MWh * EIA_SEP_REPORT$generation_MWh) / \n  sum(EIA_SEP_REPORT$generation_MWh)\n\ndata.frame(Weighted_Avg_CO2 = weighted_avg_CO2) |&gt; \n  kable(col.names = c(\"Weighted Average CO2 Emissions (lbs/MWh)\"),\n        caption = \"Weighted Average CO2 Emissions Across All States\")\n\n\n\nWeighted Average CO2 Emissions Across All States\n\n\nWeighted Average CO2 Emissions (lbs/MWh)\n\n\n\n\n805.3703\n\n\n\n\n\n\n\n2.2.4 4. 🦄 What is the rarest primary energy source in the US? What is the associated cost of electricity and where is it used?🧐\nWhat’s the mythical unicorn of US energy sources? 🦄✨ And where is it hiding? Let’s track it down and see how much it costs! 💸\n\n\nShow Code\nEIA_SEP_REPORT |&gt; \n  count(primary_source) |&gt; \n  arrange(n) |&gt; \n  slice(1) |&gt; \n  inner_join(EIA_SEP_REPORT, by = \"primary_source\") |&gt; \n  select(state, primary_source, electricity_price_MWh) |&gt; \n  kable(caption = \"Primary Energy Source with Lowest Occurrence\")\n\n\n\nPrimary Energy Source with Lowest Occurrence\n\n\nstate\nprimary_source\nelectricity_price_MWh\n\n\n\n\nHawaii\nPetroleum\n386\n\n\n\n\n\n\n\n2.2.5 5. My home state, Texas, has a reputation as being the home of “dirty fossil fuels” while NY has a reputation as a leader in clean energy. How many times cleaner is NY’s energy mix than that of Texas?🌱🔥\nIs Texas really the king of fossil fuels? 👑 And does New York truly deserve its green halo? 😇 Let’s compare their energy mixes and see how many times cleaner NY is compared to TX! 📊⚖️\n\n\nShow Code\nNY_CO2 &lt;- EIA_SEP_REPORT |&gt; filter(state == \"New York\") |&gt; pull(CO2_MWh)\nTX_CO2 &lt;- EIA_SEP_REPORT |&gt; filter(state == \"Texas\") |&gt; pull(CO2_MWh)\n\ncleaner_ratio &lt;- TX_CO2 / NY_CO2\n\ntibble(Metric = \"Cleaner Ratio (TX to NY)\", Value = cleaner_ratio) |&gt; \n  kable(caption = \"Texas vs. New York CO2 Emissions Ratio\")\n\n\n\nTexas vs. New York CO2 Emissions Ratio\n\n\nMetric\nValue\n\n\n\n\nCleaner Ratio (TX to NY)\n1.637931\n\n\n\n\n\nFun fact: New York’s energy mix is cleaner than Texas’s by a factor of 1.637931. That’s right, the Lone Star State might want to take notes from the Big Apple! 🍏⚡"
  },
  {
    "objectID": "docs/mp02.html#importing-2023-annual-database-energy-consumption-report",
    "href": "docs/mp02.html#importing-2023-annual-database-energy-consumption-report",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.3 Importing 2023 Annual Database Energy Consumption Report ⚡📊",
    "text": "2.3 Importing 2023 Annual Database Energy Consumption Report ⚡📊\nTo analyze the energy consumption data for public transit agencies, we first need to import the 2023 Annual Database Energy Consumption report. This Dataset is provided in an Excel spreadsheet (.xlsx) format. We will use the readxl package in R to load it.\n\n\nShow Code\nensure_package(readxl)\n# Create 'data/mp02' directory if not already present\nDATA_DIR &lt;- file.path(\"data\", \"mp02\")\ndir.create(DATA_DIR, showWarnings=FALSE, recursive=TRUE)\n\nNTD_ENERGY_FILE &lt;- file.path(DATA_DIR, \"2023_ntd_energy.xlsx\")\n\nif(!file.exists(NTD_ENERGY_FILE)){\n    DS &lt;- download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-10/2023%20Energy%20Consumption.xlsx\", \n                  destfile=NTD_ENERGY_FILE, \n                  method=\"curl\")\n    \n    if(DS | (file.info(NTD_ENERGY_FILE)$size == 0)){\n        cat(\"I was unable to download the NTD Energy File. Please try again.\\n\")\n        stop(\"Download failed\")\n    }\n}\n\nNTD_ENERGY_RAW &lt;- read_xlsx(NTD_ENERGY_FILE)\n\n\n\n\nShow Code\n### Data Cleaning 🧹\n\n\nensure_package(tidyr)\nto_numeric_fill_0 &lt;- function(x){\n    x &lt;- if_else(x == \"-\", NA, x)\n    replace_na(as.numeric(x), 0)\n}\n\nNTD_ENERGY &lt;- NTD_ENERGY_RAW |&gt; \n    select(-c(`Reporter Type`, \n              `Reporting Module`, \n              `Other Fuel`, \n              `Other Fuel Description`)) |&gt;\n    mutate(across(-c(`Agency Name`, \n                     `Mode`,\n                     `TOS`), \n                  to_numeric_fill_0)) |&gt;\n    group_by(`NTD ID`, `Mode`, `Agency Name`) |&gt;\n    summarize(across(where(is.numeric), sum), \n              .groups = \"keep\") |&gt;\n    mutate(ENERGY = sum(c_across(c(where(is.numeric))))) |&gt;\n    filter(ENERGY &gt; 0) |&gt;\n    select(-ENERGY) |&gt;\n    ungroup()\n\n\n\n2.3.1 🎲 The Wheel of Randomness! 🎰\nLadies and gentlemen, it’s time for the Random Transit Energy Lottery! 🎉🎟️ We’ll now select 10 lucky transit energy records at random! Who will make the cut? Who will be left behind? Let’s spin the wheel! 🔄✨\n\n\nShow Code\n# Sample 10 random rows and then pass them to kable()\nNTD_ENERGY |&gt; \n  slice_sample(n = 10) |&gt; \n  kable(caption = \"Random Sample of NTD_ENERGY Data\")\n\n\n\nRandom Sample of NTD_ENERGY Data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNTD ID\nMode\nAgency Name\nBio-Diesel\nBunker Fuel\nC Natural Gas\nDiesel Fuel\nElectric Battery\nElectric Propulsion\nEthanol\nMethonal\nGasoline\nHydrogen\nKerosene\nLiquified Nat Gas\nLiquified Petroleum Gas\n\n\n\n\n40093\nMB\nCity of Greensboro\n0\n0\n0\n392784\n1366471\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n40100\nDR\nSantee Wateree Regional Transportation Authority\n0\n0\n0\n0\n0\n0\n0\n0\n32362\n0\n0\n0\n5887\n\n\n40138\nMB\nGwinnett County Board of Commissioners\n0\n0\n0\n397044\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n90154\nMB\nLos Angeles County Metropolitan Transportation Authority\n0\n0\n28313729\n0\n191476\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n50113\nMB\nPace, the Suburban Bus Division of the Regional Transportation Authority\n9321\n0\n1203314\n4072123\n1621\n0\n0\n0\n9889\n0\n0\n0\n0\n\n\n50043\nMB\nCity of Evansville\n0\n0\n0\n191605\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n60011\nDR\nVIA Metropolitan Transit\n0\n0\n0\n0\n0\n0\n0\n0\n564658\n0\n0\n0\n883035\n\n\n2\nDR\nSpokane Transit Authority\n0\n0\n0\n131642\n0\n0\n0\n0\n152360\n0\n0\n0\n0\n\n\n50021\nDR\nPortage Area Regional Transportation Authority\n0\n0\n0\n0\n0\n0\n0\n0\n84641\n0\n0\n0\n0\n\n\n40043\nDR\nCity of Mobile\n0\n0\n0\n0\n0\n0\n0\n0\n110813\n0\n0\n0\n0"
  },
  {
    "objectID": "docs/mp02.html#recoding-transit-modes",
    "href": "docs/mp02.html#recoding-transit-modes",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.4 🚇 Recoding Transit Modes 🚋🎭",
    "text": "2.4 🚇 Recoding Transit Modes 🚋🎭\n🚧 Warning: Mysterious Codes Ahead! 🚧\nBefore we can make sense of the Mode column, we need to crack the code! 🕵️‍♂️ First, let’s uncover the unique Mode codes in our data using distinct(). Then, we consult the sacred texts (a.k.a. the NTD website 📜) to decipher their meanings. 🧐\n\n2.4.1 🏗️ Time for a Makeover! 🖌️\nThe Mode column needs a glow-up! ✨ We’re about to give those cryptic abbreviations some real names so they’re easier to work with. Ready? Let’s do this! 🎬\n\n\nShow Code\nNTD_ENERGY &lt;- NTD_ENERGY |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\"  ~ \"Heavy Rail\", \n    Mode == \"LR\"  ~ \"Light Rail\", \n    Mode == \"CR\"  ~ \"Commuter Rail\", \n    Mode == \"MB\"  ~ \"Motor Bus\", \n    Mode == \"TB\"  ~ \"Trolleybus\", \n    Mode == \"TR\"  ~ \"Heritage Streetcar\", \n    Mode == \"SR\"  ~ \"Modern Streetcar\", \n    Mode == \"VP\"  ~ \"Vanpool\", \n    Mode == \"DR\"  ~ \"Demand Response\", \n    Mode == \"FB\"  ~ \"Ferryboat\", \n    Mode == \"MG\"  ~ \"Monorail/Automated Guideway\", \n    Mode == \"PB\"  ~ \"Publico\", \n    Mode == \"CB\"  ~ \"Commuter Bus\",\n    Mode == \"RB\"  ~ \"Rapid Bus\",\n    Mode == \"AR\"  ~ \"Aerial Tramway\",\n    Mode == \"YR\"  ~ \"Hybrid Rail\",\n    Mode == \"IP\"  ~ \"Inclined Plane Railway\",\n    Mode == \"CC\"  ~ \"Cable Car\",\n    TRUE          ~ \"Unknown\"\n  ))\n\nNTD_ENERGY |&gt; distinct(Mode) |&gt;\nkable(caption = \"Distinct Modes of Transport\")\n\n\n\nDistinct Modes of Transport\n\n\nMode\n\n\n\n\nDemand Response\n\n\nFerryboat\n\n\nMotor Bus\n\n\nModern Streetcar\n\n\nTrolleybus\n\n\nVanpool\n\n\nCommuter Bus\n\n\nRapid Bus\n\n\nLight Rail\n\n\nMonorail/Automated Guideway\n\n\nCommuter Rail\n\n\nAerial Tramway\n\n\nHeritage Streetcar\n\n\nHeavy Rail\n\n\nHybrid Rail\n\n\nInclined Plane Railway\n\n\nPublico\n\n\nCable Car"
  },
  {
    "objectID": "docs/mp02.html#annual-database-service-by-agency",
    "href": "docs/mp02.html#annual-database-service-by-agency",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.5 2023 Annual Database Service by Agency 📊🚇",
    "text": "2.5 2023 Annual Database Service by Agency 📊🚇\n🚨 Breaking News! 🚨 The latest 2023 Service by Agency report has just dropped! 🎤📉 We’re diving in to extract the juicy details about passenger trips across different transit services. 🚆🚌\n\n\nShow Code\nNTD_SERVICE_FILE &lt;- file.path(DATA_DIR, \"2023_service.csv\")\nif(!file.exists(NTD_SERVICE_FILE)){\n    DS &lt;- download.file(\"https://data.transportation.gov/resource/6y83-7vuw.csv\", \n                  destfile=NTD_SERVICE_FILE, \n                  method=\"curl\")\n    \n    if(DS | (file.info(NTD_SERVICE_FILE)$size == 0)){\n        cat(\"I was unable to download the NTD Service File. Please try again.\\n\")\n        stop(\"Download failed\")\n    }\n}\n\nNTD_SERVICE_RAW &lt;- read_csv(NTD_SERVICE_FILE)\n\n\n📢 Will our dataset arrive safely, or will it ghost us? 👻 Only time (and a stable internet connection) will tell! ⏳"
  },
  {
    "objectID": "docs/mp02.html#clean-up-time",
    "href": "docs/mp02.html#clean-up-time",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.6 Clean-Up Time! 🧹✨",
    "text": "2.6 Clean-Up Time! 🧹✨\n\n\nShow Code\nNTD_SERVICE &lt;- NTD_SERVICE_RAW |&gt;\n    mutate(`NTD ID` = as.numeric(`_5_digit_ntd_id`)) |&gt; \n    rename(Agency = agency, \n           City   = max_city, \n           State  = max_state,\n           UPT    = sum_unlinked_passenger_trips_upt, \n           MILES  = sum_passenger_miles) |&gt;\n    select(matches(\"^[A-Z]\", ignore.case=FALSE)) |&gt;\n    filter(MILES &gt; 0)\n\n\n🛠️ Boom! Now our dataset is sparkling clean! ✨ It’s time to put these numbers to work! 💪"
  },
  {
    "objectID": "docs/mp02.html#exploring-ntd-service-data---lets-dive-in",
    "href": "docs/mp02.html#exploring-ntd-service-data---lets-dive-in",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.7 🛥️ Exploring NTD Service Data - Let’s Dive In!",
    "text": "2.7 🛥️ Exploring NTD Service Data - Let’s Dive In!\nAlright, folks! Time to put on our data analyst hats and explore some seriously juicy transit numbers from the NTD_SERVICE Dataset. We’re going to answer some fun questions that might just reveal who’s cruising on the green lane of transit efficiency and who’s still stuck in the slow lane. Let’s see how this data speeds up the fun! 😎\n\n2.7.1 1. Which transit service has the most UPT annually? 🏆\nWhich transit service is the busiest, with the most Unlinked Passenger Trips (UPT) annually? Spoiler alert: It’s probably not the one with the tiniest buses.🚌\n\n\nShow Code\nNTD_SERVICE |&gt;\n  filter(!is.na(UPT)) |&gt;\n  arrange(desc(UPT)) |&gt;\n  select(Agency, UPT) |&gt;\n  head(1) |&gt;\n  kable(caption = \"Most UTP Annually\")\n\n\n\nMost UTP Annually\n\n\nAgency\nUPT\n\n\n\n\nMTA New York City Transit\n2632003044\n\n\n\n\n\n\n\n2.7.2 2. What is the average trip length of a trip on MTA NYC? 🗽\nTime for some serious subway sleuthing! 🕵️‍♂️ How long is the average trip on the MTA NYC? Are New Yorkers making quick, subway sprints, or are they getting comfy for a longer ride? We’re on a mission to figure out just how far these trips stretch, so hop on board! 🚇⏳\n\n\nShow Code\nNTD_SERVICE |&gt;\n  filter(grepl(\"MTA\", Agency, ignore.case = TRUE)) |&gt;\n  summarise(Average_Trip_Length = sum(MILES, na.rm = TRUE) / sum(UPT, na.rm = TRUE)) |&gt;\n  kable(caption = \"Average Trip Length On MTA Nyc\")\n\n\n\nAverage Trip Length On MTA Nyc\n\n\nAverage_Trip_Length\n\n\n\n\n4.562402\n\n\n\n\n\n\n\n2.7.3 3. Which transit service in NYC has the longest average trip length? 🚋\nWhich MTA service in New York City (including all five boroughs, yes, even Brooklyn 🗽) has the longest average trip length? Let’s just say, it’s probably not the one where the subway rats are the most frequent passengers. 🐀\nP.S. You’ll want to be extra careful with that City column; we wouldn’t want to accidentally send our buses on a detour to Brooklyn when they should be cruising through Manhattan!\n\n\nShow Code\nNYC_SERVICES &lt;- NTD_SERVICE |&gt;\n  filter(State == \"NY\", MILES &gt; 0, UPT &gt; 0) |&gt;\n  mutate(Average_Trip_Length = MILES / UPT) |&gt;\n  arrange(desc(Average_Trip_Length)) |&gt;\n  select(Agency, City, Average_Trip_Length)\n\nhead(NYC_SERVICES, 1) |&gt;\nkable(caption = \"NYC Longest Average Trip Length\")\n\n\n\nNYC Longest Average Trip Length\n\n\nAgency\nCity\nAverage_Trip_Length\n\n\n\n\nHampton Jitney, Inc.\nCalverton\n92.4465\n\n\n\n\n\n\n\n2.7.4 4. Which state has the fewest total miles travelled by public transit? 🐢\nWhich state is the turtle in the race, with the fewest total miles travelled by public transit? 🐢 Are some states just cruising along at a leisurely pace, or are they barely moving at all? It’s time to find out who’s not clocking up the miles! 🛑🚗\n\n\nShow Code\nNTD_SERVICE |&gt;\n  group_by(State) |&gt;\n  summarise(Total_Miles = sum(MILES, na.rm = TRUE)) |&gt;\n  arrange(Total_Miles) |&gt;\n  head(1) |&gt;\n  kable(caption = \"Fewest total miles Travelled By Public Transit\")\n\n\n\nFewest total miles Travelled By Public Transit\n\n\nState\nTotal_Miles\n\n\n\n\nNH\n3749892\n\n\n\n\n\n\n\n2.7.5 5. Are all states represented in this data? If no, which ones are missing? The state.name and state.abb objects we used above may be useful here.🚏🗺️\nNow for a little mystery – are all states in this data? Or did a few sneak out of the spotlight? 👀 Let’s use the state.name and state.abb to track down any states that may have taken the wrong exit. Looks like it’s time for a little data detective work! 🔍💼\n\n\nShow Code\nall_states &lt;- state.abb  # Vector of all US state abbreviations\npresent_states &lt;- unique(NTD_SERVICE$State)\nmissing_states &lt;- setdiff(all_states, present_states)\nkable(missing_states, caption = \"Missing States\")\n\n\n\nMissing States\n\n\nx\n\n\n\n\nAZ\n\n\nAR\n\n\nCA\n\n\nCO\n\n\nHI\n\n\nIA\n\n\nKS\n\n\nLA\n\n\nMO\n\n\nMT\n\n\nNE\n\n\nNV\n\n\nNM\n\n\nND\n\n\nOK\n\n\nSD\n\n\nTX\n\n\nUT\n\n\nWY"
  },
  {
    "objectID": "docs/mp02.html#calculate-emissions-lets-crunch-some-carbon",
    "href": "docs/mp02.html#calculate-emissions-lets-crunch-some-carbon",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.8 🌍 Calculate Emissions – Let’s Crunch Some Carbon! 💨",
    "text": "2.8 🌍 Calculate Emissions – Let’s Crunch Some Carbon! 💨\nTime to put on our environmental cap and get down to the nitty-gritty of CO2 emissions! We’re about to take a deep dive into some data to calculate the total emissions from different transit agencies and their modes. Spoiler alert: We’re going green – but with a twist! 🌱🔢\n\n2.8.1 Join the Three Tables – The Ultimate Data Party 🎉\nHere’s where we get our hands dirty (but in an eco-friendly way, of course!). We’ll join three tables together like the perfect data trio:\nNTD_SERVICE 🚍 – It tells us the Agency and Mode (because, let’s face it, transit is all about style, right?)\nNTD_ENERGY ⚡ – This table’s going to give us the lowdown on all the fuel sources. It’s like fuel’s Wikipedia page, but with more numbers.\nEIA_SEP_REPORT 📊 – This is where the magic happens! It tells us the CO2 emissions per MWh. Time to add some climate-friendly math into the mix. Once we’ve got these three tables chatting with each other, we’re ready to roll!\n\n\nShow Code\n# Create a mapping of state abbreviations to full names\nstate_abbrev_to_full &lt;- c(\n  \"AL\" = \"Alabama\", \"AK\" = \"Alaska\", \"AZ\" = \"Arizona\", \"AR\" = \"Arkansas\", \"CA\" = \"California\", \"CO\" = \"Colorado\", \n  \"CT\" = \"Connecticut\", \"DE\" = \"Delaware\", \"FL\" = \"Florida\", \"GA\" = \"Georgia\", \"HI\" = \"Hawaii\", \"ID\" = \"Idaho\", \n  \"IL\" = \"Illinois\", \"IN\" = \"Indiana\", \"IA\" = \"Iowa\", \"KS\" = \"Kansas\", \"KY\" = \"Kentucky\", \"LA\" = \"Louisiana\", \n  \"ME\" = \"Maine\", \"MD\" = \"Maryland\", \"MA\" = \"Massachusetts\", \"MI\" = \"Michigan\", \"MN\" = \"Minnesota\", \"MS\" = \"Mississippi\", \n  \"MO\" = \"Missouri\", \"MT\" = \"Montana\", \"NE\" = \"Nebraska\", \"NV\" = \"Nevada\", \"NH\" = \"New Hampshire\", \"NJ\" = \"New Jersey\", \n  \"NM\" = \"New Mexico\", \"NY\" = \"New York\", \"NC\" = \"North Carolina\", \"ND\" = \"North Dakota\", \"OH\" = \"Ohio\", \"OK\" = \"Oklahoma\", \n  \"OR\" = \"Oregon\", \"PA\" = \"Pennsylvania\", \"RI\" = \"Rhode Island\", \"SC\" = \"South Carolina\", \"SD\" = \"South Dakota\", \n  \"TN\" = \"Tennessee\", \"TX\" = \"Texas\", \"UT\" = \"Utah\", \"VT\" = \"Vermont\", \"VA\" = \"Virginia\", \"WA\" = \"Washington\", \n  \"WV\" = \"West Virginia\", \"WI\" = \"Wisconsin\", \"WY\" = \"Wyoming\"\n)\n\n# Fix State Names in NTD_SERVICE before joining\nNTD_SERVICE &lt;- NTD_SERVICE |&gt; mutate(State = state_abbrev_to_full[State])\n\n# Now perform the joins\nNTD_EMISSIONS &lt;- NTD_SERVICE |&gt;\n  select(Agency, State, `NTD ID`) |&gt;\n  inner_join(NTD_ENERGY, by = \"NTD ID\") |&gt;\n  inner_join(EIA_SEP_REPORT, by = c(\"State\" = \"state\"))\n\n# Check if the join worked\ndim(NTD_EMISSIONS)  # Should no longer be (0, X)\n\n\n[1] 650  23\n\n\n\n\n2.8.2 The Ultimate Emissions Table 🧮\nWe’re going to create a super sleek table with all the goods:\nAgency + Mode Pair – These are the dynamic duos of transit! 🚍🚆\nState – Every agency has a home, and we’ll find out which state it’s calling its turf! 🌎\nFuel Sources – Because we need to know how those buses are powering through your city streets! 🚨\nCO2 Emissions per MWh – Let’s see how much carbon’s being emitted for every megawatt-hour of power. (The more we know, the greener we grow! 🌳)\nNow, let’s clean up some fuel names and make sure everything aligns:\n\n\nShow Code\nNTD_EMISSIONS &lt;- NTD_EMISSIONS |&gt; \n  rename(\n    \"Bio diesel\" = \"Bio-Diesel\",\n    \"Natural Gas\" = \"C Natural Gas\",\n    \"LNG\" = \"Liquified Nat Gas\",\n    \"LPG\" = \"Liquified Petroleum Gas\",\n    \"Battery Electric\" = \"Electric Battery\",\n    \"Electric\" = \"Electric Propulsion\"\n  )\n\n\n\n\n2.8.3 The Formula – It’s Math, But Make It Eco! 🧑‍🏫\nNow for the fun part – the math! 💡\nWe’re going to use a long-ish arithmetic formula (don’t worry, it’s just a couple of steps) inside a mutate function to compute the total emissions for each Agency + Mode Pair. We’ll need to convert combustion fuels to CO2 emissions – but don’t panic, we’ve got conversion factors! 💪 You can hard code these bad boys in your script for simplicity:\n\n\nShow Code\nfuel_emission_factors &lt;- c(\n  \"Diesel Fuel\" = 10.19,    # kg CO2 per gallon\n  \"Gasoline\" = 8.89,\n  \"Natural Gas\" = 52.91,    # kg CO2 per MMBtu\n  \"LPG\" = 5.79,  \n  \"LNG\" = 4.29,\n  \"Kerosene\" = 9.96,\n  \"Ethanol\" = 1.94,\n  \"Hydrogen\" = 0,           # No emissions from hydrogen\n  \"Battery Electric\" = 0,   # Handled separately using CO2_MWh\n  \"Electric\" = 0            # Handled separately using CO2_MWh\n)\n\n\nThen, apply the emissions calculation:\n\n\nShow Code\nNTD_EMISSIONS &lt;- NTD_EMISSIONS |&gt;\n  mutate(\n    Fuel_Emissions = (`Diesel Fuel` * fuel_emission_factors[\"Diesel Fuel\"]) +\n      (`Gasoline` * fuel_emission_factors[\"Gasoline\"]) +\n      (`Natural Gas` * fuel_emission_factors[\"Natural Gas\"]) +\n      (`LPG` * fuel_emission_factors[\"LPG\"]) +\n      (`LNG` * fuel_emission_factors[\"LNG\"]) +\n      (`Kerosene` * fuel_emission_factors[\"Kerosene\"]) +\n      (`Ethanol` * fuel_emission_factors[\"Ethanol\"]) +\n      (`Hydrogen` * fuel_emission_factors[\"Hydrogen\"])\n  )\n\nNTD_EMISSIONS &lt;- NTD_EMISSIONS |&gt;\n  mutate(\n    Electricity_Emissions = `Electric` * CO2_MWh\n  )\n\nNTD_EMISSIONS &lt;- NTD_EMISSIONS |&gt;\n  mutate(\n    Total_Emissions = Fuel_Emissions + Electricity_Emissions\n  )\n\n\n💚 Let’s Save the Planet – One Data Row at a Time! Now that our emissions data is ready, let’s take a look at the final product! 🌍\n\n\nShow Code\nNTD_EMISSIONS |&gt; select(Agency, Mode, State, Fuel_Emissions, Electricity_Emissions, Total_Emissions) |&gt; arrange(desc(Total_Emissions))\n\n\n# A tibble: 650 × 6\n   Agency       Mode  State Fuel_Emissions Electricity_Emissions Total_Emissions\n   &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;          &lt;dbl&gt;                 &lt;dbl&gt;           &lt;dbl&gt;\n 1 MTA New Yor… Heav… New …             0           807152731200   807152731200 \n 2 MTA Long Is… Comm… New …      72196486.          286155388800   286227585286.\n 3 Metro-North… Comm… New …      71313390.          211429086408   211500399798.\n 4 New Jersey … Comm… New …     143674231.          189542379222   189686053453.\n 5 Chicago Tra… Heav… Illi…             0           177353391510   177353391510 \n 6 Southeaster… Comm… Penn…             0           134209031675   134209031675 \n 7 Massachuset… Heav… Mass…             0           125346279760   125346279760 \n 8 Southeaster… Heav… Penn…             0            75871258865    75871258865 \n 9 Metropolita… Heav… Geor…             0            56484703659    56484703659 \n10 Port Author… Heav… New …             0            51187752738    51187752738 \n# ℹ 640 more rows"
  },
  {
    "objectID": "docs/mp02.html#normalize-emissions-to-transit-usage",
    "href": "docs/mp02.html#normalize-emissions-to-transit-usage",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.9 Normalize Emissions to Transit Usage 🚆",
    "text": "2.9 Normalize Emissions to Transit Usage 🚆\nIn this task, we’re on a mission to normalize emissions (a fancy way of saying “make fair comparisons”) based on:\nEmissions per Unlinked Passenger Trip (UPT) 🚌👥\nEmissions per Passenger Mile 🚋🌱\n\n2.9.1 Normalize Emissions – Leveling the Playing Field! 🎯\nBefore we start handing out gold medals 🏅 (or shameful side-eyes 👀), we normalize emissions based on ridership. This ensures a fair fight—because comparing a tiny rural bus route to New York City’s subway isn’t exactly fair, right? 😆\n\n\nShow Code\n# Filter out agencies with extremely small values to avoid distortions\n\nAGENCY_NORMALIZED &lt;- NTD_SERVICE %&gt;%   # Use your actual dataset\n  left_join(NTD_EMISSIONS, by = \"NTD ID\") %&gt;%\n  filter(!is.na(Total_Emissions))  # Ensure you have valid emission data\n\n# Filter out agencies with extremely small values to avoid distortions\nAGENCY_NORMALIZED &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(UPT &gt; 1000, MILES &gt; 1000) %&gt;%  # Adjust thresholds as needed\n  mutate(\n    Emissions_per_UPT = ifelse(UPT &gt; 0, Total_Emissions / UPT, NA),\n    Emissions_per_Passenger_Mile = ifelse(MILES &gt; 0, Total_Emissions / MILES, NA)\n  )\n\n\n🚦 Now, with that done, let’s move on to finding our champions!"
  },
  {
    "objectID": "docs/mp02.html#the-greenest-transit-agency-gta-iv-award-1",
    "href": "docs/mp02.html#the-greenest-transit-agency-gta-iv-award-1",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.10 🥇 The Greenest Transit Agency (GTA IV Award #1) 🌱🚆",
    "text": "2.10 🥇 The Greenest Transit Agency (GTA IV Award #1) 🌱🚆\nWhich agency has the lowest emissions per passenger trip? And which one produces the least pollution per mile traveled?\nLet’s roll out the green carpet and announce the winners! 🎤🥁\n\n\nShow Code\nAGENCY_NORMALIZED &lt;- AGENCY_NORMALIZED %&gt;%\n  mutate(Size_Category = case_when(\n    UPT &lt; 10^6 ~ \"Small\",\n    UPT &gt;= 10^6 & UPT &lt; 10^8 ~ \"Medium\",\n    UPT &gt;= 10^8 ~ \"Large\"\n  ))\n\n\n\n2.10.1 Find the greenest transit agency by lowest emissions per UPT\n\n\nShow Code\nAGENCY_NORMALIZED &lt;- AGENCY_NORMALIZED %&gt;%\n  rename(Agency = Agency.x)  # Rename \"Agency.x\" to \"Agency\"\n\ngreenest_agency_UPT &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(!is.na(Size_Category) & Emissions_per_UPT &gt; 0) %&gt;%\n  group_by(Size_Category) %&gt;%\n  slice_min(Emissions_per_UPT, n = 1, with_ties = FALSE) %&gt;%\n  select(Size_Category, Agency, Emissions_per_UPT)\nkable(greenest_agency_UPT, caption = \"Greenest Agency By lowest Emissions Per UPT\")\n\n\n\nGreenest Agency By lowest Emissions Per UPT\n\n\nSize_Category\nAgency\nEmissions_per_UPT\n\n\n\n\nLarge\nNew Jersey Transit Corporation\n0.0024015\n\n\nMedium\nKing County, dba: King County Metro\n0.0007222\n\n\nSmall\nAltoona Metro Transit, dba: AMTRAN\n0.0056772\n\n\n\n\n\n\n\n2.10.2 Find the greenest transit agency by lowest emissions per Passenger Mile\n\n\nShow Code\ngreenest_agency_mile &lt;- AGENCY_NORMALIZED %&gt;%\n    filter(!is.na(Size_Category) & Emissions_per_UPT &gt; 0) %&gt;%\n  group_by(Size_Category) %&gt;%\n  slice_min(Emissions_per_Passenger_Mile, n = 1, with_ties = FALSE) %&gt;%\n  select(Size_Category, Agency, Emissions_per_Passenger_Mile)\nkable(greenest_agency_mile, caption= \"Greenest Transit Agency By Lowest Emissions Per Passenger Mile\")\n\n\n\nGreenest Transit Agency By Lowest Emissions Per Passenger Mile\n\n\n\n\n\n\n\nSize_Category\nAgency\nEmissions_per_Passenger_Mile\n\n\n\n\nLarge\nNew Jersey Transit Corporation\n0.0002061\n\n\nMedium\nKing County, dba: King County Metro\n0.0001889\n\n\nSmall\nAltoona Metro Transit, dba: AMTRAN\n0.0015636"
  },
  {
    "objectID": "docs/mp02.html#total-emissions-avoided-gta-iv-award-2",
    "href": "docs/mp02.html#total-emissions-avoided-gta-iv-award-2",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.11 Total Emissions Avoided (GTA IV Award #2) 🌱🚆",
    "text": "2.11 Total Emissions Avoided (GTA IV Award #2) 🌱🚆\nNow, let’s compute the total emissions avoided by public transit. Because without it, we’d have millions of solo drivers making traffic even worse than it already is! 😱🚗🚕🚙\nHow do we do this?\n1️⃣ Estimate emissions if all transit passengers drove cars instead.\n2️⃣ Use US CAFE fuel standards to convert miles to gasoline usage.\n3️⃣ Calculate emissions avoided by taking public transit instead of driving.\nUsed average CAFE standard of 24.7 mpg and CO2 emissions of 8.89 kg per gallon\n\n\nShow Code\nAGENCY_NORMALIZED &lt;- AGENCY_NORMALIZED %&gt;%\n  mutate(\n    Gallons_of_fuel = MILES / 24.7,  # Convert miles to fuel gallons\n    Emissions_from_driving = Gallons_of_fuel * 8.89,  # Convert gallons to CO2\n    Emissions_avoided = Emissions_from_driving - Total_Emissions  # Calculate CO2 saved\n  )\n\n\n\n2.11.1 Find agency with most emissions avoided 🏆\n\n\nShow Code\nmost_emissions_avoided_by_size &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(!is.na(Size_Category)) %&gt;%  # Ensure valid categories\n  group_by(Size_Category) %&gt;%\n  slice_max(Emissions_avoided, n = 1, with_ties = FALSE) %&gt;%\n  select(Size_Category, Agency, Emissions_avoided)\nkable(most_emissions_avoided_by_size, caption = \"Most Emissions Avoided\")\n\n\n\nMost Emissions Avoided\n\n\n\n\n\n\n\nSize_Category\nAgency\nEmissions_avoided\n\n\n\n\nLarge\nMTA New York City Transit\n3441010874\n\n\nMedium\nMetro-North Commuter Railroad Company, dba: MTA Metro-North Railroad\n413801729\n\n\nSmall\nHampton Jitney, Inc.\n13333018\n\n\n\n\n\nThis agency has officially saved the planet more than your coworker with the reusable straw. 🌱💚♻️\n\n\n2.11.2 🏆Most Improved Green Agency (GTA IV Award #3) 🚆 🏆\nThis award recognizes the transit agency that has demonstrated the most significant improvement in environmental efficiency compared to its peers. Instead of using past-year data (which may not always be available), this award is given to the agency that has the largest improvement relative to the median emissions per passenger mile in its category (Large, Medium, or Small).\n\n\nShow Code\nmost_improved_agency &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(!is.na(Emissions_per_Passenger_Mile) & Emissions_per_Passenger_Mile &gt; 0) %&gt;%\n  group_by(Size_Category) %&gt;%\n  mutate(median_emissions = median(Emissions_per_Passenger_Mile, na.rm = TRUE)) %&gt;%\n  mutate(emissions_improvement = median_emissions - Emissions_per_Passenger_Mile) %&gt;%\n  slice_max(order_by = emissions_improvement, n = 1) %&gt;%  # Select top in each category\n  ungroup() %&gt;%\n  select(Agency, Size_Category, Emissions_per_Passenger_Mile, median_emissions, emissions_improvement)\n\nkable(most_improved_agency, caption = \"Most Improved Agency\")\n\n\n\nMost Improved Agency\n\n\n\n\n\n\n\n\n\nAgency\nSize_Category\nEmissions_per_Passenger_Mile\nmedian_emissions\nemissions_improvement\n\n\n\n\nNew Jersey Transit Corporation\nLarge\n0.0002061\n0.1260740\n0.1258680\n\n\nKing County, dba: King County Metro\nMedium\n0.0001889\n0.2200267\n0.2198378\n\n\nAltoona Metro Transit, dba: AMTRAN\nSmall\n0.0015636\n0.3648839\n0.3633203\n\n\n\n\n\n\n\n2.11.3 💀Biggest Gas Guzzler⛽ (GTA IV Award #4) 🌱🚆\nThis award highlights the least fuel-efficient transit agencies in each size category (Large, Medium, Small). The “Biggest Gas Guzzler” is the agency with the highest Emissions per Passenger Mile, indicating it produces the most pollution per mile traveled by a passenger. This award serves as a benchmark for identifying areas where fuel efficiency improvements and sustainability measures are most needed.\n\n\nShow Code\nbiggest_gas_guzzler_by_size &lt;- AGENCY_NORMALIZED %&gt;%\n  filter(!is.na(Size_Category)) %&gt;%\n  group_by(Size_Category) %&gt;%\n  slice_max(Emissions_per_Passenger_Mile, n = 1, with_ties = FALSE) %&gt;%\n  select(Size_Category, Agency, Emissions_per_Passenger_Mile)\n\nkable(biggest_gas_guzzler_by_size, caption =\"Biggest Gas Guzzler\")\n\n\n\nBiggest Gas Guzzler\n\n\n\n\n\n\n\nSize_Category\nAgency\nEmissions_per_Passenger_Mile\n\n\n\n\nLarge\nChicago Transit Authority\n162.6084\n\n\nMedium\nWest Virginia University, dba: Personal Rapid Transit\n645.1318\n\n\nSmall\nPennsylvania Department of Transportation\n273.8586"
  },
  {
    "objectID": "docs/mp02.html#visualizations",
    "href": "docs/mp02.html#visualizations",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.12 📈 Visualizations 🎨",
    "text": "2.12 📈 Visualizations 🎨\n\n2.12.0.1 🚍 Greenest Transit Agency - A Breath of Fresh Air! 🌍\n\n\nShow Code\ngreenest_data &lt;- data.frame(\n  Agency = c(\"New Jersey Transit Corporation\", \"King County, dba: King County Metro\", \"Altoona Metro Transit, dba: AMTRAN\"),\n  Size_Category = c(\"Large\", \"Medium\", \"Small\"),\n  Emissions_per_UPT = c(0.0024014936, 0.0007222026, 0.0056772412),\n  Emissions_per_Passenger_Mile = c(0.0002060647, 0.0001889437, 0.0015635784)\n) %&gt;% pivot_longer(cols = c(Emissions_per_UPT, Emissions_per_Passenger_Mile), \n                    names_to = \"Metric\", values_to = \"Emissions\")\n\n# Adjusting graph to make sure bars are visible\nggplot(greenest_data, aes(x = reorder(Agency, Emissions), y = Emissions, fill = Metric)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", width = 0.7) +  # Increased bar width\n  geom_text(aes(label = Size_Category), position = position_dodge(width = 0.7), vjust = -0.5, color = \"black\", size = 4) +  # Increased text size\n  labs(title = \"Greenest Transit Agency\", y = \"Emissions (kg CO₂)\", fill = \"Metric\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(0, max(greenest_data$Emissions) + 0.002)) +  # Adjust y-axis to ensure bars are visible\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nTalk about making a clean getaway! The MTA Bus Company and its smaller counterparts are taking the “green” route. We’re not just talking about eco-friendly buses, but real reductions in emissions. A round of applause for the greenest of them all!\n\n\n2.12.0.2 🌱 Most Emissions Avoided - The Green Warriors 💨\n\n\nShow Code\n# Define the emissions data\nemissions_data &lt;- data.frame(\n  Agency = c(\"MTA New York City Transit\", \"Metro-North Commuter Railroad Company\", \"Hampton Jitney, Inc.\"),\n  Emissions_Avoided = c(3441010874, 413801729, 13333018)\n)\n# Create the plot\nggplot(emissions_data, aes(x = reorder(Agency, Emissions_Avoided), y = Emissions_Avoided, fill = Agency)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Most Emissions Avoided\", y = \"CO₂ Avoided (kg)\", x = \"Agency\") +\n  theme_minimal() +\n  scale_y_log10(labels = scales::comma) +  # Apply logarithmic scale to the y-axis\n  geom_text(aes(label = scales::comma(Emissions_Avoided)), hjust = -0.1, size = 2)  # Adjust text positioning and size\n\n\n\n\n\n\n\n\n\nThese agencies are saving the planet one ride at a time! Hudson Transit Lines and its pals are on a mission to leave the world with fewer emissions. They’re all about that “low-carbon footprint” lifestyle!\n\n\n2.12.0.3 🚀 Most Improved Green Agency - Turning Green Around! 🌿\n\n\nShow Code\n## Most Improved Green Agency (Dumbbell Chart)\nlibrary(ggalt)\nimproved_data &lt;- data.frame(\n  Agency = c(\"MTA Bus Company\", \"Champaign-Urbana Mass Transit\", \"City of Decatur Transit\"),\n  Before = c(0.1260740,0.2200267, 0.3648839),\n  After = c(0.0002060647,0.0001889437, 0.0015635784)\n)\n\nggplot(improved_data, aes(y = Agency, x = Before, xend = After)) +\n  geom_dumbbell(color = \"blue\", size = 4, dot_guide = TRUE, dot_guide_size = 0.5) +\n  labs(title = \"Most Improved Green Agency\", x = \"Emissions per Mile (kg CO₂)\", y = \"Agency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThese agencies took the emissions “downshift” seriously! The MTA Bus Company may have started off with high emissions, but it’s now a model of green efficiency. Talk about a green makeover!\n\n\n2.12.0.4 🛢️ Biggest Gas Guzzler - Oops, It’s Guzzling More than Gas! 🍃\n\n\nShow Code\nguzzler_data &lt;- data.frame(\n  Agency = c(\"Chicago Transit Authority\", \"WVU Personal Rapid Transit\", \"Pennsylvania DOT\"),\n  Emissions = c(162.6084, 645.1, 273.9)\n)\n\nggplot(guzzler_data, aes(x = reorder(Agency, -Emissions), y = Emissions, fill = Emissions)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_gradient(low = \"yellow\", high = \"red\") +\n  labs(title = \"Biggest Gas Guzzler\", y = \"Emissions per Mile (kg CO₂)\", x = \"Agency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nSome agencies need to take a carbon diet! Looks like WVU Personal Rapid Transit took the term “gas guzzler” to the extreme. Maybe they should swap out those heavy engines for some electric vibes."
  },
  {
    "objectID": "docs/mp02.html#conclusion",
    "href": "docs/mp02.html#conclusion",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.13 📢 Conclusion",
    "text": "2.13 📢 Conclusion\n🚆 Public transit plays a huge role in reducing emissions! Our analysis highlights the best (and worst) performers. Keep supporting clean transit choices! 🌍💚"
  },
  {
    "objectID": "docs/mp02.html#references",
    "href": "docs/mp02.html#references",
    "title": "🏆 The GTA IV Green Transit Awards 2025 🏆",
    "section": "2.14 📚 References",
    "text": "2.14 📚 References\n\nNational Transit Database (NTD)\nEnergy Information Administration (EIA)\nEnvironmental Protection Agency (EPA)"
  },
  {
    "objectID": "mp03.html",
    "href": "mp03.html",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "",
    "text": "“A journey through moody anthems, lyrical grit, and melodic elevation”\n\n\n\nMidnight Ascension blends rhythmic fire with introspective depth — a sonic ascent through high-energy bangers, smooth flows, and emotionally rich undercurrents. With Kendrick Lamar and Travis Scott as our North Stars, this playlist brings together underground gems and global hits that flow seamlessly from dusk till dawn.\n\n\n\n\nAnchor songs: “HUMBLE.” by Kendrick Lamar and “Antidote” by Travis Scott.\nBalance: Energetic highs countered by smooth valleys.\nDiversity: A mix of popular and lesser-known songs.\nStructure: Carefully chosen using audio features (tempo, energy, danceability, valence, etc.).\nValence Similarity: Songs sharing the same emotional “feel”.\n\n\n\n\nI used data science to back every pick, not just vibes. This included examining: - How songs co-occur on playlists - Key and tempo for DJ transitions - Shared energy & danceability levels - Artist overlap and emotional tone (valence)\n\n\n\nused R and dplyr to calculate valence, tempo, key, and co-occurrence.\nExplored Spotify’s popularity and playlist frequency using correlation plots.\nSelected candidate songs using five filtering heuristics.\nPerformed deduplication and ensured anchor songs were correct.\nVisualized playlist structure with ggplot2 to verify the flow"
  },
  {
    "objectID": "mp03.html#data-aquisition-and-data-preparation",
    "href": "mp03.html#data-aquisition-and-data-preparation",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "",
    "text": "In this task, I loaded and cleaned the main Spotify track dataset containing song characteristics like tempo, danceability, energy, and popularity.We also cleaned the artists column to split multiple artists across rows.\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(readr)\nlibrary(knitr)\nclean_artist_string &lt;- function(x){\n  x |&gt;\n    str_replace_all(\"\\\\['\", \"\") |&gt;\n    str_replace_all(\"'\\\\]\", \"\") |&gt;\n    str_replace_all(\"[ ]?'\", \"\") |&gt;\n    str_replace_all(\"[ ]*,[ ]*\", \",\")\n}\n\nSONGS &lt;- read_csv(\"data/mp03/data.csv\") %&gt;%\n  separate_longer_delim(artists, \",\") %&gt;%\n  mutate(artist_name = clean_artist_string(artists)) %&gt;%\n  select(-artists)\n\nlibrary(kableExtra)\nlibrary(dplyr)\n\nSONGS %&gt;%\n  select(name, artist_name, popularity, danceability, energy, tempo) %&gt;%\n  head(10) %&gt;%\n  kable(\"html\", caption = \"🎶 Spotify Vibes: Song Characteristics Sample\") %&gt;%\n  kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\"),\n    full_width = FALSE,\n    font_size = 14\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#1DB954\", color = \"white\") %&gt;%    # header Spotify green\n  row_spec(1:10, background = \"#121212\", color = \"#d6d6d6\")                # dark mode rows\n\n\n\n🎶 Spotify Vibes: Song Characteristics Sample\n\n\nname\nartist_name\npopularity\ndanceability\nenergy\ntempo\n\n\n\n\nSingende Bataillone 1. Teil\nCarl Woitschach\n0\n0.708\n0.1950\n118.469\n\n\nFantasiestücke, Op. 111: Più tosto lento\nRobert Schumann\n0\n0.379\n0.0135\n83.972\n\n\nFantasiestücke, Op. 111: Più tosto lento\nVladimir Horowitz\n0\n0.379\n0.0135\n83.972\n\n\nChapter 1.18 - Zamek kaniowski\nSeweryn Goszczyński\n0\n0.749\n0.2200\n107.177\n\n\nBebamos Juntos - Instrumental (Remasterizado)\nFrancisco Canaro\n0\n0.781\n0.1300\n108.003\n\n\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nFrédéric Chopin\n1\n0.210\n0.2040\n62.149\n\n\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nVladimir Horowitz\n1\n0.210\n0.2040\n62.149\n\n\nScherzo a capriccio: Presto\nFelix Mendelssohn\n0\n0.424\n0.1200\n63.521\n\n\nScherzo a capriccio: Presto\nVladimir Horowitz\n0\n0.424\n0.1200\n63.521\n\n\nValse oubliée No. 1 in F-Sharp Major, S. 215/1\nFranz Liszt\n0\n0.444\n0.1970\n80.495"
  },
  {
    "objectID": "mp03.html#task-2-playlist-dataset",
    "href": "mp03.html#task-2-playlist-dataset",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "2.2 🗂️ Task 2: Playlist DataSet",
    "text": "2.2 🗂️ Task 2: Playlist DataSet\nI downloaded and loaded 1000 Spotify playlist JSON files from a GitHub mirror.\n\n\nCode\nlibrary(knitr)\nlibrary(kableExtra)\n\nload_playlists &lt;- function(){\n  files &lt;- list.files(\"data/mp03/playlists\", full.names = TRUE)\n  playlists &lt;- map(files, ~jsonlite::read_json(.x, simplifyVector = TRUE)$playlists)\n  return(playlists)\n}\n\n# Efficient approach using pre-saved playlist RDS\nall_playlists &lt;- readRDS(\"data/mp03/playlist_data_cleaned.rds\")\n\nall_playlists %&gt;%\n  select(artist_name, playlist_id, playlist_name, track_name, track_id) %&gt;%\n  head(10) %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"🎧 Sample of Playlist Data (Top 10 Tracks)\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%  # Spotify Green Header\n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")              # Dark rows with light text\n\n\n\n\n🎧 Sample of Playlist Data (Top 10 Tracks)\n\n\nartist_name\nplaylist_id\nplaylist_name\ntrack_name\ntrack_id\n\n\n\n\nMissy Elliott\n0\nThrowbacks\nLose Control (feat. Ciara & Fat Man Scoop)\n0UaMYEvWZi0ZqiDOoHU3YI\n\n\nBritney Spears\n0\nThrowbacks\nToxic\n6I9VzXrHxO9rA9A5euc8Ak\n\n\nBeyoncé\n0\nThrowbacks\nCrazy In Love\n0WqIKmW4BTrj3eJFmnCKMv\n\n\nJustin Timberlake\n0\nThrowbacks\nRock Your Body\n1AWQoqb9bSvzTjaLralEkT\n\n\nShaggy\n0\nThrowbacks\nIt Wasn't Me\n1lzr43nnXAijIGYnCT8M8H\n\n\nUsher\n0\nThrowbacks\nYeah!\n0XUfyU2QviPAs6bxSpXYG4\n\n\nUsher\n0\nThrowbacks\nMy Boo\n68vgtRHr7iZHpzGpon6Jlo\n\n\nThe Pussycat Dolls\n0\nThrowbacks\nButtons\n3BxWKCI06eQ5Od8TY2JBeA\n\n\nDestiny's Child\n0\nThrowbacks\nSay My Name\n7H6ev70Weq6DdpZyyTmUXk\n\n\nOutKast\n0\nThrowbacks\nHey Ya! - Radio Mix / Club Mix\n2PpruBYCo4H7WOBJ7Q2EwM"
  },
  {
    "objectID": "mp03.html#task-4-initial-exploration",
    "href": "mp03.html#task-4-initial-exploration",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "2.4 🔍 Task 4: Initial Exploration",
    "text": "2.4 🔍 Task 4: Initial Exploration\nI explored basic questions to understand our dataset:\n\n2.4.1 1. How many distinct tracks and artists are represented in the playlist data?\n\n\nCode\nn_distinct_tracks &lt;-  all_playlists %&gt;% distinct(track_id) %&gt;% nrow()\nn_distinct_artists &lt;- all_playlists %&gt;% distinct(artist_id) %&gt;% nrow()\n\ndistinct_summary &lt;- tibble(\n  Metric = c(\"🎵 Unique Tracks\", \"👤 Unique Artists\"),\n  Count = c(n_distinct_tracks, n_distinct_artists)\n)\n\ndistinct_summary %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"🎶 Unique Track and Artist Counts in Playlist Data\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1:2, background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n\n🎶 Unique Track and Artist Counts in Playlist Data\n\n\nMetric\nCount\n\n\n\n\n🎵 Unique Tracks\n1200590\n\n\n👤 Unique Artists\n173604\n\n\n\n\n\n\n\n\n\n\n2.4.2 2. What are the 5 most popular tracks in the playlist data?\n\n\nCode\ntop_tracks &lt;- all_playlists %&gt;%\n  count(track_name, sort = TRUE) %&gt;%\n  slice_head(n = 5)\ntop_tracks %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"🔥 Top 5 Most Popular Tracks in Playlist Data\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1:5, background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n🔥 Top 5 Most Popular Tracks in Playlist Data\n\n\ntrack_name\nn\n\n\n\n\nCloser\n19330\n\n\nHome\n14236\n\n\nHUMBLE.\n13362\n\n\nRoses\n12524\n\n\nOne Dance\n12357\n\n\n\n\n\n\n\n\n\n2.4.3 3. What is the most popular track in the playlist data that does not have a corresponding entry in the song characteristics data?\n\n\nCode\ntrack_data &lt;- read.csv(\"data/mp03/data.csv\")\ntrack_data &lt;- track_data %&gt;%\n  rename(track_id = id)\n\n\nanti_joined &lt;- all_playlists %&gt;%\n  anti_join(track_data, by = \"track_id\")\n\nmost_popular_missing &lt;- anti_joined %&gt;%\n  count(track_name, sort = TRUE) %&gt;%\n  slice_head(n = 1)\n\nmost_popular_missing %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"❓ Most Popular Track Missing from Song Characteristics Data\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1:nrow(most_popular_missing), background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n❓ Most Popular Track Missing from Song Characteristics Data\n\n\ntrack_name\nn\n\n\n\n\nOne Dance\n12357\n\n\n\n\n\n\n\n\n\n2.4.4 4. What is the most “danceable” track? How often does it appear in a playlist?\n\n\nCode\nmost_danceable &lt;- track_data %&gt;%\n  filter(!is.na(danceability)) %&gt;%\n  slice_max(danceability, n = 1)\n\ntrack_id_dance &lt;- most_danceable$track_id\n\nappearances &lt;- all_playlists %&gt;%\n  filter(track_id == track_id_dance) %&gt;%\n  nrow()\n\ndance_table &lt;- most_danceable %&gt;%\n  select(track_name = name, danceability) %&gt;%\n  mutate(playlist_appearances = appearances)\n\ndance_table %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"💃 Most Danceable Track and Playlist Appearances\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1, background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n💃 Most Danceable Track and Playlist Appearances\n\n\ntrack_name\ndanceability\nplaylist_appearances\n\n\n\n\nFunky Cold Medina\n0.988\n211\n\n\n\n\n\n\n\n\n\n2.4.5 5. Which playlist has the longest average track length?\n\n\nCode\nall_playlists %&gt;%\n  group_by(playlist_id, playlist_name) %&gt;%\n  summarise(avg_duration = mean(duration, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  slice_max(avg_duration, n = 1) %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"⏱️ Playlist with Longest Average Track Length\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1, background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n⏱️ Playlist with Longest Average Track Length\n\n\nplaylist_id\nplaylist_name\navg_duration\n\n\n\n\n462471\nMixes\n3868511\n\n\n\n\n\n\n\n\n\n2.4.6 6. What is the most popular playlist on Spotify?\n\n\nCode\nall_playlists%&gt;%\n  distinct(playlist_id, playlist_name, playlist_followers) %&gt;%\n  slice_max(playlist_followers, n = 1)%&gt;%\n  kable(\"html\", escape = FALSE, caption = \"🌟 Most Popular Playlist on Spotify\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1, background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n🌟 Most Popular Playlist on Spotify\n\n\nplaylist_id\nplaylist_name\nplaylist_followers\n\n\n\n\n746359\nBreaking Bad\n53519"
  },
  {
    "objectID": "mp03.html#task-5-visually-identifying-characteristics-of-popular-songs",
    "href": "mp03.html#task-5-visually-identifying-characteristics-of-popular-songs",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "2.5 📊 Task 5: Visually Identifying Characteristics of Popular Songs",
    "text": "2.5 📊 Task 5: Visually Identifying Characteristics of Popular Songs\nWe used several visualizations to analyze trends in popularity, danceability, release years, and more.We defined a song as “popular” if its popularity score was &gt;= 70.\n\n2.5.1 1. Correlation between popularity and playlist appearances\n\n\nCode\nlibrary(ggplot2)\n\npopularity_vs_playlists &lt;- all_playlists %&gt;%\n  inner_join(track_data, by = \"track_id\") %&gt;%\n  count(track_id, popularity, name = \"playlist_appearances\")\n\nggplot(popularity_vs_playlists, aes(x = playlist_appearances, y = popularity)) +\n  geom_point(alpha = 0.5, color = \"#FF0000\") +  # Spotify green dots\n  geom_smooth(method = \"lm\", color = \"#FFDC00\", linewidth = 1.2) +  # Yellow trend line\n  labs(\n    title = \"🎧 Track Popularity vs. Playlist Appearances\",\n    x = \"Playlist Appearances\",\n    y = \"Spotify Popularity Score\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    panel.grid.major = element_line(color = \"#333333\"),\n    panel.grid.minor = element_blank(),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#EAEAEA\"),\n    plot.title = element_text(color = \"#FF0000\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.5.2 2. Year with Most Popular Songs\n\n\nCode\npopular_songs &lt;- track_data %&gt;%\n  filter(popularity &gt;= 70)\nggplot(popular_songs, aes(x = year)) +\n  geom_bar(fill = \"#FF0000\") +\n  labs(title = \"📅 Release Years of Popular Songs (Popularity ≥ 70)\",\n       x = \"Year\", y = \"Count\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#EAEAEA\"),\n    plot.title = element_text(color = \"#FF0000\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.5.3 3. When did Danceability peak?\n\n\nCode\n  # 📊 Average Danceability per Year\n\ndanceability_trend &lt;- track_data %&gt;%\n  group_by(year) %&gt;%\n  summarise(avg_danceability = mean(danceability, na.rm = TRUE)) %&gt;%\n  filter(!is.na(year))  # remove NA years just in case\n\n# 🎨 Line chart with points\nggplot(danceability_trend, aes(x = year, y = avg_danceability)) +\n  geom_line(color = \"#FF0000\", size = 1) +                        # 🔴 YouTube Red Line\n  geom_point(color = \"#FFA500\", size = 2) +                      # 🟠 Orange points\n  labs(\n    title = \"💃 Average Danceability by Year\",\n    x = \"Year\", y = \"Avg Danceability\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#fdfdfd\", color = NA),\n    panel.grid.major = element_line(color = \"#e6e6e6\"),\n    plot.title = element_text(face = \"bold\", color = \"#111111\"),\n    axis.title = element_text(color = \"#333333\"),\n    axis.text = element_text(color = \"#222222\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.5.4 4. Most Represented Decade\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\n\ntrack_data %&gt;%\n  mutate(decade = (year %/% 10) * 10) %&gt;%\n  count(decade) %&gt;%\n  ggplot(aes(x = as.factor(decade), y = n, group = 1)) +\n  geom_area(fill = \"#FF4136\", alpha = 0.7) +\n  geom_line(color = \"#FF851B\", size = 1) +\n  geom_point(color = \"white\", size = 2) +\n  labs(title = \"📈 Growth of Tracks by Decade\", x = \"Decade\", y = \"Number of Tracks\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#CCCCCC\"),\n    plot.title = element_text(color = \"#FF851B\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.5.5 5. Key Frequency\n\n\nCode\ntrack_data %&gt;%\n  count(key) %&gt;%\n  ggplot(aes(x = factor(key), y = n)) +\n  geom_bar(stat = \"identity\", fill = \"#B10DC9\") +\n  coord_polar(start = 0) +\n  labs(title = \"🎼 Distribution of Musical Keys\", x = \"Key\", y = \"Frequency\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#EAEAEA\"),\n    plot.title = element_text(color = \"#B10DC9\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.5.6 6. Most Popular Track Lengths\n\n\nCode\nggplot(track_data, aes(x = duration_ms / 1000)) +\n  geom_histogram(binwidth = 10, fill = \"#2ECC40\") +\n  labs(title = \"⏱️ Distribution of Track Lengths\", x = \"Duration (seconds)\", y = \"Number of Tracks\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#EAEAEA\"),\n    plot.title = element_text(color = \"#2ECC40\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.5.7 7 a. Are explicit tracks more popular?\n\n\nCode\n  ggplot(track_data, aes(x = factor(explicit), y = popularity)) +\n  geom_boxplot(fill = \"#FF4136\") +\n  labs(title = \"🛑 Popularity vs Explicit Content\", x = \"Explicit (0 = No, 1 = Yes)\", y = \"Popularity\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#EAEAEA\"),\n    plot.title = element_text(color = \"#FF4136\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.5.8 7 b. Does high energy correlate with loudness?\n\n\nCode\n ggplot(track_data, aes(x = energy, y = loudness)) +\n  geom_point(alpha = 0.4, color = \"#AAAAAA\") +\n  geom_smooth(method = \"lm\", color = \"#FF0000\") +\n  labs(title = \"🔊 Energy vs Loudness\", x = \"Energy\", y = \"Loudness (dB)\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#EAEAEA\"),\n    plot.title = element_text(color = \"#FF0000\", face = \"bold\")\n  )"
  },
  {
    "objectID": "mp03.html#task-6-finding-related-songs-to-anchor-tracks",
    "href": "mp03.html#task-6-finding-related-songs-to-anchor-tracks",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "2.6 🎯🎵Task 6: Finding Related Songs to Anchor Tracks",
    "text": "2.6 🎯🎵Task 6: Finding Related Songs to Anchor Tracks\nI picked 2 anchor songs: - “HUMBLE.” by Kendrick Lamar - “Antidote” by Travis Scott.\n\n\n\n\nI used 5 heuristics to generate candidates for My final playlist:\n\nSongs that appear in playlists with “HUMBLE.” or “Antidote”\nSongs in similar key and tempo for seamless transitions\nSongs by the same artists (Kendrick Lamar & Travis Scott)\nSongs with similar energy and danceability\nSongs with similar valence (our custom heuristic!)\n\n\n\nCode\ntrack_data &lt;- read.csv(\"data/mp03/data.csv\") %&gt;%\n  rename(track_id = id)\n\nclean_artist_string &lt;- function(x) {\n  x |&gt;\n    str_replace_all(\"\\\\['\", \"\") |&gt;\n    str_replace_all(\"'\\\\]\", \"\") |&gt;\n    str_replace_all(\"[ ]?'\", \"\") |&gt;\n    str_replace_all(\"[ ]*,[ ]*\", \",\")\n}\n\ntrack_data_cleaned &lt;- track_data %&gt;%\n  separate_longer_delim(artists, \",\") %&gt;%\n  mutate(artist_name = clean_artist_string(artists)) %&gt;%\n  select(-artists)\n\n\nanchor_ids &lt;- all_playlists %&gt;%\n  filter(track_name %in% c(\"HUMBLE.\", \"Antidote\")) %&gt;%\n  pull(track_id) %&gt;%\n  unique()\n\nanchor_songs &lt;- track_data_cleaned %&gt;%\n  filter((name == \"HUMBLE.\" & artist_name == \"Kendrick Lamar\") |\n         (name == \"Antidote\" & artist_name == \"Travis Scott\")) %&gt;%\n  select(track_id, track_name = name, artist_name, popularity, danceability, energy, tempo, key) %&gt;%\n  distinct()\n\nknitr::kable(anchor_songs, \"html\", escape = FALSE, caption = \"🎯 Anchor Songs: HUMBLE. by Kendrick Lamar and Antidote by Travis Scott\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%   \n  row_spec(1:nrow(anchor_songs), background = \"#121212\", color = \"#EAEAEA\") \n\n\n\n🎯 Anchor Songs: HUMBLE. by Kendrick Lamar and Antidote by Travis Scott\n\n\ntrack_id\ntrack_name\nartist_name\npopularity\ndanceability\nenergy\ntempo\nkey\n\n\n\n\n1wHZx0LgzFHyeIZkUydNXq\nAntidote\nTravis Scott\n78\n0.713\n0.526\n131.050\n1\n\n\n7KXjTSCq5nL1LoYtL7XAwS\nHUMBLE.\nKendrick Lamar\n83\n0.908\n0.621\n150.011\n1\n\n\n\n\n\n\n\n\n2.6.1 Heuristic 1: Co-occurrence\n\n\nCode\nco_occur_songs &lt;- all_playlists %&gt;% filter(track_id %in% anchor_ids) %&gt;% pull(playlist_id)\nrelated_songs &lt;- all_playlists %&gt;%\n  filter(playlist_id %in% co_occur_songs, !track_id %in% anchor_ids) %&gt;%\n  select(track_id, track_name, artist_name) %&gt;% distinct()\n\nknitr::kable(head(related_songs, 10), \"html\", escape = FALSE, caption = \"🔗 Heuristic 1: Songs from Same Playlists\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%   \n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")               \n\n\n\n🔗 Heuristic 1: Songs from Same Playlists\n\n\ntrack_id\ntrack_name\nartist_name\n\n\n\n\n1IAzD1muglOxOcPbUHs70R\nWhatever You Like\nT.I.\n\n\n6mxyfdyF4LD7PctU3UNyjF\nTouch The Sky\nKanye West\n\n\n1B87ZDrD3Pno9hS4stamWO\nComin Out Strong\nFuture\n\n\n4NTWZqvfQTlOMitlVn6tew\nThe Show Goes On\nLupe Fiasco\n\n\n5yJ0kIxrrYra3QexH58UVj\nKeep It Real\nKYLE\n\n\n3WL6yCfh0zw2MxVSWSe0G1\nShe Wanna Party (feat. Millie Go Lightly)\nYoung Thug\n\n\n6mLfR7fHVDcCKpLwGLWCWw\nF With U\nKid Ink\n\n\n4vv1KjUzPwrtDbozizSfQc\nDon't Quit\nDJ Khaled\n\n\n6gBFPUFcJLzWGx4lenP6h2\ngoosebumps\nTravis Scott\n\n\n59J5nzL1KniFHnU120dQzt\nwokeuplikethis*\nPlayboi Carti\n\n\n\n\n\n\n\n\n\n2.6.2 Heuristic 2: Key & Tempo Match\n\n\nCode\nplaylist_subset &lt;- all_playlists %&gt;%\n  filter(track_name %in% c(\"HUMBLE.\", \"Antidote\"))\n\n\nplaylist_full &lt;- playlist_subset %&gt;%\n  left_join(track_data_cleaned, by = \"track_id\")\n\nanchor_keys_tempos &lt;- playlist_full %&gt;%\n  filter(track_id %in% anchor_ids) %&gt;%\n  distinct(key, tempo)\n\nkeys &lt;- anchor_keys_tempos$key\ntempo_range &lt;- range(anchor_keys_tempos$tempo, na.rm = TRUE)\n\nharmonically_similar_songs &lt;- track_data_cleaned %&gt;%\n  filter(key %in% keys,\n         tempo &gt;= tempo_range[1] - 5,\n         tempo &lt;= tempo_range[2] + 5) %&gt;%\n  select(track_id, track_name = name, artist_name) %&gt;%\n  distinct()\n\nknitr::kable(head(harmonically_similar_songs, 10), \"html\", escape = FALSE, caption = \"🎼 Heuristic 2: Same Key and Tempo\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;% \n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n🎼 Heuristic 2: Same Key and Tempo\n\n\ntrack_id\ntrack_name\nartist_name\n\n\n\n\n6OJjveoYwJdIt76y0Pxpxw\nPer aspera ad astra\nCarl Woitschach\n\n\n6ZWi1fuonJCUlt4p6o9Uzs\nLa Noce À Rebecca\nPerchicot\n\n\n6bKJYhoaWIohnhspidbdW7\nChapter 2.11 - Zamek kaniowski\nSeweryn Goszczyński\n\n\n71FaVeFy9ZOiQRY4yOijey\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nFrédéric Chopin\n\n\n71FaVeFy9ZOiQRY4yOijey\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nVladimir Horowitz\n\n\n722u6arjn98Ygql8TyqKZz\nNocturne in C-Sharp Minor, Op. 27, No. 1 - 2001 Remastered\nFrédéric Chopin\n\n\n722u6arjn98Ygql8TyqKZz\nNocturne in C-Sharp Minor, Op. 27, No. 1 - 2001 Remastered\nVladimir Horowitz\n\n\n747Dowy6MecKApVkFH1asI\nQuema Esas Cartas - Remasterizado\nIgnacio Corsini\n\n\n43NCVFtFp0pBCEGdmJI5GQ\nEsclavas blancas\nCarlos Gardel\n\n\n4GcaZeQH8XpwlXTVdf8T3y\nTosoi Sou Eipan S'agapo\nRenos Talmas\n\n\n\n\n\n\n\n\n\n2.6.3 Heuristic 3: Same Artist\n\n\nCode\nartist_matches &lt;- track_data_cleaned %&gt;%\n  filter(artist_name %in% c(\"Kendrick Lamar\", \"Travis Scott\")) %&gt;%\n  select(track_id, track_name = name, artist_name)\n\nknitr::kable(head(artist_matches, 10), \"html\", escape = FALSE, caption = \"👤 Heuristic 3: Same Artist\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%   \n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")             \n\n\n\n👤 Heuristic 3: Same Artist\n\n\ntrack_id\ntrack_name\nartist_name\n\n\n\n\n3L2YOO6dDiB91M1AbQ0CCR\nNo Make-Up (Her Vice) (feat. Colin Munroe)\nKendrick Lamar\n\n\n0iMN420Q45isZVNlAqzPTW\nLove Game\nKendrick Lamar\n\n\n3jg8bevUzKYONDLBBQquif\nNever Catch Me\nTravis Scott\n\n\n1WT11QmhZutciEv1NsHt1R\nMortal Man\nKendrick Lamar\n\n\n3dtBVBClM5ms0qCBBrqpUb\nWasted (feat. Juicy J)\nTravis Scott\n\n\n79wTHFxVJXRrR5afZeBd16\nUber Everywhere (feat. Travis Scott)\nTravis Scott\n\n\n42k9e2hgl98IdgkXLg4pxs\nNo More (feat. Travis Scott, Kodak Black & 21 Savage)\nTravis Scott\n\n\n1S6NpdvFXqHZfPUUEOIjtG\nOpposites Attract (Tomorrow W/O Her)\nKendrick Lamar\n\n\n6m49tZii9UUttOgDozxjI1\nThe City\nKendrick Lamar\n\n\n5H25xsIuRWUI8GwcoAoeSG\nPiss On Your Grave (feat. Kanye West)\nTravis Scott\n\n\n\n\n\n\n\n\n\n2.6.4 Heuristic 4: Acoustic/Dance/Energy\n\n\nCode\nanchor_traits &lt;- track_data_cleaned %&gt;%\n  filter(name %in% c(\"HUMBLE.\", \"Antidote\")) %&gt;%\n  summarise(\n    danceability_min = min(danceability) - 0.1,\n    danceability_max = max(danceability) + 0.1,\n    energy_min = min(energy) - 0.1,\n    energy_max = max(energy) + 0.1\n  )\nsimilar_trait_songs &lt;- track_data_cleaned %&gt;%\n  filter(danceability &gt;= anchor_traits$danceability_min,\n         danceability &lt;= anchor_traits$danceability_max,\n         energy &gt;= anchor_traits$energy_min,\n         energy &lt;= anchor_traits$energy_max) %&gt;%\n  select(track_id, track_name = name, artist_name)\n\nknitr::kable(head(similar_trait_songs, 10), \"html\", escape = FALSE, caption = \"🎚️ Heuristic 4: Similar Danceability & Energy\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%   \n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")         \n\n\n\n🎚️ Heuristic 4: Similar Danceability & Energy\n\n\ntrack_id\ntrack_name\nartist_name\n\n\n\n\n6KbQ3uYMLKb5jDxLF7wYDD\nSingende Bataillone 1. Teil\nCarl Woitschach\n\n\n6L63VW0PibdM1HDSBoqnoM\nChapter 1.18 - Zamek kaniowski\nSeweryn Goszczyński\n\n\n6M94FkXd15sOAOQYRnWPN8\nBebamos Juntos - Instrumental (Remasterizado)\nFrancisco Canaro\n\n\n6NxAf7M8DNHOBTmEd3JSO5\nScherzo a capriccio: Presto\nFelix Mendelssohn\n\n\n6NxAf7M8DNHOBTmEd3JSO5\nScherzo a capriccio: Presto\nVladimir Horowitz\n\n\n6O0puPuyrxPjDTHDUgsWI7\nValse oubliée No. 1 in F-Sharp Major, S. 215/1\nFranz Liszt\n\n\n6O0puPuyrxPjDTHDUgsWI7\nValse oubliée No. 1 in F-Sharp Major, S. 215/1\nVladimir Horowitz\n\n\n6OJjveoYwJdIt76y0Pxpxw\nPer aspera ad astra\nCarl Woitschach\n\n\n6OaJ8Bh7lsBeYoBmwmo2nh\nMoneda Corriente - Remasterizado\nFrancisco Canaro\n\n\n6OaJ8Bh7lsBeYoBmwmo2nh\nMoneda Corriente - Remasterizado\nCharlo\n\n\n\n\n\n\n\n\n\n2.6.5 Heuristic 5: Valence Similarity\n\n\nCode\nanchor_valence &lt;- track_data_cleaned %&gt;%\n  filter(name %in% c(\"HUMBLE.\", \"Antidote\")) %&gt;%\n  summarise(valence_min = min(valence, na.rm = TRUE) - 0.1,\n            valence_max = max(valence, na.rm = TRUE) + 0.1)\ncustom_heuristic_songs &lt;- track_data_cleaned %&gt;%\n  filter(valence &gt;= anchor_valence$valence_min,\n         valence &lt;= anchor_valence$valence_max) %&gt;%\n  select(track_id, track_name = name, artist_name)\n\nknitr::kable(head(custom_heuristic_songs, 10), \"html\", escape = FALSE, caption = \"💖 Heuristic 5: Similar Valence (Mood)\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%  \n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\") \n\n\n\n💖 Heuristic 5: Similar Valence (Mood)\n\n\ntrack_id\ntrack_name\nartist_name\n\n\n\n\n6KuQTIu1KoTTkLXKrwlLPV\nFantasiestücke, Op. 111: Più tosto lento\nRobert Schumann\n\n\n6KuQTIu1KoTTkLXKrwlLPV\nFantasiestücke, Op. 111: Più tosto lento\nVladimir Horowitz\n\n\n6N6tiFZ9vLTSOIxkj8qKrd\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nFrédéric Chopin\n\n\n6N6tiFZ9vLTSOIxkj8qKrd\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nVladimir Horowitz\n\n\n6NxAf7M8DNHOBTmEd3JSO5\nScherzo a capriccio: Presto\nFelix Mendelssohn\n\n\n6NxAf7M8DNHOBTmEd3JSO5\nScherzo a capriccio: Presto\nVladimir Horowitz\n\n\n6O0puPuyrxPjDTHDUgsWI7\nValse oubliée No. 1 in F-Sharp Major, S. 215/1\nFranz Liszt\n\n\n6O0puPuyrxPjDTHDUgsWI7\nValse oubliée No. 1 in F-Sharp Major, S. 215/1\nVladimir Horowitz\n\n\n6OaJ8Bh7lsBeYoBmwmo2nh\nMoneda Corriente - Remasterizado\nFrancisco Canaro\n\n\n6OaJ8Bh7lsBeYoBmwmo2nh\nMoneda Corriente - Remasterizado\nCharlo\n\n\n\n\n\n\n\n\n\n2.6.6 Combined Playlist Candidates\n\n\nCode\nfinal_playlist &lt;- bind_rows(\n  related_songs,\n  harmonically_similar_songs,\n  artist_matches,\n  similar_trait_songs,\n  custom_heuristic_songs\n) %&gt;%\n  distinct() %&gt;%\n  filter(!track_id %in% anchor_ids)\n\nknitr::kable(head(final_playlist, 10), \"html\", escape = FALSE, caption = \"🎶 Combined Playlist Candidates\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;% \n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")               \n\n\n\n🎶 Combined Playlist Candidates\n\n\ntrack_id\ntrack_name\nartist_name\n\n\n\n\n1IAzD1muglOxOcPbUHs70R\nWhatever You Like\nT.I.\n\n\n6mxyfdyF4LD7PctU3UNyjF\nTouch The Sky\nKanye West\n\n\n1B87ZDrD3Pno9hS4stamWO\nComin Out Strong\nFuture\n\n\n4NTWZqvfQTlOMitlVn6tew\nThe Show Goes On\nLupe Fiasco\n\n\n5yJ0kIxrrYra3QexH58UVj\nKeep It Real\nKYLE\n\n\n3WL6yCfh0zw2MxVSWSe0G1\nShe Wanna Party (feat. Millie Go Lightly)\nYoung Thug\n\n\n6mLfR7fHVDcCKpLwGLWCWw\nF With U\nKid Ink\n\n\n4vv1KjUzPwrtDbozizSfQc\nDon't Quit\nDJ Khaled\n\n\n6gBFPUFcJLzWGx4lenP6h2\ngoosebumps\nTravis Scott\n\n\n59J5nzL1KniFHnU120dQzt\nwokeuplikethis*\nPlayboi Carti\n\n\n\n\n\n\n\nFrom this, I created a pool of over 200k potential songs and shortlisted 20 top candidates.\n\n\nCode\nfinal_playlist_enriched &lt;- final_playlist %&gt;%\n  left_join(track_data_cleaned, by = \"track_id\") %&gt;%\n  rename(artist_name = artist_name.x) \n\nnot_popular_songs &lt;- final_playlist_enriched %&gt;%\n  filter(popularity &lt; 70) %&gt;%\n  select(track_name, artist_name, popularity) %&gt;%\n  distinct()\n\nnrow(not_popular_songs)\n\n\n[1] 213781\n\n\nCode\nplaylist_candidates &lt;- final_playlist_enriched %&gt;%\n  filter(!track_id %in% anchor_ids) %&gt;%\n  select(track_id, track_name, artist_name, popularity, danceability, energy, tempo, key) %&gt;%\n  distinct() %&gt;%\n  arrange(desc(popularity)) %&gt;%\n  slice_head(n = 20)\n\nknitr::kable(\n  playlist_candidates,\n  \"html\",\n  caption = \"🎧 Top 20 Playlist Candidates After Applying Heuristics\",\n  escape = FALSE\n) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%   \n  row_spec(1:20, background = \"#1C1C1C\", color = \"#EAEAEA\")             \n\n\n\n🎧 Top 20 Playlist Candidates After Applying Heuristics\n\n\ntrack_id\ntrack_name\nartist_name\npopularity\ndanceability\nenergy\ntempo\nkey\n\n\n\n\n0VjIjW4GlUZAMYd2vXMi3b\nBlinding Lights\nThe Weeknd\n100\n0.514\n0.730\n171.005\n1\n\n\n7ytR5pFWmSjzHJIeQkgog4\nROCKSTAR (feat. Roddy Ricch)\nDaBaby\n99\n0.746\n0.690\n89.977\n11\n\n\n7ytR5pFWmSjzHJIeQkgog4\nROCKSTAR (feat. Roddy Ricch)\nRoddy Ricch\n99\n0.746\n0.690\n89.977\n11\n\n\n7eJMfftS33KTjuF7lTsMCx\ndeath bed (coffee for your head) (feat. beabadoobee)\nPowfu\n97\n0.726\n0.431\n144.026\n8\n\n\n7eJMfftS33KTjuF7lTsMCx\ndeath bed (coffee for your head) (feat. beabadoobee)\nbeabadoobee\n97\n0.726\n0.431\n144.026\n8\n\n\n39Yp9wwQiSRIDOvrVg7mbk\nTHE SCOTTS\nTravis Scott\n96\n0.716\n0.537\n129.979\n0\n\n\n39Yp9wwQiSRIDOvrVg7mbk\nTHE SCOTTS\nTHE SCOTTS\n96\n0.716\n0.537\n129.979\n0\n\n\n39Yp9wwQiSRIDOvrVg7mbk\nTHE SCOTTS\nKid Cudi\n96\n0.716\n0.537\n129.979\n0\n\n\n0nbXyq5TXYPCO7pr3N8S4I\nThe Box\nRoddy Ricch\n95\n0.896\n0.586\n116.971\n10\n\n\n4nK5YrxbMGZstTLbvj6Gxw\nSupalonely\nBENEE\n95\n0.863\n0.631\n128.977\n7\n\n\n4nK5YrxbMGZstTLbvj6Gxw\nSupalonely\nGus Dapperton\n95\n0.863\n0.631\n128.977\n7\n\n\n62aP9fBQKYKxi7PDXwcUAS\nily (i love you baby) (feat. Emilee)\nSurf Mesa\n95\n0.674\n0.774\n112.050\n11\n\n\n62aP9fBQKYKxi7PDXwcUAS\nily (i love you baby) (feat. Emilee)\nEmilee\n95\n0.674\n0.774\n112.050\n11\n\n\n127QTOFJsJQp5LbJbu3A1y\nToosie Slide\nDrake\n95\n0.834\n0.454\n81.618\n1\n\n\n24ySl2hOPGCDcxBxFIqWBu\nRain On Me (with Ariana Grande)\nLady Gaga\n94\n0.672\n0.855\n123.056\n9\n\n\n24ySl2hOPGCDcxBxFIqWBu\nRain On Me (with Ariana Grande)\nAriana Grande\n94\n0.672\n0.855\n123.056\n9\n\n\n2XU0oxnq2qxCpomAAuJY8K\nDance Monkey\nTones And I\n94\n0.824\n0.588\n98.027\n6\n\n\n5RqR4ZCCKJDcBLIn4sih9l\nParty Girl\nStaySolidRocky\n94\n0.728\n0.431\n130.022\n6\n\n\n4NhDYoQTYCdWHTvlbGVgwo\nGOOBA\n6ix9ine\n94\n0.611\n0.688\n178.462\n1\n\n\n4HBZA5flZLE435QTztThqH\nStuck with U (with Justin Bieber)\nAriana Grande\n94\n0.597\n0.450\n178.765\n8\n\n\n\n\n\n\n\nI combined results, removed duplicates, and curated top 12 songs, including: - At least 2 unfamiliar songs - At least 3 not popular (popularity &lt; 70)"
  },
  {
    "objectID": "mp03.html#listen-to-the-playlist",
    "href": "mp03.html#listen-to-the-playlist",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "2.8 🎼 Listen to the Playlist",
    "text": "2.8 🎼 Listen to the Playlist\nHere’s the final curated 12-song playlist for Midnight Ascension, embedded via Spotify.\n\n🎵 Best experienced with headphones."
  },
  {
    "objectID": "mp03.html#task-7-curate-and-analyze-playlist",
    "href": "mp03.html#task-7-curate-and-analyze-playlist",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "2.9 🔮 Task 7: Curate and Analyze Playlist",
    "text": "2.9 🔮 Task 7: Curate and Analyze Playlist\nI named My playlist “Midnight Ascension”, combining high-energy and mood-driven tracks. I used line plots to visualize dynamics of: - Energy - Danceability - Tempo (scaled) - Popularity This helped Me validate flow: our playlist gently rises in intensity, dips slightly in mood, then finishes on a high."
  },
  {
    "objectID": "mp03.html#data-acquisition-and-data-preparation",
    "href": "mp03.html#data-acquisition-and-data-preparation",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "",
    "text": "In this task, I loaded and cleaned the main Spotify track dataset containing song characteristics like tempo, danceability, energy, and popularity. I also cleaned the artists column to split multiple artists across rows.\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(readr)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(dplyr)\n\nclean_artist_string &lt;- function(x){\n  x |&gt;\n    str_replace_all(\"\\\\['\", \"\") |&gt;\n    str_replace_all(\"'\\\\]\", \"\") |&gt;\n    str_replace_all(\"[ ]?'\", \"\") |&gt;\n    str_replace_all(\"[ ]*,[ ]*\", \",\")\n}\n\nSONGS &lt;- read_csv(\"data/mp03/data.csv\") %&gt;%\n  separate_longer_delim(artists, \",\") %&gt;%\n  mutate(artist_name = clean_artist_string(artists)) %&gt;%\n  select(-artists)\n\nSONGS %&gt;%\n  select(name, artist_name, popularity, danceability, energy, tempo) %&gt;%\n  head(10) %&gt;%\n  kable(\"html\", caption = \"🎶 Spotify Vibes: Song Characteristics Sample\") %&gt;%\n  kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\"),\n    full_width = FALSE,\n    font_size = 14\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%    # header Spotify green\n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")                # dark mode rows\n\n\n\n🎶 Spotify Vibes: Song Characteristics Sample\n\n\nname\nartist_name\npopularity\ndanceability\nenergy\ntempo\n\n\n\n\nSingende Bataillone 1. Teil\nCarl Woitschach\n0\n0.708\n0.1950\n118.469\n\n\nFantasiestücke, Op. 111: Più tosto lento\nRobert Schumann\n0\n0.379\n0.0135\n83.972\n\n\nFantasiestücke, Op. 111: Più tosto lento\nVladimir Horowitz\n0\n0.379\n0.0135\n83.972\n\n\nChapter 1.18 - Zamek kaniowski\nSeweryn Goszczyński\n0\n0.749\n0.2200\n107.177\n\n\nBebamos Juntos - Instrumental (Remasterizado)\nFrancisco Canaro\n0\n0.781\n0.1300\n108.003\n\n\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nFrédéric Chopin\n1\n0.210\n0.2040\n62.149\n\n\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nVladimir Horowitz\n1\n0.210\n0.2040\n62.149\n\n\nScherzo a capriccio: Presto\nFelix Mendelssohn\n0\n0.424\n0.1200\n63.521\n\n\nScherzo a capriccio: Presto\nVladimir Horowitz\n0\n0.424\n0.1200\n63.521\n\n\nValse oubliée No. 1 in F-Sharp Major, S. 215/1\nFranz Liszt\n0\n0.444\n0.1970\n80.495\n\n\n\n\n\n\n\n\n\n\nI downloaded and loaded 1000 Spotify playlist JSON files from a GitHub mirror.\n\n\nCode\nlibrary(knitr)\nlibrary(kableExtra)\n\nload_playlists &lt;- function(){\n  files &lt;- list.files(\"data/mp03/playlists\", full.names = TRUE)\n  playlists &lt;- map(files, ~jsonlite::read_json(.x, simplifyVector = TRUE)$playlists)\n  return(playlists)\n}\n\n# ✅ Efficient approach using pre-saved playlist RDS\nall_playlists &lt;- readRDS(\"data/mp03/playlist_data_cleaned.rds\")\n\n# Show a sample of the playlist data\n\nall_playlists %&gt;%\n  select(artist_name, playlist_id, playlist_name, track_name, track_id) %&gt;%\n  head(10) %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"🎧 Sample of Playlist Data (Top 10 Tracks)\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%  # Spotify Green Header\n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")              # Dark rows with light text\n\n\n\n\n🎧 Sample of Playlist Data (Top 10 Tracks)\n\n\nartist_name\nplaylist_id\nplaylist_name\ntrack_name\ntrack_id\n\n\n\n\nMissy Elliott\n0\nThrowbacks\nLose Control (feat. Ciara & Fat Man Scoop)\n0UaMYEvWZi0ZqiDOoHU3YI\n\n\nBritney Spears\n0\nThrowbacks\nToxic\n6I9VzXrHxO9rA9A5euc8Ak\n\n\nBeyoncé\n0\nThrowbacks\nCrazy In Love\n0WqIKmW4BTrj3eJFmnCKMv\n\n\nJustin Timberlake\n0\nThrowbacks\nRock Your Body\n1AWQoqb9bSvzTjaLralEkT\n\n\nShaggy\n0\nThrowbacks\nIt Wasn't Me\n1lzr43nnXAijIGYnCT8M8H\n\n\nUsher\n0\nThrowbacks\nYeah!\n0XUfyU2QviPAs6bxSpXYG4\n\n\nUsher\n0\nThrowbacks\nMy Boo\n68vgtRHr7iZHpzGpon6Jlo\n\n\nThe Pussycat Dolls\n0\nThrowbacks\nButtons\n3BxWKCI06eQ5Od8TY2JBeA\n\n\nDestiny's Child\n0\nThrowbacks\nSay My Name\n7H6ev70Weq6DdpZyyTmUXk\n\n\nOutKast\n0\nThrowbacks\nHey Ya! - Radio Mix / Club Mix\n2PpruBYCo4H7WOBJ7Q2EwM\n\n\n\n\n\n\n\n\n\n\n\nSince the playlist data was nested, I had to flatten it to a tidy rectangular format.\n\n\nCode\nall_playlists %&gt;%\n  select(playlist_name, playlist_id, playlist_followers, track_name, artist_name, duration) %&gt;%\n  head(10) %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"🎵 Rectangular Playlist Data Sample\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")    \n\n\n\n\n🎵 Rectangular Playlist Data Sample\n\n\nplaylist_name\nplaylist_id\nplaylist_followers\ntrack_name\nartist_name\nduration\n\n\n\n\nThrowbacks\n0\n1\nLose Control (feat. Ciara & Fat Man Scoop)\nMissy Elliott\n226863\n\n\nThrowbacks\n0\n1\nToxic\nBritney Spears\n198800\n\n\nThrowbacks\n0\n1\nCrazy In Love\nBeyoncé\n235933\n\n\nThrowbacks\n0\n1\nRock Your Body\nJustin Timberlake\n267266\n\n\nThrowbacks\n0\n1\nIt Wasn't Me\nShaggy\n227600\n\n\nThrowbacks\n0\n1\nYeah!\nUsher\n250373\n\n\nThrowbacks\n0\n1\nMy Boo\nUsher\n223440\n\n\nThrowbacks\n0\n1\nButtons\nThe Pussycat Dolls\n225560\n\n\nThrowbacks\n0\n1\nSay My Name\nDestiny's Child\n271333\n\n\nThrowbacks\n0\n1\nHey Ya! - Radio Mix / Club Mix\nOutKast\n235213\n\n\n\n\n\n\n\n\n\n\n\nI explored basic questions to understand our dataset:\n\n\n\n\nCode\nn_distinct_tracks &lt;-  all_playlists %&gt;% distinct(track_id) %&gt;% nrow()\nn_distinct_artists &lt;- all_playlists %&gt;% distinct(artist_id) %&gt;% nrow()\n\n# Convert to a data frame for display\ndistinct_summary &lt;- tibble(\n  Metric = c(\"🎵 Unique Tracks\", \"👤 Unique Artists\"),\n  Count = c(n_distinct_tracks, n_distinct_artists)\n)\n\n# Display with Spotify-inspired styling\ndistinct_summary %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"🎶 Unique Track and Artist Counts in Playlist Data\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1:2, background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n\n🎶 Unique Track and Artist Counts in Playlist Data\n\n\nMetric\nCount\n\n\n\n\n🎵 Unique Tracks\n1200590\n\n\n👤 Unique Artists\n173604\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntop_tracks &lt;- all_playlists %&gt;%\n  count(track_name, sort = TRUE) %&gt;%\n  slice_head(n = 5)\ntop_tracks %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"🔥 Top 5 Most Popular Tracks in Playlist Data\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1:5, background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n🔥 Top 5 Most Popular Tracks in Playlist Data\n\n\ntrack_name\nn\n\n\n\n\nCloser\n19330\n\n\nHome\n14236\n\n\nHUMBLE.\n13362\n\n\nRoses\n12524\n\n\nOne Dance\n12357\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntrack_data &lt;- read.csv(\"data/mp03/data.csv\")\ntrack_data &lt;- track_data %&gt;%\n  rename(track_id = id)\n\n\nanti_joined &lt;- all_playlists %&gt;%\n  anti_join(track_data, by = \"track_id\")\n\nmost_popular_missing &lt;- anti_joined %&gt;%\n  count(track_name, sort = TRUE) %&gt;%\n  slice_head(n = 1)\n\nmost_popular_missing %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"❓ Most Popular Track Missing from Song Characteristics Data\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1:nrow(most_popular_missing), background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n❓ Most Popular Track Missing from Song Characteristics Data\n\n\ntrack_name\nn\n\n\n\n\nOne Dance\n12357\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n  # Find the most danceable track\nmost_danceable &lt;- track_data %&gt;%\n  filter(!is.na(danceability)) %&gt;%\n  slice_max(danceability, n = 1)\n\n# Get how often it appears in playlists\ntrack_id_dance &lt;- most_danceable$track_id\n\nappearances &lt;- all_playlists %&gt;%\n  filter(track_id == track_id_dance) %&gt;%\n  nrow()\n\n# Create styled summary table\ndance_table &lt;- most_danceable %&gt;%\n  select(track_name = name, danceability) %&gt;%\n  mutate(playlist_appearances = appearances)\n\n# Render table nicely\ndance_table %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"💃 Most Danceable Track and Playlist Appearances\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1, background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n💃 Most Danceable Track and Playlist Appearances\n\n\ntrack_name\ndanceability\nplaylist_appearances\n\n\n\n\nFunky Cold Medina\n0.988\n211\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nall_playlists %&gt;%\n  group_by(playlist_id, playlist_name) %&gt;%\n  summarise(avg_duration = mean(duration, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  slice_max(avg_duration, n = 1) %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"⏱️ Playlist with Longest Average Track Length\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1, background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n⏱️ Playlist with Longest Average Track Length\n\n\nplaylist_id\nplaylist_name\navg_duration\n\n\n\n\n462471\nMixes\n3868511\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nall_playlists%&gt;%\n  distinct(playlist_id, playlist_name, playlist_followers) %&gt;%\n  slice_max(playlist_followers, n = 1)%&gt;%\n  kable(\"html\", escape = FALSE, caption = \"🌟 Most Popular Playlist on Spotify\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1, background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n🌟 Most Popular Playlist on Spotify\n\n\nplaylist_id\nplaylist_name\nplaylist_followers\n\n\n\n\n746359\nBreaking Bad\n53519\n\n\n\n\n\n\n\n\n\n\n\nWe used several visualizations to analyze trends in popularity, danceability, release years, and more.We defined a song as “popular” if its popularity score was &gt;= 70.\n\n\n\n\nCode\nlibrary(ggplot2)\n\n# Join and count playlist appearances by track\npopularity_vs_playlists &lt;- all_playlists %&gt;%\n  inner_join(track_data, by = \"track_id\") %&gt;%\n  count(track_id, popularity, name = \"playlist_appearances\")\n\n# Styled plot\nggplot(popularity_vs_playlists, aes(x = playlist_appearances, y = popularity)) +\n  geom_point(alpha = 0.5, color = \"#FF0000\") +  # Spotify green dots\n  geom_smooth(method = \"lm\", color = \"#FFDC00\", linewidth = 1.2) +  # Yellow trend line\n  labs(\n    title = \"🎧 Track Popularity vs. Playlist Appearances\",\n    x = \"Playlist Appearances\",\n    y = \"Spotify Popularity Score\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    panel.grid.major = element_line(color = \"#333333\"),\n    panel.grid.minor = element_blank(),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#EAEAEA\"),\n    plot.title = element_text(color = \"#FF0000\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npopular_songs &lt;- track_data %&gt;%\n  filter(popularity &gt;= 70)\nggplot(popular_songs, aes(x = year)) +\n  geom_bar(fill = \"#FF0000\") +\n  labs(title = \"📅 Release Years of Popular Songs (Popularity ≥ 70)\",\n       x = \"Year\", y = \"Count\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#EAEAEA\"),\n    plot.title = element_text(color = \"#FF0000\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n  # 📊 Average Danceability per Year\n\ndanceability_trend &lt;- track_data %&gt;%\n  group_by(year) %&gt;%\n  summarise(avg_danceability = mean(danceability, na.rm = TRUE)) %&gt;%\n  filter(!is.na(year))  # remove NA years just in case\n\n# 🎨 Line chart with points\nggplot(danceability_trend, aes(x = year, y = avg_danceability)) +\n  geom_line(color = \"#FF0000\", size = 1) +                        # 🔴 YouTube Red Line\n  geom_point(color = \"#FFA500\", size = 2) +                      # 🟠 Orange points\n  labs(\n    title = \"💃 Average Danceability by Year\",\n    x = \"Year\", y = \"Avg Danceability\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#fdfdfd\", color = NA),\n    panel.grid.major = element_line(color = \"#e6e6e6\"),\n    plot.title = element_text(face = \"bold\", color = \"#111111\"),\n    axis.title = element_text(color = \"#333333\"),\n    axis.text = element_text(color = \"#222222\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\n\ntrack_data %&gt;%\n  mutate(decade = (year %/% 10) * 10) %&gt;%\n  count(decade) %&gt;%\n  ggplot(aes(x = as.factor(decade), y = n, group = 1)) +\n  geom_area(fill = \"#FF4136\", alpha = 0.7) +\n  geom_line(color = \"#FF851B\", size = 1) +\n  geom_point(color = \"white\", size = 2) +\n  labs(title = \"📈 Growth of Tracks by Decade\", x = \"Decade\", y = \"Number of Tracks\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#CCCCCC\"),\n    plot.title = element_text(color = \"#FF851B\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntrack_data %&gt;%\n  count(key) %&gt;%\n  ggplot(aes(x = factor(key), y = n)) +\n  geom_bar(stat = \"identity\", fill = \"#B10DC9\") +\n  coord_polar(start = 0) +\n  labs(title = \"🎼 Distribution of Musical Keys\", x = \"Key\", y = \"Frequency\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#EAEAEA\"),\n    plot.title = element_text(color = \"#B10DC9\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(track_data, aes(x = duration_ms / 1000)) +\n  geom_histogram(binwidth = 10, fill = \"#2ECC40\") +\n  labs(title = \"⏱️ Distribution of Track Lengths\", x = \"Duration (seconds)\", y = \"Number of Tracks\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#EAEAEA\"),\n    plot.title = element_text(color = \"#2ECC40\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n  ggplot(track_data, aes(x = factor(explicit), y = popularity)) +\n  geom_boxplot(fill = \"#FF4136\") +\n  labs(title = \"🛑 Popularity vs Explicit Content\", x = \"Explicit (0 = No, 1 = Yes)\", y = \"Popularity\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#EAEAEA\"),\n    plot.title = element_text(color = \"#FF4136\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n ggplot(track_data, aes(x = energy, y = loudness)) +\n  geom_point(alpha = 0.4, color = \"#AAAAAA\") +\n  geom_smooth(method = \"lm\", color = \"#FF0000\") +\n  labs(title = \"🔊 Energy vs Loudness\", x = \"Energy\", y = \"Loudness (dB)\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.background = element_rect(fill = \"#121212\", color = NA),\n    panel.background = element_rect(fill = \"#121212\", color = NA),\n    axis.text = element_text(color = \"#EAEAEA\"),\n    axis.title = element_text(color = \"#EAEAEA\"),\n    plot.title = element_text(color = \"#FF0000\", face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nI picked 2 anchor songs: - “HUMBLE.” by Kendrick Lamar - “Antidote” by Travis Scott\nI used 5 heuristics to generate candidates for My final playlist:\n\nSongs that appear in playlists with “HUMBLE.” or “Antidote”\nSongs in similar key and tempo for seamless transitions\nSongs by the same artists (Kendrick Lamar & Travis Scott)\nSongs with similar energy and danceability\nSongs with similar valence (our custom heuristic!)\n\n\n\nCode\n# Step 1: Load and clean track_data\ntrack_data &lt;- read.csv(\"data/mp03/data.csv\") %&gt;%\n  rename(track_id = id)  # ✅ RENAME this column or the join will break!\n\n# Step 2: Clean the artist column\nclean_artist_string &lt;- function(x) {\n  x |&gt;\n    str_replace_all(\"\\\\['\", \"\") |&gt;\n    str_replace_all(\"'\\\\]\", \"\") |&gt;\n    str_replace_all(\"[ ]?'\", \"\") |&gt;\n    str_replace_all(\"[ ]*,[ ]*\", \",\")\n}\n\ntrack_data_cleaned &lt;- track_data %&gt;%\n  separate_longer_delim(artists, \",\") %&gt;%\n  mutate(artist_name = clean_artist_string(artists)) %&gt;%\n  select(-artists)\n\n\nanchor_ids &lt;- all_playlists %&gt;%\n  filter(track_name %in% c(\"HUMBLE.\", \"Antidote\")) %&gt;%\n  pull(track_id) %&gt;%\n  unique()\n\nanchor_songs &lt;- track_data_cleaned %&gt;%\n  filter((name == \"HUMBLE.\" & artist_name == \"Kendrick Lamar\") |\n         (name == \"Antidote\" & artist_name == \"Travis Scott\")) %&gt;%\n  select(track_id, track_name = name, artist_name, popularity, danceability, energy, tempo, key) %&gt;%\n  distinct()\n\nknitr::kable(anchor_songs, \"html\", escape = FALSE, caption = \"🎯 Anchor Songs: HUMBLE. by Kendrick Lamar and Antidote by Travis Scott\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%   # 🔴 YouTube Red header\n  row_spec(1:nrow(anchor_songs), background = \"#121212\", color = \"#EAEAEA\")  # 🖤 Dark body\n\n\n\n🎯 Anchor Songs: HUMBLE. by Kendrick Lamar and Antidote by Travis Scott\n\n\ntrack_id\ntrack_name\nartist_name\npopularity\ndanceability\nenergy\ntempo\nkey\n\n\n\n\n1wHZx0LgzFHyeIZkUydNXq\nAntidote\nTravis Scott\n78\n0.713\n0.526\n131.050\n1\n\n\n7KXjTSCq5nL1LoYtL7XAwS\nHUMBLE.\nKendrick Lamar\n83\n0.908\n0.621\n150.011\n1\n\n\n\n\n\n\n\n\n\n\n\nCode\nco_occur_songs &lt;- all_playlists %&gt;% filter(track_id %in% anchor_ids) %&gt;% pull(playlist_id)\nrelated_songs &lt;- all_playlists %&gt;%\n  filter(playlist_id %in% co_occur_songs, !track_id %in% anchor_ids) %&gt;%\n  select(track_id, track_name, artist_name) %&gt;% distinct()\n\nknitr::kable(head(related_songs, 10), \"html\", escape = FALSE, caption = \"🔗 Heuristic 1: Songs from Same Playlists\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%   # YouTube Red header\n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")               # Dark theme rows\n\n\n\n🔗 Heuristic 1: Songs from Same Playlists\n\n\ntrack_id\ntrack_name\nartist_name\n\n\n\n\n1IAzD1muglOxOcPbUHs70R\nWhatever You Like\nT.I.\n\n\n6mxyfdyF4LD7PctU3UNyjF\nTouch The Sky\nKanye West\n\n\n1B87ZDrD3Pno9hS4stamWO\nComin Out Strong\nFuture\n\n\n4NTWZqvfQTlOMitlVn6tew\nThe Show Goes On\nLupe Fiasco\n\n\n5yJ0kIxrrYra3QexH58UVj\nKeep It Real\nKYLE\n\n\n3WL6yCfh0zw2MxVSWSe0G1\nShe Wanna Party (feat. Millie Go Lightly)\nYoung Thug\n\n\n6mLfR7fHVDcCKpLwGLWCWw\nF With U\nKid Ink\n\n\n4vv1KjUzPwrtDbozizSfQc\nDon't Quit\nDJ Khaled\n\n\n6gBFPUFcJLzWGx4lenP6h2\ngoosebumps\nTravis Scott\n\n\n59J5nzL1KniFHnU120dQzt\nwokeuplikethis*\nPlayboi Carti\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# ✅ Create playlist_full by joining all_playlists with track_data_cleaned\n#### Heuristic 2: Key & Tempo Match\n\n# ✅ Filter playlists for anchor songs only\nplaylist_subset &lt;- all_playlists %&gt;%\n  filter(track_name %in% c(\"HUMBLE.\", \"Antidote\"))\n\n# ✅ Join only subset\nplaylist_full &lt;- playlist_subset %&gt;%\n  left_join(track_data_cleaned, by = \"track_id\")\n\n# Get key & tempo of anchor songs\nanchor_keys_tempos &lt;- playlist_full %&gt;%\n  filter(track_id %in% anchor_ids) %&gt;%\n  distinct(key, tempo)\n\n# Extract key/tempo range\nkeys &lt;- anchor_keys_tempos$key\ntempo_range &lt;- range(anchor_keys_tempos$tempo, na.rm = TRUE)\n\n# Find harmonically similar songs\nharmonically_similar_songs &lt;- track_data_cleaned %&gt;%\n  filter(key %in% keys,\n         tempo &gt;= tempo_range[1] - 5,\n         tempo &lt;= tempo_range[2] + 5) %&gt;%\n  select(track_id, track_name = name, artist_name) %&gt;%\n  distinct()\n\n# Show preview (YouTube Music theme)\nknitr::kable(head(harmonically_similar_songs, 10), \"html\", escape = FALSE, caption = \"🎼 Heuristic 2: Same Key and Tempo\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%   # YouTube Red header\n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")\n\n\n\n🎼 Heuristic 2: Same Key and Tempo\n\n\ntrack_id\ntrack_name\nartist_name\n\n\n\n\n6OJjveoYwJdIt76y0Pxpxw\nPer aspera ad astra\nCarl Woitschach\n\n\n6ZWi1fuonJCUlt4p6o9Uzs\nLa Noce À Rebecca\nPerchicot\n\n\n6bKJYhoaWIohnhspidbdW7\nChapter 2.11 - Zamek kaniowski\nSeweryn Goszczyński\n\n\n71FaVeFy9ZOiQRY4yOijey\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nFrédéric Chopin\n\n\n71FaVeFy9ZOiQRY4yOijey\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nVladimir Horowitz\n\n\n722u6arjn98Ygql8TyqKZz\nNocturne in C-Sharp Minor, Op. 27, No. 1 - 2001 Remastered\nFrédéric Chopin\n\n\n722u6arjn98Ygql8TyqKZz\nNocturne in C-Sharp Minor, Op. 27, No. 1 - 2001 Remastered\nVladimir Horowitz\n\n\n747Dowy6MecKApVkFH1asI\nQuema Esas Cartas - Remasterizado\nIgnacio Corsini\n\n\n43NCVFtFp0pBCEGdmJI5GQ\nEsclavas blancas\nCarlos Gardel\n\n\n4GcaZeQH8XpwlXTVdf8T3y\nTosoi Sou Eipan S'agapo\nRenos Talmas\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nartist_matches &lt;- track_data_cleaned %&gt;%\n  filter(artist_name %in% c(\"Kendrick Lamar\", \"Travis Scott\")) %&gt;%\n  select(track_id, track_name = name, artist_name)\n\nknitr::kable(head(artist_matches, 10), \"html\", escape = FALSE, caption = \"👤 Heuristic 3: Same Artist\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%   # YouTube Red Header\n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")               # Dark theme body\n\n\n\n👤 Heuristic 3: Same Artist\n\n\ntrack_id\ntrack_name\nartist_name\n\n\n\n\n3L2YOO6dDiB91M1AbQ0CCR\nNo Make-Up (Her Vice) (feat. Colin Munroe)\nKendrick Lamar\n\n\n0iMN420Q45isZVNlAqzPTW\nLove Game\nKendrick Lamar\n\n\n3jg8bevUzKYONDLBBQquif\nNever Catch Me\nTravis Scott\n\n\n1WT11QmhZutciEv1NsHt1R\nMortal Man\nKendrick Lamar\n\n\n3dtBVBClM5ms0qCBBrqpUb\nWasted (feat. Juicy J)\nTravis Scott\n\n\n79wTHFxVJXRrR5afZeBd16\nUber Everywhere (feat. Travis Scott)\nTravis Scott\n\n\n42k9e2hgl98IdgkXLg4pxs\nNo More (feat. Travis Scott, Kodak Black & 21 Savage)\nTravis Scott\n\n\n1S6NpdvFXqHZfPUUEOIjtG\nOpposites Attract (Tomorrow W/O Her)\nKendrick Lamar\n\n\n6m49tZii9UUttOgDozxjI1\nThe City\nKendrick Lamar\n\n\n5H25xsIuRWUI8GwcoAoeSG\nPiss On Your Grave (feat. Kanye West)\nTravis Scott\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nanchor_traits &lt;- track_data_cleaned %&gt;%\n  filter(name %in% c(\"HUMBLE.\", \"Antidote\")) %&gt;%\n  summarise(\n    danceability_min = min(danceability) - 0.1,\n    danceability_max = max(danceability) + 0.1,\n    energy_min = min(energy) - 0.1,\n    energy_max = max(energy) + 0.1\n  )\nsimilar_trait_songs &lt;- track_data_cleaned %&gt;%\n  filter(danceability &gt;= anchor_traits$danceability_min,\n         danceability &lt;= anchor_traits$danceability_max,\n         energy &gt;= anchor_traits$energy_min,\n         energy &lt;= anchor_traits$energy_max) %&gt;%\n  select(track_id, track_name = name, artist_name)\n\nknitr::kable(head(similar_trait_songs, 10), \"html\", escape = FALSE, caption = \"🎚️ Heuristic 4: Similar Danceability & Energy\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%   # Header: YouTube red\n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")               # Body: dark mode\n\n\n\n🎚️ Heuristic 4: Similar Danceability & Energy\n\n\ntrack_id\ntrack_name\nartist_name\n\n\n\n\n6KbQ3uYMLKb5jDxLF7wYDD\nSingende Bataillone 1. Teil\nCarl Woitschach\n\n\n6L63VW0PibdM1HDSBoqnoM\nChapter 1.18 - Zamek kaniowski\nSeweryn Goszczyński\n\n\n6M94FkXd15sOAOQYRnWPN8\nBebamos Juntos - Instrumental (Remasterizado)\nFrancisco Canaro\n\n\n6NxAf7M8DNHOBTmEd3JSO5\nScherzo a capriccio: Presto\nFelix Mendelssohn\n\n\n6NxAf7M8DNHOBTmEd3JSO5\nScherzo a capriccio: Presto\nVladimir Horowitz\n\n\n6O0puPuyrxPjDTHDUgsWI7\nValse oubliée No. 1 in F-Sharp Major, S. 215/1\nFranz Liszt\n\n\n6O0puPuyrxPjDTHDUgsWI7\nValse oubliée No. 1 in F-Sharp Major, S. 215/1\nVladimir Horowitz\n\n\n6OJjveoYwJdIt76y0Pxpxw\nPer aspera ad astra\nCarl Woitschach\n\n\n6OaJ8Bh7lsBeYoBmwmo2nh\nMoneda Corriente - Remasterizado\nFrancisco Canaro\n\n\n6OaJ8Bh7lsBeYoBmwmo2nh\nMoneda Corriente - Remasterizado\nCharlo\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nanchor_valence &lt;- track_data_cleaned %&gt;%\n  filter(name %in% c(\"HUMBLE.\", \"Antidote\")) %&gt;%\n  summarise(valence_min = min(valence, na.rm = TRUE) - 0.1,\n            valence_max = max(valence, na.rm = TRUE) + 0.1)\ncustom_heuristic_songs &lt;- track_data_cleaned %&gt;%\n  filter(valence &gt;= anchor_valence$valence_min,\n         valence &lt;= anchor_valence$valence_max) %&gt;%\n  select(track_id, track_name = name, artist_name)\n\nknitr::kable(head(custom_heuristic_songs, 10), \"html\", escape = FALSE, caption = \"💖 Heuristic 5: Similar Valence (Mood)\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%  # YouTube red header\n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")              # Dark body\n\n\n\n💖 Heuristic 5: Similar Valence (Mood)\n\n\ntrack_id\ntrack_name\nartist_name\n\n\n\n\n6KuQTIu1KoTTkLXKrwlLPV\nFantasiestücke, Op. 111: Più tosto lento\nRobert Schumann\n\n\n6KuQTIu1KoTTkLXKrwlLPV\nFantasiestücke, Op. 111: Più tosto lento\nVladimir Horowitz\n\n\n6N6tiFZ9vLTSOIxkj8qKrd\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nFrédéric Chopin\n\n\n6N6tiFZ9vLTSOIxkj8qKrd\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nVladimir Horowitz\n\n\n6NxAf7M8DNHOBTmEd3JSO5\nScherzo a capriccio: Presto\nFelix Mendelssohn\n\n\n6NxAf7M8DNHOBTmEd3JSO5\nScherzo a capriccio: Presto\nVladimir Horowitz\n\n\n6O0puPuyrxPjDTHDUgsWI7\nValse oubliée No. 1 in F-Sharp Major, S. 215/1\nFranz Liszt\n\n\n6O0puPuyrxPjDTHDUgsWI7\nValse oubliée No. 1 in F-Sharp Major, S. 215/1\nVladimir Horowitz\n\n\n6OaJ8Bh7lsBeYoBmwmo2nh\nMoneda Corriente - Remasterizado\nFrancisco Canaro\n\n\n6OaJ8Bh7lsBeYoBmwmo2nh\nMoneda Corriente - Remasterizado\nCharlo\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfinal_playlist &lt;- bind_rows(\n  related_songs,\n  harmonically_similar_songs,\n  artist_matches,\n  similar_trait_songs,\n  custom_heuristic_songs\n) %&gt;%\n  distinct() %&gt;%\n  filter(!track_id %in% anchor_ids)\n\nknitr::kable(head(final_playlist, 10), \"html\", escape = FALSE, caption = \"🎶 Combined Playlist Candidates\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%   # YouTube Red Header\n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")               # Dark rows\n\n\n\n🎶 Combined Playlist Candidates\n\n\ntrack_id\ntrack_name\nartist_name\n\n\n\n\n1IAzD1muglOxOcPbUHs70R\nWhatever You Like\nT.I.\n\n\n6mxyfdyF4LD7PctU3UNyjF\nTouch The Sky\nKanye West\n\n\n1B87ZDrD3Pno9hS4stamWO\nComin Out Strong\nFuture\n\n\n4NTWZqvfQTlOMitlVn6tew\nThe Show Goes On\nLupe Fiasco\n\n\n5yJ0kIxrrYra3QexH58UVj\nKeep It Real\nKYLE\n\n\n3WL6yCfh0zw2MxVSWSe0G1\nShe Wanna Party (feat. Millie Go Lightly)\nYoung Thug\n\n\n6mLfR7fHVDcCKpLwGLWCWw\nF With U\nKid Ink\n\n\n4vv1KjUzPwrtDbozizSfQc\nDon't Quit\nDJ Khaled\n\n\n6gBFPUFcJLzWGx4lenP6h2\ngoosebumps\nTravis Scott\n\n\n59J5nzL1KniFHnU120dQzt\nwokeuplikethis*\nPlayboi Carti\n\n\n\n\n\n\n\nFrom this, I created a pool of over 200k potential songs and shortlisted 40 top candidates.\n\n\nCode\n# Join playlist with song metadata\nfinal_playlist_enriched &lt;- final_playlist %&gt;%\n  left_join(track_data_cleaned, by = \"track_id\") %&gt;%\n  rename(artist_name = artist_name.x)  # Resolve artist_name suffix\n\n# Filter not popular songs (&lt; 70)\nnot_popular_songs &lt;- final_playlist_enriched %&gt;%\n  filter(popularity &lt; 70) %&gt;%\n  select(track_name, artist_name, popularity) %&gt;%\n  distinct()\n\n# Confirm count of non-popular songs\nnrow(not_popular_songs)\n\n\n[1] 213781\n\n\nCode\n# Create final playlist candidate pool\nplaylist_candidates &lt;- final_playlist_enriched %&gt;%\n  filter(!track_id %in% anchor_ids) %&gt;%\n  select(track_id, track_name, artist_name, popularity, danceability, energy, tempo, key) %&gt;%\n  distinct() %&gt;%\n  arrange(desc(popularity)) %&gt;%\n  slice_head(n = 40)\n\n# 💡 Display the top 40 playlist candidates in a clean table\nlibrary(kableExtra)\nknitr::kable(\n  playlist_candidates,\n  \"html\",\n  caption = \"🎧 Top 40 Playlist Candidates After Applying Heuristics\",\n  escape = FALSE\n) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%   # YouTube Red for header\n  row_spec(1:40, background = \"#1C1C1C\", color = \"#EAEAEA\")               # Dark mode body rows\n\n\n\n🎧 Top 40 Playlist Candidates After Applying Heuristics\n\n\ntrack_id\ntrack_name\nartist_name\npopularity\ndanceability\nenergy\ntempo\nkey\n\n\n\n\n0VjIjW4GlUZAMYd2vXMi3b\nBlinding Lights\nThe Weeknd\n100\n0.514\n0.730\n171.005\n1\n\n\n7ytR5pFWmSjzHJIeQkgog4\nROCKSTAR (feat. Roddy Ricch)\nDaBaby\n99\n0.746\n0.690\n89.977\n11\n\n\n7ytR5pFWmSjzHJIeQkgog4\nROCKSTAR (feat. Roddy Ricch)\nRoddy Ricch\n99\n0.746\n0.690\n89.977\n11\n\n\n7eJMfftS33KTjuF7lTsMCx\ndeath bed (coffee for your head) (feat. beabadoobee)\nPowfu\n97\n0.726\n0.431\n144.026\n8\n\n\n7eJMfftS33KTjuF7lTsMCx\ndeath bed (coffee for your head) (feat. beabadoobee)\nbeabadoobee\n97\n0.726\n0.431\n144.026\n8\n\n\n39Yp9wwQiSRIDOvrVg7mbk\nTHE SCOTTS\nTravis Scott\n96\n0.716\n0.537\n129.979\n0\n\n\n39Yp9wwQiSRIDOvrVg7mbk\nTHE SCOTTS\nTHE SCOTTS\n96\n0.716\n0.537\n129.979\n0\n\n\n39Yp9wwQiSRIDOvrVg7mbk\nTHE SCOTTS\nKid Cudi\n96\n0.716\n0.537\n129.979\n0\n\n\n0nbXyq5TXYPCO7pr3N8S4I\nThe Box\nRoddy Ricch\n95\n0.896\n0.586\n116.971\n10\n\n\n4nK5YrxbMGZstTLbvj6Gxw\nSupalonely\nBENEE\n95\n0.863\n0.631\n128.977\n7\n\n\n4nK5YrxbMGZstTLbvj6Gxw\nSupalonely\nGus Dapperton\n95\n0.863\n0.631\n128.977\n7\n\n\n62aP9fBQKYKxi7PDXwcUAS\nily (i love you baby) (feat. Emilee)\nSurf Mesa\n95\n0.674\n0.774\n112.050\n11\n\n\n62aP9fBQKYKxi7PDXwcUAS\nily (i love you baby) (feat. Emilee)\nEmilee\n95\n0.674\n0.774\n112.050\n11\n\n\n127QTOFJsJQp5LbJbu3A1y\nToosie Slide\nDrake\n95\n0.834\n0.454\n81.618\n1\n\n\n24ySl2hOPGCDcxBxFIqWBu\nRain On Me (with Ariana Grande)\nLady Gaga\n94\n0.672\n0.855\n123.056\n9\n\n\n24ySl2hOPGCDcxBxFIqWBu\nRain On Me (with Ariana Grande)\nAriana Grande\n94\n0.672\n0.855\n123.056\n9\n\n\n2XU0oxnq2qxCpomAAuJY8K\nDance Monkey\nTones And I\n94\n0.824\n0.588\n98.027\n6\n\n\n5RqR4ZCCKJDcBLIn4sih9l\nParty Girl\nStaySolidRocky\n94\n0.728\n0.431\n130.022\n6\n\n\n4NhDYoQTYCdWHTvlbGVgwo\nGOOBA\n6ix9ine\n94\n0.611\n0.688\n178.462\n1\n\n\n4HBZA5flZLE435QTztThqH\nStuck with U (with Justin Bieber)\nAriana Grande\n94\n0.597\n0.450\n178.765\n8\n\n\n4HBZA5flZLE435QTztThqH\nStuck with U (with Justin Bieber)\nJustin Bieber\n94\n0.597\n0.450\n178.765\n8\n\n\n1Cv1YLb4q0RzL6pybtaMLo\nSunday Best\nSurfaces\n93\n0.878\n0.525\n112.022\n5\n\n\n3Dv1eDb0MEgF93GpLXlucZ\nSay So\nDoja Cat\n93\n0.787\n0.673\n110.962\n11\n\n\n6WrI0LAC5M1Rw2MnX2ZvEg\nDon't Start Now\nDua Lipa\n93\n0.794\n0.793\n123.941\n11\n\n\n6gBFPUFcJLzWGx4lenP6h2\ngoosebumps\nTravis Scott\n92\n0.841\n0.728\n130.049\n7\n\n\n2xLMifQCjDGFmkHkpNLD9h\nSICKO MODE\nTravis Scott\n92\n0.834\n0.730\n155.008\n8\n\n\n4TnjEaWOeW0eKTKIEvJyCa\nFalling\nTrevor Daniel\n92\n0.784\n0.430\n127.087\n10\n\n\n696DnlkuDOXcMAnKlTgXXK\nROXANNE\nArizona Zervas\n92\n0.621\n0.601\n116.735\n6\n\n\n7qEHsqek33rTcFNT9PFqLf\nSomeone You Loved\nLewis Capaldi\n92\n0.501\n0.405\n109.891\n1\n\n\n3H7ihDc1dqLriiWXwsc2po\nBreaking Me\nTopic\n92\n0.789\n0.720\n122.031\n8\n\n\n3H7ihDc1dqLriiWXwsc2po\nBreaking Me\nA7S\n92\n0.789\n0.720\n122.031\n8\n\n\n7k4t7uLgtOxPwTpFmtJNTY\nTusa\nKAROL G\n92\n0.803\n0.715\n101.085\n2\n\n\n7k4t7uLgtOxPwTpFmtJNTY\nTusa\nNicki Minaj\n92\n0.803\n0.715\n101.085\n2\n\n\n1jaTQ3nqY3oAAYyCTbIvnM\nWHATS POPPIN\nJack Harlow\n92\n0.923\n0.604\n145.062\n11\n\n\n6wJYhPfqk3KGhHRG76WzOh\nBlueberry Faygo\nLil Mosey\n92\n0.774\n0.554\n99.034\n0\n\n\n5v4GgrXPMghOnBBLmveLac\nSavage Remix (feat. Beyoncé)\nMegan Thee Stallion\n92\n0.822\n0.743\n84.459\n10\n\n\n5v4GgrXPMghOnBBLmveLac\nSavage Remix (feat. Beyoncé)\nBeyoncé\n92\n0.822\n0.743\n84.459\n10\n\n\n78qd8dvwea0Gosb6Fe6j3k\nBoss Bitch\nDoja Cat\n92\n0.707\n0.955\n125.989\n10\n\n\n0SqqAgdovOE24BzxIClpjw\nYo Perreo Sola\nBad Bunny\n92\n0.860\n0.758\n97.014\n11\n\n\n2DEZmgHKAvm41k4J3R2E9Y\nSafaera\nBad Bunny\n92\n0.607\n0.829\n96.172\n2\n\n\n\n\n\n\n\nI combined results, removed duplicates, and curated top 12 songs, including: - At least 2 unfamiliar songs - At least 3 not popular (popularity &lt; 70)\n\n\n\n\n\n\nCode\nanchor_songs &lt;- track_data_cleaned %&gt;%\n  filter(name %in% c(\"HUMBLE.\", \"Antidote\")) %&gt;%\n  select(track_id, track_name = name, artist_name, popularity, danceability, energy, tempo, key) %&gt;%\n  distinct()\n\nplaylist_candidates &lt;- final_playlist_enriched %&gt;%\n  select(track_id, track_name, artist_name, popularity, danceability, energy, tempo, key) %&gt;%\n  distinct()\n\nfinal_12 &lt;- bind_rows(\n  anchor_songs,\n  playlist_candidates %&gt;%\n    filter(track_id %in% c(\n      \"0VjIjW4GlUZAMYd2vXMi3b\",  # Blinding Lights\n      \"7ytR5pFWmSjzHJIeQkgog4\",  # ROCKSTAR\n      \"7eJMfftS33KTjuF7lTsMCx\",  # death bed\n      \"39Yp9wwQiSRIDOvrVg7mbk\",  # THE SCOTTS\n      \"4nK5YrxbMGZstTLbvj6Gxw\",  # Supalonely\n      \"127QTOFJsJQp5LbJbu3A1y\",  # Toosie Slide\n      \"1Cv1YLb4q0RzL6pybtaMLo\",  # Sunday Best\n      \"3mBCTEzhxcv6jLaxXoOvWs\",  # Moondust - Strpped; EP Version \n      \"1WIfWj5skn5UUZTs4cEFBe\",  # Location \n      \"5lw8Mgb4LyhriPIC86gV6e\"   # RNP \n    ))\n)\n\nfinal_12 &lt;- final_12 %&gt;%\n  filter(!(track_name == \"HUMBLE.\" & artist_name != \"Kendrick Lamar\")) %&gt;%\n  filter(!(track_name == \"Antidote\" & artist_name != \"Travis Scott\"))\n\nfinal_12_cleaned &lt;- final_12 %&gt;%\n  distinct(track_id, .keep_all = TRUE)\n\n# 📋 Display Final Playlist of 12 Songs\n\nknitr::kable(\n  final_12_cleaned %&gt;%\n    select(track_name, artist_name, popularity, danceability, energy, tempo, key),\n  \"html\",\n  caption = \"🎼 Final Curated Playlist: Midnight Ascension\",\n  escape = FALSE\n) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 15,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n    position = \"center\"\n  ) %&gt;%\n  column_spec(1, bold = TRUE, color = \"#FF0000\") %&gt;%   # 🔴 Track Name in YouTube red\n  column_spec(2, italic = TRUE, color = \"#999999\") %&gt;% # 👤 Artist in soft gray\n  column_spec(3, color = \"#FFD700\") %&gt;%                # ⭐ Popularity in gold\n  column_spec(4:6, color = \"#00FFAB\") %&gt;%              # 🟢 Metrics in neon mint\n  column_spec(7, color = \"#FFA500\") %&gt;%                # 🔑 Key in orange\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%  # 🔻 Header in YouTube red\n  row_spec(1:12, background = \"#1c1c1c\", color = \"#EAEAEA\")              # Dark mode rows\n\n\n\n\n🎼 Final Curated Playlist: Midnight Ascension\n\n\ntrack_name\nartist_name\npopularity\ndanceability\nenergy\ntempo\nkey\n\n\n\n\nAntidote\nTravis Scott\n78\n0.713\n0.526\n131.050\n1\n\n\nHUMBLE.\nKendrick Lamar\n83\n0.908\n0.621\n150.011\n1\n\n\nMoondust (Stripped)\nJaymes Young\n59\n0.556\n0.132\n73.040\n6\n\n\nTHE SCOTTS\nTravis Scott\n96\n0.716\n0.537\n129.979\n0\n\n\nLocation\nKhalid\n60\n0.799\n0.436\n80.028\n1\n\n\nSunday Best\nSurfaces\n93\n0.878\n0.525\n112.022\n5\n\n\nSupalonely\nBENEE\n95\n0.863\n0.631\n128.977\n7\n\n\nROCKSTAR (feat. Roddy Ricch)\nDaBaby\n99\n0.746\n0.690\n89.977\n11\n\n\nBlinding Lights\nThe Weeknd\n100\n0.514\n0.730\n171.005\n1\n\n\nToosie Slide\nDrake\n95\n0.834\n0.454\n81.618\n1\n\n\ndeath bed (coffee for your head) (feat. beabadoobee)\nPowfu\n97\n0.726\n0.431\n144.026\n8\n\n\nRNP (feat. Anderson .Paak)\nYBN Cordae\n74\n0.611\n0.714\n196.043\n9\n\n\n\n\n\n\n\n\n\n\n\nHere are some of the tracks you can experience from Midnight Ascension:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI named My playlist “Midnight Ascension”, combining high-energy and mood-driven tracks. I used line plots to visualize dynamics of: - Energy - Danceability - Tempo (scaled) - Popularity This helped Me validate flow: our playlist gently rises in intensity, dips slightly in mood, then finishes on a high."
  },
  {
    "objectID": "mp03.html#playlist-description",
    "href": "mp03.html#playlist-description",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "",
    "text": "Midnight Ascension blends rhythmic fire with introspective depth — a sonic ascent through high-energy bangers, smooth flows, and emotionally rich undercurrents. With Kendrick Lamar and Travis Scott as our North Stars, this playlist brings together underground gems and global hits that flow seamlessly from dusk till dawn."
  },
  {
    "objectID": "mp03.html#design-principles",
    "href": "mp03.html#design-principles",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "",
    "text": "Anchor songs: “HUMBLE.” by Kendrick Lamar and “Antidote” by Travis Scott.\nBalance: Energetic highs countered by smooth valleys.\nDiversity: A mix of popular and lesser-known songs.\nStructure: Carefully chosen using audio features (tempo, energy, danceability, valence, etc.).\nValence Similarity: Songs sharing the same emotional “feel”."
  },
  {
    "objectID": "mp03.html#why-its-the-ultimate-playlist",
    "href": "mp03.html#why-its-the-ultimate-playlist",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "",
    "text": "I used data science to back every pick, not just vibes. This included examining: - How songs co-occur on playlists - Key and tempo for DJ transitions - Shared energy & danceability levels - Artist overlap and emotional tone (valence)\n\n\n\nused R and dplyr to calculate valence, tempo, key, and co-occurrence.\nExplored Spotify’s popularity and playlist frequency using correlation plots.\nSelected candidate songs using five filtering heuristics.\nPerformed deduplication and ensured anchor songs were correct.\nVisualized playlist structure with ggplot2 to verify the flow"
  },
  {
    "objectID": "mp03.html#task-1-song-characteristics-dataset",
    "href": "mp03.html#task-1-song-characteristics-dataset",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "2.1 🔍 Task 1: Song Characteristics DataSet",
    "text": "2.1 🔍 Task 1: Song Characteristics DataSet\nIn this task, I loaded and cleaned the main Spotify track dataset containing song characteristics like tempo, danceability, energy, and popularity. I also cleaned the artists column to split multiple artists across rows.\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(readr)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(dplyr)\n\nclean_artist_string &lt;- function(x){\n  x |&gt;\n    str_replace_all(\"\\\\['\", \"\") |&gt;\n    str_replace_all(\"'\\\\]\", \"\") |&gt;\n    str_replace_all(\"[ ]?'\", \"\") |&gt;\n    str_replace_all(\"[ ]*,[ ]*\", \",\")\n}\n\nSONGS &lt;- read_csv(\"data/mp03/data.csv\") %&gt;%\n  separate_longer_delim(artists, \",\") %&gt;%\n  mutate(artist_name = clean_artist_string(artists)) %&gt;%\n  select(-artists)\n\nSONGS %&gt;%\n  select(name, artist_name, popularity, danceability, energy, tempo) %&gt;%\n  head(10) %&gt;%\n  kable(\"html\", caption = \"🎶 Spotify Vibes: Song Characteristics Sample\") %&gt;%\n  kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\"),\n    full_width = FALSE,\n    font_size = 14\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%    # header Spotify green\n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")                # dark mode rows\n\n\n\n🎶 Spotify Vibes: Song Characteristics Sample\n\n\nname\nartist_name\npopularity\ndanceability\nenergy\ntempo\n\n\n\n\nSingende Bataillone 1. Teil\nCarl Woitschach\n0\n0.708\n0.1950\n118.469\n\n\nFantasiestücke, Op. 111: Più tosto lento\nRobert Schumann\n0\n0.379\n0.0135\n83.972\n\n\nFantasiestücke, Op. 111: Più tosto lento\nVladimir Horowitz\n0\n0.379\n0.0135\n83.972\n\n\nChapter 1.18 - Zamek kaniowski\nSeweryn Goszczyński\n0\n0.749\n0.2200\n107.177\n\n\nBebamos Juntos - Instrumental (Remasterizado)\nFrancisco Canaro\n0\n0.781\n0.1300\n108.003\n\n\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nFrédéric Chopin\n1\n0.210\n0.2040\n62.149\n\n\nPolonaise-Fantaisie in A-Flat Major, Op. 61\nVladimir Horowitz\n1\n0.210\n0.2040\n62.149\n\n\nScherzo a capriccio: Presto\nFelix Mendelssohn\n0\n0.424\n0.1200\n63.521\n\n\nScherzo a capriccio: Presto\nVladimir Horowitz\n0\n0.424\n0.1200\n63.521\n\n\nValse oubliée No. 1 in F-Sharp Major, S. 215/1\nFranz Liszt\n0\n0.444\n0.1970\n80.495"
  },
  {
    "objectID": "mp03.html#task-3-rectangle-the-playlist-data",
    "href": "mp03.html#task-3-rectangle-the-playlist-data",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "2.3 📐 Task 3: Rectangle the Playlist Data",
    "text": "2.3 📐 Task 3: Rectangle the Playlist Data\nSince the playlist data was nested, I had to flatten it to a tidy rectangular format.\n\n\nCode\nall_playlists %&gt;%\n  select(playlist_name, playlist_id, playlist_followers, track_name, artist_name, duration) %&gt;%\n  head(10) %&gt;%\n  kable(\"html\", escape = FALSE, caption = \"🎵 Rectangular Playlist Data Sample\") %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%\n  row_spec(1:10, background = \"#121212\", color = \"#EAEAEA\")    \n\n\n\n\n🎵 Rectangular Playlist Data Sample\n\n\nplaylist_name\nplaylist_id\nplaylist_followers\ntrack_name\nartist_name\nduration\n\n\n\n\nThrowbacks\n0\n1\nLose Control (feat. Ciara & Fat Man Scoop)\nMissy Elliott\n226863\n\n\nThrowbacks\n0\n1\nToxic\nBritney Spears\n198800\n\n\nThrowbacks\n0\n1\nCrazy In Love\nBeyoncé\n235933\n\n\nThrowbacks\n0\n1\nRock Your Body\nJustin Timberlake\n267266\n\n\nThrowbacks\n0\n1\nIt Wasn't Me\nShaggy\n227600\n\n\nThrowbacks\n0\n1\nYeah!\nUsher\n250373\n\n\nThrowbacks\n0\n1\nMy Boo\nUsher\n223440\n\n\nThrowbacks\n0\n1\nButtons\nThe Pussycat Dolls\n225560\n\n\nThrowbacks\n0\n1\nSay My Name\nDestiny's Child\n271333\n\n\nThrowbacks\n0\n1\nHey Ya! - Radio Mix / Club Mix\nOutKast\n235213"
  },
  {
    "objectID": "mp03.html#final-playlist",
    "href": "mp03.html#final-playlist",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "2.7 🎧 Final Playlist",
    "text": "2.7 🎧 Final Playlist\n\n\nCode\nanchor_songs &lt;- track_data_cleaned %&gt;%\n  filter(name %in% c(\"HUMBLE.\", \"Antidote\")) %&gt;%\n  select(track_id, track_name = name, artist_name, popularity, danceability, energy, tempo, key) %&gt;%\n  distinct()\n\nplaylist_candidates &lt;- final_playlist_enriched %&gt;%\n  select(track_id, track_name, artist_name, popularity, danceability, energy, tempo, key) %&gt;%\n  distinct()\n\nfinal_12 &lt;- bind_rows(\n  anchor_songs,\n  playlist_candidates %&gt;%\n    filter(track_id %in% c(\n      \"0VjIjW4GlUZAMYd2vXMi3b\",  # Blinding Lights\n      \"7ytR5pFWmSjzHJIeQkgog4\",  # ROCKSTAR\n      \"7eJMfftS33KTjuF7lTsMCx\",  # death bed\n      \"39Yp9wwQiSRIDOvrVg7mbk\",  # THE SCOTTS\n      \"4nK5YrxbMGZstTLbvj6Gxw\",  # Supalonely\n      \"127QTOFJsJQp5LbJbu3A1y\",  # Toosie Slide\n      \"1Cv1YLb4q0RzL6pybtaMLo\",  # Sunday Best\n      \"3mBCTEzhxcv6jLaxXoOvWs\",  # Moondust - Strpped; EP Version \n      \"1WIfWj5skn5UUZTs4cEFBe\",  # Location \n      \"5lw8Mgb4LyhriPIC86gV6e\"   # RNP \n    ))\n)\n\nfinal_12 &lt;- final_12 %&gt;%\n  filter(!(track_name == \"HUMBLE.\" & artist_name != \"Kendrick Lamar\")) %&gt;%\n  filter(!(track_name == \"Antidote\" & artist_name != \"Travis Scott\"))\n\nfinal_12_cleaned &lt;- final_12 %&gt;%\n  distinct(track_id, .keep_all = TRUE)\n\n# 📋 Display Final Playlist of 12 Songs\n\nknitr::kable(\n  final_12_cleaned %&gt;%\n    select(track_name, artist_name, popularity, danceability, energy, tempo, key),\n  \"html\",\n  caption = \"🎼 Final Curated Playlist: Midnight Ascension\",\n  escape = FALSE\n) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 15,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n    position = \"center\"\n  ) %&gt;%\n  column_spec(1, bold = TRUE, color = \"#FF0000\") %&gt;%   # 🔴 Track Name in YouTube red\n  column_spec(2, italic = TRUE, color = \"#999999\") %&gt;% # 👤 Artist in soft gray\n  column_spec(3, color = \"#FFD700\") %&gt;%                # ⭐ Popularity in gold\n  column_spec(4:6, color = \"#00FFAB\") %&gt;%              # 🟢 Metrics in neon mint\n  column_spec(7, color = \"#FFA500\") %&gt;%                # 🔑 Key in orange\n  row_spec(0, bold = TRUE, background = \"#FF0000\", color = \"white\") %&gt;%  # 🔻 Header in YouTube red\n  row_spec(1:12, background = \"#1c1c1c\", color = \"#EAEAEA\")              # Dark mode rows\n\n\n\n\n🎼 Final Curated Playlist: Midnight Ascension\n\n\ntrack_name\nartist_name\npopularity\ndanceability\nenergy\ntempo\nkey\n\n\n\n\nAntidote\nTravis Scott\n78\n0.713\n0.526\n131.050\n1\n\n\nHUMBLE.\nKendrick Lamar\n83\n0.908\n0.621\n150.011\n1\n\n\nMoondust (Stripped)\nJaymes Young\n59\n0.556\n0.132\n73.040\n6\n\n\nTHE SCOTTS\nTravis Scott\n96\n0.716\n0.537\n129.979\n0\n\n\nLocation\nKhalid\n60\n0.799\n0.436\n80.028\n1\n\n\nSunday Best\nSurfaces\n93\n0.878\n0.525\n112.022\n5\n\n\nSupalonely\nBENEE\n95\n0.863\n0.631\n128.977\n7\n\n\nROCKSTAR (feat. Roddy Ricch)\nDaBaby\n99\n0.746\n0.690\n89.977\n11\n\n\nBlinding Lights\nThe Weeknd\n100\n0.514\n0.730\n171.005\n1\n\n\nToosie Slide\nDrake\n95\n0.834\n0.454\n81.618\n1\n\n\ndeath bed (coffee for your head) (feat. beabadoobee)\nPowfu\n97\n0.726\n0.431\n144.026\n8\n\n\nRNP (feat. Anderson .Paak)\nYBN Cordae\n74\n0.611\n0.714\n196.043\n9"
  },
  {
    "objectID": "mp03.html#listen-to-the-playlist-1",
    "href": "mp03.html#listen-to-the-playlist-1",
    "title": "Mini-Project #03: Creating the Ultimate Playlist",
    "section": "2.9 🎧 Listen to the Playlist",
    "text": "2.9 🎧 Listen to the Playlist\n\n2.9.1 🎤 HUMBLE. — Kendrick Lamar\n\n\n\n\n\n\n\n\n\n\n\n2.9.2 🎤 Antidote — Travis Scott\n\n\n\n\n\n\n\n\n\n\n\n2.9.3 🎤 Moondust — Jaymes Young\n\n\n\n\n\n\n\n\n\n\n\n2.9.4 🎤 Location — Khalid\n\n\n\n\n\n\n\n\n\n\n\n2.9.5 🎤 Blinding Lights — The Weeknd"
  },
  {
    "objectID": "mp04.html",
    "href": "mp04.html",
    "title": "📺 Mini-Project #04: 2024 Election County Shift Analysis",
    "section": "",
    "text": "What just happened in America? The 2024 election left jaws on the floor and political analysts scrambling. Trump made a dramatic return, Harris carried the Democratic torch, and counties across the country shifted red, blue—and sometimes both at once. But what does it actually mean?\nIn this exclusive, high-octane special report, we go beyond the headlines and deep into the data. Using county-level results from the 2020 and 2024 U.S. Presidential elections, scraped directly from Wikipedia and overlaid with Census shapefiles, we uncover the statistical reality behind America’s political pivot.\nWe map partisan swings, analyze turnout trends, and expose which states flipped, held, or bucked expectations. The finale? A set of bold, media-ready talking points backed by cold, hard data—presented with the flair of a campaign ad.\nStrap in. This isn’t just data science. It’s election night theater—powered by R."
  },
  {
    "objectID": "mp04.html#task-1-load-and-inspect-county-geometry",
    "href": "mp04.html#task-1-load-and-inspect-county-geometry",
    "title": "📺 Mini-Project #04: 2024 Election County Shift Analysis",
    "section": "2.1 🔍 Task 1: Load and Inspect County Geometry",
    "text": "2.1 🔍 Task 1: Load and Inspect County Geometry\nWe loaded the shapefile using sf::st_read() and checked for valid geometry and consistent naming (County and State names were standardized to title case). This geometry forms the backbone of all spatial plots in the report.\n\n\nCode\nlibrary(sf)\nlibrary(fs)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(dplyr)\nlibrary(scales)\n\n# Create directory if it doesn't exist\ndir_create(\"data/mp04\")\n\n# Define URL and download path\nshapefile_url &lt;- \"https://www2.census.gov/geo/tiger/GENZ2022/shp/cb_2022_us_county_5m.zip\"\nzip_path &lt;- \"data/mp04/county_shapefiles.zip\"\nunzip_dir &lt;- \"data/mp04/county_shapefiles\"\n\n# Download the zip file if not already present\nif (!file_exists(zip_path)) {\n  download.file(shapefile_url, destfile = zip_path, mode = \"wb\")\n}\n\n# Unzip only if the directory doesn't already exist\nif (!dir_exists(unzip_dir)) {\n  unzip(zipfile = zip_path, exdir = unzip_dir)\n}\n\n# Read shapefile with sf\ncounty_shapes &lt;- st_read(unzip_dir)\n\n\nReading layer `cb_2022_us_county_5m' from data source \n  `C:\\Users\\goyal\\OneDrive\\Documents\\STA9750-2025-SPRING\\data\\mp04\\county_shapefiles' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3235 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.1473 ymin: -14.55255 xmax: 179.7785 ymax: 71.35256\nGeodetic CRS:  NAD83\n\n\nCode\n# Preview only a few relevant columns for clarity\ncounty_shapes %&gt;%\n  st_drop_geometry() %&gt;%\n  select(STATEFP, COUNTYFP, NAME, STATE_NAME, LSAD, ALAND, AWATER) %&gt;%\n  mutate(\n    ALAND = comma(ALAND),\n    AWATER = comma(AWATER)\n  ) %&gt;%\n  slice_head(n = 10) %&gt;%\n  kable(\n    caption = \"🗺️ Sample of U.S. County Shapefile Attributes (Election 2024 Edition)\",\n    align = \"c\",\n    format = \"html\"\n  ) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    font_size = 14,\n    html_font = \"Cambria\",\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\")\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\") %&gt;%\n  row_spec(1:10, background = \"#F9F9F9\")\n\n\n\n🗺️ Sample of U.S. County Shapefile Attributes (Election 2024 Edition)\n\n\nSTATEFP\nCOUNTYFP\nNAME\nSTATE_NAME\nLSAD\nALAND\nAWATER\n\n\n\n\n13\n233\nPolk\nGeorgia\n06\n803,775,591\n4,664,760\n\n\n21\n023\nBracken\nKentucky\n06\n524,900,457\n16,279,752\n\n\n28\n153\nWayne\nMississippi\n06\n2,099,745,602\n7,255,476\n\n\n42\n001\nAdams\nPennsylvania\n06\n1,343,400,757\n7,771,555\n\n\n04\n007\nGila\nArizona\n06\n12,322,070,148\n96,465,330\n\n\n05\n111\nPoinsett\nArkansas\n06\n1,963,975,462\n13,892,745\n\n\n13\n231\nPike\nGeorgia\n06\n559,660,487\n8,595,984\n\n\n17\n093\nKendall\nIllinois\n06\n829,412,771\n5,136,525\n\n\n19\n101\nJefferson\nIowa\n06\n1,128,002,432\n3,522,238\n\n\n19\n095\nIowa\nIowa\n06\n1,518,911,690\n2,686,847"
  },
  {
    "objectID": "mp04.html#task-2-acquire-2024-county-level-election-results",
    "href": "mp04.html#task-2-acquire-2024-county-level-election-results",
    "title": "📺 Mini-Project #04: 2024 Election County Shift Analysis",
    "section": "2.2 🌐 Task 2: Acquire 2024 County-Level Election Results",
    "text": "2.2 🌐 Task 2: Acquire 2024 County-Level Election Results\nWe scraped all 50 state Wikipedia pages for the 2024 U.S. Presidential Election using a custom function get_election_results(). This function downloaded and parsed the HTML tables, identified county-level results, and extracted numeric vote counts for Trump, Harris, and others.\n\n\nCode\n# Function to fetch election data from Wikipedia\nget_election_results &lt;- function(state) {\n  # Special case for Alaska\n  if(state == \"Alaska\") {\n    url &lt;- \"https://en.wikipedia.org/wiki/2024_United_States_presidential_election_in_Alaska\"\n  } else {\n    # Format state name for URL\n    state_formatted &lt;- str_replace_all(state, \"\\\\s\", \"_\")\n    url &lt;- paste0(\"https://en.wikipedia.org/wiki/2024_United_States_presidential_election_in_\", state_formatted)\n  }\n  \n  # Create directory for storing data\n  dir_name &lt;- file.path(\"data\", \"election2024\")\n  file_name &lt;- file.path(dir_name, paste0(gsub(\"\\\\s\", \"_\", state), \".html\"))\n  dir.create(dir_name, showWarnings = FALSE, recursive = TRUE)\n  \n  # Download data if not cached\n  if (!file.exists(file_name)) {\n    tryCatch({\n      RESPONSE &lt;- req_perform(request(url))\n      writeLines(resp_body_string(RESPONSE), file_name)\n    }, error = function(e) {\n      warning(paste(\"Error fetching data for\", state, \":\", e$message))\n      return(NULL)\n    })\n  }\n  \n  # Exit if file doesn't exist\n  if (!file.exists(file_name)) return(NULL)\n  \n  # Parse HTML\n  page &lt;- tryCatch(read_html(file_name), error = function(e) NULL)\n  if (is.null(page)) return(NULL)\n  \n  # Extract tables\n  tables &lt;- tryCatch(page |&gt; html_elements(\"table.wikitable\") |&gt; \n                       html_table(na.strings = c(\"\", \"N/A\", \"—\")), \n                     error = function(e) list())\n  \n  if (length(tables) == 0) return(NULL)\n  \n  # Find county results table\n  county_table &lt;- NULL\n  \n  # Look for county column names\n  for (i in seq_along(tables)) {\n    if (ncol(tables[[i]]) &lt; 3) next\n    \n    col_names &lt;- colnames(tables[[i]])\n    if (is.null(col_names) || any(is.na(col_names))) next\n    \n    # Look for county identifiers in column names\n    if (any(str_detect(col_names, regex(\"County|Parish|Borough|Census Area|Municipality\", ignore_case = TRUE)))) {\n      county_table &lt;- tables[[i]]\n      break\n    }\n  }\n  \n  # Check for county values in first column\n  if (is.null(county_table)) {\n    for (i in seq_along(tables)) {\n      if (ncol(tables[[i]]) &lt; 3 || nrow(tables[[i]]) == 0 || is.null(tables[[i]][[1]])) next\n      \n      first_col &lt;- tables[[i]][[1]]\n      first_col_clean &lt;- first_col[!is.na(first_col)]\n      \n      if (length(first_col_clean) &gt; 0 && \n          any(str_detect(as.character(first_col_clean), \n                         regex(\"County|Parish|Borough|Census Area\", ignore_case = TRUE)))) {\n        county_table &lt;- tables[[i]]\n        break\n      }\n    }\n  }\n  \n  # Look for candidate names\n  if (is.null(county_table)) {\n    for (i in seq_along(tables)) {\n      if (ncol(tables[[i]]) &lt; 3) next\n      \n      # Check column names\n      col_names &lt;- colnames(tables[[i]])\n      if (!is.null(col_names) && !any(is.na(col_names)) &&\n          any(str_detect(col_names, regex(\"Trump|Harris|Republican|Democrat\", ignore_case = TRUE)))) {\n        county_table &lt;- tables[[i]]\n        break\n      }\n    }\n  }\n  \n  # Last resort - largest table\n  if (is.null(county_table) && length(tables) &gt; 0) {\n    valid_tables &lt;- tables[sapply(tables, function(t) ncol(t) &gt;= 3 && nrow(t) &gt;= 3)]\n    if (length(valid_tables) &gt; 0) {\n      county_table &lt;- valid_tables[[which.max(sapply(valid_tables, nrow))]]\n    }\n  }\n  \n  if (is.null(county_table)) return(NULL)\n  \n  # Format table\n  result &lt;- tryCatch({\n    # Find county column\n    county_col &lt;- which(str_detect(colnames(county_table), \n                                   regex(\"County|Parish|Borough|Census Area|Municipality|District\", ignore_case = TRUE)))\n    county_col &lt;- if(length(county_col) &gt; 0) county_col[1] else 1\n    \n    result &lt;- county_table\n    names(result)[county_col] &lt;- \"County\"\n    result$State &lt;- state\n    \n    return(result)\n  }, error = function(e) NULL)\n  \n  return(result)\n}\n\n# Function to standardize election data\nstandardize_election_data &lt;- function(df, state) {\n  if (is.null(df) || nrow(df) == 0) return(NULL)\n  \n  # Extract numeric values from string\n  extract_numeric &lt;- function(values) {\n    if (is.null(values)) return(rep(NA, nrow(df)))\n    chars &lt;- as.character(values)\n    chars &lt;- gsub(\",|%|\\\\s\", \"\", chars)\n    suppressWarnings(as.numeric(chars))\n  }\n  \n  # Find candidate columns\n  find_candidate_columns &lt;- function(candidate, df_names) {\n    cols &lt;- which(str_detect(df_names, regex(candidate, ignore_case = TRUE)))\n    if (length(cols) &gt;= 2) {\n      vote_col &lt;- NULL\n      pct_col &lt;- NULL\n      \n      for (col in cols) {\n        col_name &lt;- df_names[col]\n        if (str_detect(col_name, regex(\"%|percent\", ignore_case = TRUE))) {\n          pct_col &lt;- col\n        } else if (str_detect(col_name, regex(\"votes|#\", ignore_case = TRUE))) {\n          vote_col &lt;- col\n        }\n      }\n      \n      if (is.null(vote_col) && length(cols) &gt;= 1) vote_col &lt;- cols[1]\n      if (is.null(pct_col) && length(cols) &gt;= 2) pct_col &lt;- cols[2]\n      \n      return(list(vote_col = vote_col, pct_col = pct_col))\n    } else if (length(cols) == 1) {\n      return(list(vote_col = cols[1], pct_col = NULL))\n    } else {\n      return(list(vote_col = NULL, pct_col = NULL))\n    }\n  }\n  \n  # Ensure County column\n  if (!\"County\" %in% names(df)) {\n    county_col &lt;- which(str_detect(names(df), \n                                   regex(\"County|Parish|Borough|Census Area|Municipality|District|City\", ignore_case = TRUE)))\n    if (length(county_col) &gt; 0) {\n      names(df)[county_col[1]] &lt;- \"County\"\n    } else {\n      names(df)[1] &lt;- \"County\"\n    }\n  }\n  \n  # Find candidate and total columns\n  trump_cols &lt;- find_candidate_columns(\"Trump|Republican\", names(df))\n  harris_cols &lt;- find_candidate_columns(\"Harris|Democratic|Democrat\", names(df))\n  other_cols &lt;- find_candidate_columns(\"Other|Independent|Third\", names(df))\n  total_col &lt;- which(str_detect(names(df), regex(\"Total|Sum|Cast\", ignore_case = TRUE)))\n  total_col &lt;- if (length(total_col) &gt; 0) total_col[length(total_col)] else NULL\n  \n  # Create standardized dataframe\n  result &lt;- data.frame(\n    County = df$County,\n    State = state,\n    Trump_Votes = if (!is.null(trump_cols$vote_col)) extract_numeric(df[[trump_cols$vote_col]]) else NA,\n    Trump_Percent = if (!is.null(trump_cols$pct_col)) extract_numeric(df[[trump_cols$pct_col]]) else NA,\n    Harris_Votes = if (!is.null(harris_cols$vote_col)) extract_numeric(df[[harris_cols$vote_col]]) else NA,\n    Harris_Percent = if (!is.null(harris_cols$pct_col)) extract_numeric(df[[harris_cols$pct_col]]) else NA,\n    Other_Votes = if (!is.null(other_cols$vote_col)) extract_numeric(df[[other_cols$vote_col]]) else NA,\n    Other_Percent = if (!is.null(other_cols$pct_col)) extract_numeric(df[[other_cols$pct_col]]) else NA,\n    Total_Votes = if (!is.null(total_col)) extract_numeric(df[[total_col]]) else \n      rowSums(cbind(\n        if (!is.null(trump_cols$vote_col)) extract_numeric(df[[trump_cols$vote_col]]) else 0,\n        if (!is.null(harris_cols$vote_col)) extract_numeric(df[[harris_cols$vote_col]]) else 0,\n        if (!is.null(other_cols$vote_col)) extract_numeric(df[[other_cols$vote_col]]) else 0\n      ), na.rm = TRUE),\n    stringsAsFactors = FALSE\n  )\n  \n  return(result)\n}\n\n# Process all states\nprocess_election_data &lt;- function() {\n  states &lt;- state.name\n  all_data &lt;- list()\n  \n  for (state in states) {\n    \n    raw_data &lt;- get_election_results(state)\n    \n    if (!is.null(raw_data)) {\n      std_data &lt;- standardize_election_data(raw_data, state)\n      \n      if (!is.null(std_data) && nrow(std_data) &gt; 0) {\n        all_data[[state]] &lt;- std_data\n      }\n    }\n  }\n  \n  # Combine all data\n  combined_data &lt;- do.call(rbind, all_data)\n  \n  # Clean data - remove problematic rows\n  clean_data &lt;- combined_data %&gt;%\n    filter(\n      !is.na(Trump_Votes) & !is.na(Harris_Votes) & \n        !str_detect(County, regex(\"^County$|^County\\\\[|^Total\", ignore_case = TRUE))\n    ) %&gt;%\n    mutate(County = gsub(\"\\\\[\\\\d+\\\\]\", \"\", County),\n           County = trimws(County))\n  \n  # Save results\n  write.csv(clean_data, \"data/election_results_2024.csv\", row.names = FALSE)\n  \n  # Create summary by state\n  state_summary &lt;- clean_data %&gt;%\n    group_by(State) %&gt;%\n    summarize(\n      Counties = n(),\n      Trump_Total = sum(Trump_Votes, na.rm = TRUE),\n      Harris_Total = sum(Harris_Votes, na.rm = TRUE),\n      Other_Total = sum(Other_Votes, na.rm = TRUE),\n      Total_Votes = sum(Total_Votes, na.rm = TRUE),\n      Trump_Pct = Trump_Total / Total_Votes * 100,\n      Harris_Pct = Harris_Total / Total_Votes * 100\n    ) %&gt;%\n    arrange(desc(Total_Votes))\n  \n  write.csv(state_summary, \"data/election_results_2024_summary.csv\", row.names = FALSE)\n  \n  return(state_summary)\n}\n\n# Run the process and display results\nelection_results_2024 &lt;- read.csv(\"data/election_results_2024.csv\")\n\n# Create a summary by state\nelection_summary &lt;- election_results_2024 %&gt;%\n  group_by(State) %&gt;%\n  summarise(\n    Counties = n(),\n    Trump_Total = sum(Trump_Votes, na.rm = TRUE),\n    Harris_Total = sum(Harris_Votes, na.rm = TRUE),\n    Other_Total = sum(Other_Votes, na.rm = TRUE),\n    Total_Votes = sum(Total_Votes, na.rm = TRUE),\n    Trump_Pct = Trump_Total / Total_Votes * 100,\n    Harris_Pct = Harris_Total / Total_Votes * 100\n  ) %&gt;%\n  arrange(desc(Total_Votes)) %&gt;%\n  mutate(\n    Trump_Pct = sprintf(\"%.1f%%\", Trump_Pct),\n    Harris_Pct = sprintf(\"%.1f%%\", Harris_Pct),\n    Winner = ifelse(Trump_Total &gt; Harris_Total, \"Trump\", \"Harris\"),\n    Margin = paste0(\n      ifelse(Trump_Total &gt; Harris_Total, Trump_Pct, Harris_Pct),\n      \" - \",\n      ifelse(Trump_Total &gt; Harris_Total, Harris_Pct, Trump_Pct)\n    )\n  ) %&gt;%\n  select(State, Counties, Total_Votes, Winner, Margin, Trump_Pct, Harris_Pct)\n\n# Show top 10 states by total votes with styling\nelection_summary %&gt;%\n  head(10) %&gt;%\n  kable(\n    caption = \"📊 Top 10 States by Total Votes in 2024 Election\",\n    align = \"c\",\n    format = \"html\"\n  ) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    html_font = \"Cambria\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\")\n\n\n\n📊 Top 10 States by Total Votes in 2024 Election\n\n\nState\nCounties\nTotal_Votes\nWinner\nMargin\nTrump_Pct\nHarris_Pct\n\n\n\n\nCalifornia\n58\n15871260\nHarris\n58.4% - 38.3%\n38.3%\n58.4%\n\n\nTexas\n254\n11406186\nTrump\n56.1% - 42.4%\n56.1%\n42.4%\n\n\nFlorida\n67\n10935465\nTrump\n55.9% - 42.8%\n55.9%\n42.8%\n\n\nNew York\n62\n8300211\nHarris\n55.7% - 43.1%\n43.1%\n55.7%\n\n\nPennsylvania\n67\n7058269\nTrump\n50.2% - 48.5%\n50.2%\n48.5%\n\n\nOhio\n88\n5799829\nTrump\n54.8% - 43.7%\n54.8%\n43.7%\n\n\nNorth Carolina\n100\n5699141\nTrump\n50.9% - 47.6%\n50.9%\n47.6%\n\n\nMichigan\n83\n5674485\nTrump\n49.6% - 48.2%\n49.6%\n48.2%\n\n\nIllinois\n102\n5652103\nHarris\n54.2% - 43.3%\n43.3%\n54.2%\n\n\nGeorgia\n159\n5270783\nTrump\n50.5% - 48.3%\n50.5%\n48.3%"
  },
  {
    "objectID": "mp04.html#task-3-acquire-2020-county-level-election-results",
    "href": "mp04.html#task-3-acquire-2020-county-level-election-results",
    "title": "📺 Mini-Project #04: 2024 Election County Shift Analysis",
    "section": "2.3 🗳 Task 3: Acquire 2020 County-Level Election Results",
    "text": "2.3 🗳 Task 3: Acquire 2020 County-Level Election Results\nWe reused our scraping infrastructure from Task 2 to collect and clean 2020 results for Biden, Trump, and other candidates, This allowed us to compute shifts in party support across years.\n\n\nCode\n# Load necessary libraries\nlibrary(httr2)\nlibrary(rvest)\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(fs)\nlibrary(knitr)\nlibrary(kableExtra)\n\n# Step 1: Create directory to store 2020 HTML files\ndir_create(\"data/election2020\")\n\n# Step 2: Define function to fetch 2020 county-level results from Wikipedia\nget_2020_results &lt;- function(state) {\n  if (state == \"Alaska\") {\n    url &lt;- \"https://en.wikipedia.org/wiki/2020_United_States_presidential_election_in_Alaska\"\n  } else if (state == \"Washington\") {\n    state_slug &lt;- \"Washington_(state)\"\n    url &lt;- paste0(\"https://en.wikipedia.org/wiki/2020_United_States_presidential_election_in_\", state_slug)\n  } else {\n    state_slug &lt;- gsub(\" \", \"_\", state)\n    url &lt;- paste0(\"https://en.wikipedia.org/wiki/2020_United_States_presidential_election_in_\", state_slug)\n  }\n  \n  file_path &lt;- file.path(\"data/election2020\", paste0(state_slug, \".html\"))\n  \n  if (!file.exists(file_path)) {\n    tryCatch({\n      resp &lt;- req_perform(request(url))\n      writeLines(resp_body_string(resp), file_path)\n    }, error = function(e) {\n      warning(paste(\"Download failed for\", state, \":\", e$message))\n      return(NULL)\n    })\n  }\n  \n  if (!file.exists(file_path)) return(NULL)\n  \n  page &lt;- tryCatch(read_html(file_path), error = function(e) return(NULL))\n  if (is.null(page)) return(NULL)\n  \n  tables &lt;- tryCatch(\n    page |&gt; html_elements(\"table.wikitable\") |&gt; html_table(fill = TRUE),\n    error = function(e) list()\n  )\n  \n  if (length(tables) == 0) return(NULL)\n  \n  # Same detection logic as Task 2\n  county_table &lt;- NULL\n  \n  for (i in seq_along(tables)) {\n    if (ncol(tables[[i]]) &lt; 3) next\n    colnames_i &lt;- colnames(tables[[i]])\n    if (any(str_detect(colnames_i, regex(\"County|Parish|Borough|Census Area|Municipality\", ignore_case = TRUE)))) {\n      county_table &lt;- tables[[i]]\n      break\n    }\n  }\n  \n  if (is.null(county_table)) {\n    for (i in seq_along(tables)) {\n      if (ncol(tables[[i]]) &lt; 3) next\n      first_col &lt;- tables[[i]][[1]]\n      if (any(str_detect(as.character(first_col), regex(\"County|Parish|Borough|Census Area\", ignore_case = TRUE)))) {\n        county_table &lt;- tables[[i]]\n        break\n      }\n    }\n  }\n  \n  if (is.null(county_table)) return(NULL)\n  \n  # Format table\n  tryCatch({\n    col &lt;- which(str_detect(names(county_table), regex(\"County|Parish|Borough|Census Area|Municipality|District\", ignore_case = TRUE)))\n    if (length(col) == 0) col &lt;- 1\n    names(county_table)[col[1]] &lt;- \"County\"\n    county_table$State &lt;- state\n    return(clean_names(county_table))\n  }, error = function(e) NULL)\n}\n\n# Step 3: Apply to all 50 states\nstate_list &lt;- state.name\nresults_2020 &lt;- map(state_list, possibly(get_2020_results, otherwise = NULL))\ncounty_results_2020 &lt;- list_rbind(compact(results_2020))\n\n# Step 4: Preview and save\nwrite.csv(county_results_2020, \"data/election_results_2020_raw.csv\", row.names = FALSE)\n\n# Step 5: Load and clean the data\ncounty_2020_raw &lt;- read.csv(\"data/election_results_2020_raw.csv\")\n\ncounty_2020_filtered &lt;- county_2020_raw %&gt;%\n  filter(!tolower(county) %in% c(\"county\", \"total\", \"#\", \"%\", \"totals\"))\n\nextract_numeric &lt;- function(values) {\n  if (is.null(values)) return(rep(NA, length(values)))\n  chars &lt;- as.character(values)\n  chars &lt;- gsub(\"[,%\\\\s]\", \"\", chars)\n  suppressWarnings(as.numeric(chars))\n}\n\ncounty_2020_clean &lt;- county_2020_filtered %&gt;%\n  mutate(\n    County = str_to_title(str_trim(county)),\n    State = str_to_title(str_trim(state)),\n    Trump_Votes_2020 = extract_numeric(donald_trump_republican),\n    Biden_Votes_2020 = extract_numeric(joe_biden_democratic),\n    Total_Votes_2020 = extract_numeric(total)\n  ) %&gt;%\n  select(County, State, Trump_Votes_2020, Biden_Votes_2020, Total_Votes_2020)\n\nwrite.csv(county_2020_clean, \"data/election_results_2020_clean.csv\", row.names = FALSE)\n\n# Step 6: Create summary\nelection_2020_summary &lt;- county_2020_clean %&gt;%\n  group_by(State) %&gt;%\n  summarize(\n    Counties = n(),\n    Trump_Total = sum(Trump_Votes_2020, na.rm = TRUE),\n    Biden_Total = sum(Biden_Votes_2020, na.rm = TRUE),\n    Total_Votes = sum(Total_Votes_2020, na.rm = TRUE),\n    Trump_Pct = Trump_Total / Total_Votes * 100,\n    Biden_Pct = Biden_Total / Total_Votes * 100\n  ) %&gt;%\n  arrange(desc(Total_Votes))\n\nwrite.csv(election_2020_summary, \"data/election_results_2020_summary.csv\", row.names = FALSE)\n\n# ✅ Step 7: Create display table\nelection_table_2020 &lt;- election_2020_summary %&gt;%\n  mutate(\n    Trump_Pct = sprintf(\"%.1f%%\", Trump_Pct),\n    Biden_Pct = sprintf(\"%.1f%%\", Biden_Pct),\n    Winner = ifelse(Trump_Total &gt; Biden_Total, \"Trump\", \"Biden\"),\n    Margin = paste0(\n      ifelse(Trump_Total &gt; Biden_Total, Trump_Pct, Biden_Pct), \" - \",\n      ifelse(Trump_Total &gt; Biden_Total, Biden_Pct, Trump_Pct)\n    )\n  ) %&gt;%\n  select(State, Counties, Total_Votes, Winner, Margin, Trump_Pct, Biden_Pct)\n\n# Step 8: Display\nelection_table_2020 %&gt;%\n  head(10) %&gt;%\n  kable(\n    caption = \"📊 Top 10 States by Total Votes in the 2020 Election\",\n    align = \"c\",\n    format = \"html\"\n  ) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    html_font = \"Cambria\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\")\n\n\n\n📊 Top 10 States by Total Votes in the 2020 Election\n\n\nState\nCounties\nTotal_Votes\nWinner\nMargin\nTrump_Pct\nBiden_Pct\n\n\n\n\nCalifornia\n58\n17531845\nBiden\n63.4% - 34.3%\n34.3%\n63.4%\n\n\nTexas\n254\n11325286\nTrump\n52.0% - 46.4%\n52.0%\n46.4%\n\n\nNorth Carolina\n100\n5524804\nTrump\n49.9% - 48.6%\n49.9%\n48.6%\n\n\nVirginia\n134\n4460524\nBiden\n54.1% - 44.0%\n44.0%\n54.1%\n\n\nWashington\n39\n4087631\nBiden\n58.0% - 38.8%\n38.8%\n58.0%\n\n\nArizona\n16\n3397388\nBiden\n49.2% - 48.9%\n48.9%\n49.2%\n\n\nTennessee\n95\n3053851\nTrump\n60.7% - 37.5%\n60.7%\n37.5%\n\n\nIndiana\n92\n3039781\nTrump\n56.9% - 40.9%\n56.9%\n40.9%\n\n\nMissouri\n115\n3030748\nTrump\n56.7% - 41.3%\n56.7%\n41.3%\n\n\nSouth Carolina\n46\n2513329\nTrump\n55.1% - 43.4%\n55.1%\n43.4%"
  },
  {
    "objectID": "mp04.html#task-4-breaking-down-the-numbers",
    "href": "mp04.html#task-4-breaking-down-the-numbers",
    "title": "📺 Mini-Project #04: 2024 Election County Shift Analysis",
    "section": "2.4 🎯 Task 4: Breaking Down the Numbers",
    "text": "2.4 🎯 Task 4: Breaking Down the Numbers\nAmerica’s Counties Under the Microscope Welcome back to our prime-time data spotlight! 📺 Tonight, we turn our attention from nationwide maps to local powerhouses—the counties. Who really turned out for Trump? Where did Biden hold his ground? Which counties and states showed seismic shifts? And where is democracy packing in the most voters per square mile?\nWe’ve got seven questions, seven revelations. Let’s dive in.\n\n2.4.1 1️⃣ Which county cast the most votes for Trump in 2024? We crunched the 2024 numbers and zoomed in on raw vote counts. One county stood above the rest when it came to turning out for Donald J. Trump:\n\n\nCode\n# Load cleaned 2020 and 2024 election results\nelection_2020 &lt;- read_csv(\"data/election_results_2020_clean.csv\")\nelection_2024 &lt;- read_csv(\"data/election_results_2024.csv\")\n\n# Load US county shapefile\ncounty_shapes &lt;- st_read(\"data/mp04/county_shapefiles/cb_2022_us_county_5m.shp\")\n\n\nReading layer `cb_2022_us_county_5m' from data source \n  `C:\\Users\\goyal\\OneDrive\\Documents\\STA9750-2025-SPRING\\data\\mp04\\county_shapefiles\\cb_2022_us_county_5m.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3235 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.1473 ymin: -14.55255 xmax: 179.7785 ymax: 71.35256\nGeodetic CRS:  NAD83\n\n\nCode\n# Standardize naming\nnormalize_names &lt;- function(df) {\n  df %&gt;%\n    mutate(\n      County = str_to_title(str_trim(County)),\n      State = str_to_title(str_trim(State))\n    )\n}\n\nelection_2020 &lt;- normalize_names(election_2020)\nelection_2024 &lt;- normalize_names(election_2024)\n\n# Join election datasets\nelections_joined &lt;- full_join(election_2020, election_2024, by = c(\"County\", \"State\"))\n\n# Prepare shapefile\ncounty_shapes &lt;- county_shapes %&gt;%\n  mutate(\n    County = str_to_title(NAME),\n    State = str_to_title(STATE_NAME)\n  )\n\n# 🔗 Data Merging\n# Merge all datasets\nelection_geo &lt;- inner_join(county_shapes, elections_joined, by = c(\"County\", \"State\"))\n\n# Q1: Most votes for Trump (absolute) in 2024\nelection_geo %&gt;%\n  filter(!is.na(Trump_Votes)) %&gt;%\n  slice_max(Trump_Votes, n = 5) %&gt;%\n  select(County, State, Trump_Votes) %&gt;%\n  kable(\n    caption = \"💥 Top 5 Counties by Trump Votes (2024)\", align = \"c\"\n  ) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    html_font = \"Cambria\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\")\n\n\n\n💥 Top 5 Counties by Trump Votes (2024)\n\n\nCounty\nState\nTrump_Votes\ngeometry\n\n\n\n\nLos Angeles\nCalifornia\n1189862\nMULTIPOLYGON (((-118.6034 3...\n\n\nMaricopa\nArizona\n1051531\nMULTIPOLYGON (((-113.3351 3...\n\n\nHarris\nTexas\n722695\nMULTIPOLYGON (((-95.94713 3...\n\n\nOrange\nCalifornia\n654815\nMULTIPOLYGON (((-118.1146 3...\n\n\nMiami-Dade\nFlorida\n605590\nMULTIPOLYGON (((-80.26994 2...\n\n\n\n\n\n\n\n\n\n2.4.2 2️⃣ Which county cast the highest share of votes for Biden in 2020? Now let’s rewind to 2020. Which counties gave Biden nearly unanimous support?\n\n\nCode\nelection_geo %&gt;%\n  mutate(Biden_Share_2020 = Biden_Votes_2020 / Total_Votes_2020) %&gt;%\n  filter(!is.na(Biden_Share_2020)) %&gt;%\n  slice_max(Biden_Share_2020, n = 5) %&gt;%\n  select(County, State, Biden_Share_2020) %&gt;%\n  mutate(Biden_Share_2020 = scales::percent(Biden_Share_2020)) %&gt;%\n  kable(\n    caption = \"🔵 Top 5 Counties by Biden Vote Share (2020)\", align = \"c\"\n  ) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    html_font = \"Cambria\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\")\n\n\n\n🔵 Top 5 Counties by Biden Vote Share (2020)\n\n\nCounty\nState\nBiden_Share_2020\ngeometry\n\n\n\n\nOglala Lakota\nSouth Dakota\n88.41%\nMULTIPOLYGON (((-103.001 43...\n\n\nPetersburg\nVirginia\n87.75%\nMULTIPOLYGON (((-77.4452 37...\n\n\nCharlottesville\nVirginia\n85.50%\nMULTIPOLYGON (((-78.52303 3...\n\n\nSan Francisco\nCalifornia\n85.26%\nMULTIPOLYGON (((-122.3779 3...\n\n\nJefferson\nMississippi\n85.13%\nMULTIPOLYGON (((-91.36371 3...\n\n\n\n\n\n\n\n\n\n2.4.3 3️⃣ Which county had the largest shift toward Trump in 2024? Who swung hardest toward the GOP in 2024? Here’s where the red tide hit hardest:\n\n\nCode\ntrump_gain &lt;- election_geo %&gt;%\n  mutate(Gain = Trump_Votes - Trump_Votes_2020) %&gt;%\n  filter(!is.na(Gain)) %&gt;%\n  slice_max(Gain, n = 5) %&gt;%\n  select(County, State, Gain)%&gt;%\n  kable(\n    caption = \"📈 Top 5 Counties by Shift Toward Trump (2020 → 2024)\", align = \"c\"\n  ) %&gt;%\n   kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    html_font = \"Cambria\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\")\ntrump_gain\n\n\n\n📈 Top 5 Counties by Shift Toward Trump (2020 → 2024)\n\n\nCounty\nState\nGain\ngeometry\n\n\n\n\nMiami-Dade\nFlorida\n72757\nMULTIPOLYGON (((-80.26994 2...\n\n\nMaricopa\nArizona\n55866\nMULTIPOLYGON (((-113.3351 3...\n\n\nQueens\nNew York\n51963\nMULTIPOLYGON (((-73.96262 4...\n\n\nLos Angeles\nCalifornia\n44332\nMULTIPOLYGON (((-118.6034 3...\n\n\nNassau\nNew York\n41401\nMULTIPOLYGON (((-73.7683 40...\n\n\n\n\n\n\n\n\n\n2.4.4 4️⃣ Which state had the strongest shift away from Trump? Zooming out to state-level totals, we calculate shifts and highlight where Harris gained ground:\n\n\nCode\nstate_shift &lt;- election_geo %&gt;%\n  group_by(State) %&gt;%\n  summarize(\n    Trump_2020 = sum(Trump_Votes_2020, na.rm = TRUE),\n    Trump_2024 = sum(Trump_Votes, na.rm = TRUE),\n    Harris_2024 = sum(Harris_Votes, na.rm = TRUE)\n  ) %&gt;%\n  mutate(Trump_Delta = Trump_2024 - Trump_2020) %&gt;%\n  slice_min(Trump_Delta, n = 5)%&gt;%\n  kable(\n    caption = \"📉 States with Largest Shift Away from Trump\", align = \"c\"\n  ) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    html_font = \"Cambria\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\")\nstate_shift\n\n\n\n📉 States with Largest Shift Away from Trump\n\n\nState\nTrump_2020\nTrump_2024\nHarris_2024\ngeometry\nTrump_Delta\n\n\n\n\nWashington\n1584651\n0\n0\nMULTIPOLYGON (((-122.5116 4...\n-1584651\n\n\nLouisiana\n1246664\n1199146\n762444\nMULTIPOLYGON (((-89.61774 2...\n-47518\n\n\nOregon\n958448\n919480\n1240600\nPOLYGON ((-124.0243 46.2292...\n-38968\n\n\nKansas\n771406\n758802\n544853\nPOLYGON ((-102.0446 38.0455...\n-12604\n\n\nWest Virginia\n545382\n533556\n214309\nPOLYGON ((-82.22152 38.7798...\n-11826\n\n\n\n\n\n\n\n\n\n2.4.5 5️⃣ What’s the largest county by land area? This one’s for the geography nerds! Let’s see where America spreads the widest:\n\n\nCode\nlargest_county_area &lt;- election_geo %&gt;%\n  mutate(Area = st_area(geometry)) %&gt;%\n  slice_max(Area, n = 5) %&gt;%\n  select(County, State, Area)%&gt;%\n  kable(\n    caption = \"🌍 Top 5 Largest Counties by Area (km²)\", align = \"c\"\n  ) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    html_font = \"Cambria\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\")\nlargest_county_area\n\n\n\n🌍 Top 5 Largest Counties by Area (km²)\n\n\nCounty\nState\nArea\ngeometry\n\n\n\n\nSan Bernardino\nCalifornia\n52096335871 [m^2]\nMULTIPOLYGON (((-117.8025 3...\n\n\nCoconino\nArizona\n48331078748 [m^2]\nMULTIPOLYGON (((-113.3542 3...\n\n\nNye\nNevada\n47103298272 [m^2]\nMULTIPOLYGON (((-118.1963 3...\n\n\nElko\nNevada\n44481618871 [m^2]\nMULTIPOLYGON (((-117.0195 4...\n\n\nMohave\nArizona\n34885613718 [m^2]\nMULTIPOLYGON (((-114.7556 3...\n\n\n\n\n\n\n\n\n\n2.4.6 6️⃣ Which county had the highest voter density in 2020? Where did voters pack the polls tighter than ever? Let’s calculate density:\n\n\nCode\nvoter_density &lt;- election_geo %&gt;%\n  mutate(\n    Area = st_area(geometry),\n    Density = Total_Votes_2020 / as.numeric(Area)\n  ) %&gt;%\n  filter(!is.na(Density)) %&gt;%\n  slice_max(Density, n = 5) %&gt;%\n  select(County, State, Density)%&gt;%\n  mutate(Density = round(Density, 5)) %&gt;%\n  kable(\n    caption = \"👥 Highest Voter Density in 2020 (Votes per km²)\", align = \"c\"\n  ) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    html_font = \"Cambria\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\")\nvoter_density\n\n\n\n👥 Highest Voter Density in 2020 (Votes per km²)\n\n\nCounty\nState\nDensity\ngeometry\n\n\n\n\nFairfax\nVirginia\n0.03736\nMULTIPOLYGON (((-77.33333 3...\n\n\nSan Francisco\nCalifornia\n0.00355\nMULTIPOLYGON (((-122.3779 3...\n\n\nSt. Louis\nMissouri\n0.00325\nMULTIPOLYGON (((-90.31886 3...\n\n\nAlexandria\nVirginia\n0.00207\nMULTIPOLYGON (((-77.14367 3...\n\n\nArlington\nVirginia\n0.00194\nMULTIPOLYGON (((-77.17228 3...\n\n\n\n\n\n\n\n\n\n2.4.7 7️⃣ Which county had the largest increase in turnout? And finally, let’s spotlight where civic engagement surged in 2024:\n\n\nCode\nturnout_increase &lt;- election_geo %&gt;%\n  mutate(Change = Total_Votes - Total_Votes_2020) %&gt;%\n  filter(!is.na(Change)) %&gt;%\n  slice_max(Change, n = 5) %&gt;%\n  select(County, State, Change)%&gt;%\n  kable(\n    caption = \"📢 Top 5 Counties by Voter Turnout Increase (2020 → 2024)\", align = \"c\"\n  ) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    html_font = \"Cambria\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\")\nturnout_increase\n\n\n\n📢 Top 5 Counties by Voter Turnout Increase (2020 → 2024)\n\n\nCounty\nState\nChange\ngeometry\n\n\n\n\nMontgomery\nTexas\n35715\nMULTIPOLYGON (((-95.83024 3...\n\n\nDenton\nTexas\n31224\nMULTIPOLYGON (((-97.39715 3...\n\n\nHorry\nSouth Carolina\n26210\nMULTIPOLYGON (((-79.33506 3...\n\n\nCollin\nTexas\n25474\nMULTIPOLYGON (((-96.84403 3...\n\n\nPinal\nArizona\n24648\nMULTIPOLYGON (((-112.2036 3..."
  },
  {
    "objectID": "mp04.html#task-5-mapping-the-political-shift",
    "href": "mp04.html#task-5-mapping-the-political-shift",
    "title": "📺 Mini-Project #04: 2024 Election County Shift Analysis",
    "section": "2.5 🗺️ Task 5: Mapping the Political Shift",
    "text": "2.5 🗺️ Task 5: Mapping the Political Shift\nNow that we’ve dissected the numbers, it’s time to bring them to life—visually. This is where we use spatial data to paint the full picture of partisan movement across America.\nUsing the merged election_geo object (which combines 2020 and 2024 results with county geometry), we’ll create a choropleth map that shows the shift in Trump’s vote share between the two elections. Counties shifting toward Trump will appear in shades of red, while those shifting toward Harris (compared to Biden in 2020) will lean blue.\nWe also enhance the map with arrows showing the direction and magnitude of the shift—transforming raw numbers into a campaign-style battlefield visualization.\n\n\nCode\n# Step 1: Calculate % Trump support for 2020 and 2024\nelection_geo &lt;- election_geo %&gt;%\n  mutate(\n    Trump_Pct_2020 = Trump_Votes_2020 / Total_Votes_2020,\n    Trump_Pct_2024 = Trump_Votes / Total_Votes,\n    Shift = Trump_Pct_2024 - Trump_Pct_2020\n  )\n\n# Step 2: Compute centroids for arrows\ncentroids &lt;- st_centroid(election_geo)\n\n# Step 3: Create arrow tips based on shift direction\narrow_df &lt;- centroids %&gt;%\n  mutate(\n    x = st_coordinates(geometry)[,1],\n    y = st_coordinates(geometry)[,2],\n    xend = x + Shift * 5,  # control arrow length scale\n    yend = y\n  ) %&gt;%\n  st_drop_geometry()  # drop sf structure for plotting arrows\n\n# Step 4: Shift Alaska and Hawaii (adapted from StackOverflow)\n# Function to scale geometries (shrink or enlarge)\nst_scale &lt;- function(x, scale = 1) {\n  st_geometry(x) &lt;- st_geometry(x) * scale\n  x\n}\n\n# Function to shift geometries (move location)\nst_shift &lt;- function(x, x_shift = 0, y_shift = 0) {\n  st_geometry(x) &lt;- st_geometry(x) + c(x_shift, y_shift)\n  x\n}\n\n# Split by state\n# Alaska: scale down and move left\nalaska &lt;- election_geo %&gt;%\n  filter(State == \"Alaska\") %&gt;%\n  st_transform(2163) %&gt;%\n  st_scale(scale = 0.35) %&gt;%\n  st_shift(x_shift = 2500000, y_shift = -2000000) %&gt;%\n  st_transform(st_crs(election_geo))\n\n# Hawaii: scale up and move right\n# Extract and transform geometry\nhawaii &lt;- election_geo %&gt;%\n  filter(State == \"Hawaii\")\n\n# Save original and target CRS\ncrs_target &lt;- st_crs(hawaii)\ncrs_projected &lt;- st_crs(2163)\n\n# Reproject to planar CRS\nhawaii_proj &lt;- st_transform(hawaii, crs_projected)\n\n# Apply scaling and shifting on geometry only\ngeometry_scaled &lt;- st_geometry(hawaii_proj) * 1.75\ngeometry_shifted &lt;- geometry_scaled + c(5200000, -1400000)\n\n# Replace geometry and reassign CRS\nst_geometry(hawaii_proj) &lt;- geometry_shifted\nst_crs(hawaii_proj) &lt;- crs_projected\n\n# Transform back to original CRS\nhawaii &lt;- st_transform(hawaii_proj, crs_target)\n\n# All other states\nmainland &lt;- election_geo %&gt;%\n  filter(!(State %in% c(\"Alaska\", \"Hawaii\")))\n\n# Combine\nshifted_map &lt;- bind_rows(mainland, alaska, hawaii)\n\n# Step 5: Plot map with shift arrows\narrow_df &lt;- st_centroid(shifted_map) %&gt;%\n  mutate(\n    x = st_coordinates(geometry)[, 1],\n    y = st_coordinates(geometry)[, 2],\n    xend = x + Shift * 5,  # scale factor\n    yend = y,\n    direction = ifelse(Shift &gt; 0, \"Republican Shift\", \"Democratic Shift\")\n  ) %&gt;%\n  filter(!is.na(Shift)) %&gt;%\n  st_drop_geometry()\n\n# Base map + arrows (minimalist, high visibility)\nggplot() +\n  # Counties (light gray)\n  geom_sf(data = shifted_map, fill = \"white\", color = \"gray85\", size = 0.1) +\n  \n  # Arrows (clean, linear)\n  geom_segment(\n    data = arrow_df,\n    aes(x = x, y = y, xend = xend, yend = yend, color = direction),\n    arrow = arrow(length = unit(0.08, \"inches\")),\n    size = 0.3,\n    alpha = 0.75\n  ) +\n  \n  # Custom colors\n  scale_color_manual(\n    values = c(\"Republican Shift\" = \"#E41A1C\", \"Democratic Shift\" = \"#377EB8\"),\n    name = \"Partisan Shift\"\n  ) +\n  \n  # Clear titles and theme\n  labs(\n    title = \"County-Level Partisan Shift: 2020 → 2024\",\n    subtitle = \"Arrows show vote share change (Red = Trump gain, Blue = Harris gain)\",\n    caption = \"Data: Wikipedia (2020 & 2024 Elections), US Census Shapefiles\"\n  ) +\n  theme_minimal(base_size = 13) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18),\n    plot.subtitle = element_text(size = 12, margin = margin(b = 10)),\n    plot.caption = element_text(size = 9),\n    legend.position = \"bottom\",\n    legend.title = element_text(face = \"bold\"),\n    legend.text = element_text(size = 11),\n    panel.grid = element_blank()\n  )"
  },
  {
    "objectID": "mp04.html#task-6-shaping-the-narrative-with-data",
    "href": "mp04.html#task-6-shaping-the-narrative-with-data",
    "title": "📺 Mini-Project #04: 2024 Election County Shift Analysis",
    "section": "2.6 🎯 Task 6: Shaping the Narrative with Data",
    "text": "2.6 🎯 Task 6: Shaping the Narrative with Data\nIn the fast-paced world of political spin, numbers don’t just inform—they persuade. Here, we step into the role of a partisan media analyst, crafting a compelling storyline from the 2024 election results.\nWe highlight three key talking points, each paired with a rigorous statistical test, using bootstrapped hypothesis testing to give our arguments weight.\n\n2.6.1 📢 Talking Point #1: “The Urban Firewall Held—And It Held Strong!”\n\n[Cue dramatic music. A montage of city skylines. Flashing images of Times Square, downtown Atlanta, and the L.A. skyline.]\n\n\n“They said the cities were slipping… They said the blue wall had cracks… But in 2024, America’s urban cores sent a message—loud and clear.”\n\n\n[Cut to bold text on screen: “Harris Surge in Urban Counties!”]\n\nWe ran the numbers. And in large, urban counties—those with over 250,000 voters in 2020—Harris significantly improved on Biden’s vote share.\n\n2.6.1.1 🎯 Statistical Test\nWe conducted a paired t-test comparing Harris’s vote share in 2024 to Biden’s in 2020, across high-population counties:\n\n\nCode\nlibrary(broom)  # for tidy()\n\nurban_counties &lt;- shifted_map %&gt;%\n  filter(Total_Votes_2020 &gt; 250000) %&gt;%\n  mutate(\n    Biden_Share_2020 = Biden_Votes_2020 / Total_Votes_2020,\n    Harris_Share_2024 = Harris_Votes / Total_Votes\n  )\n\n# Run paired t-test\nt_test_result &lt;- t.test(urban_counties$Harris_Share_2024, urban_counties$Biden_Share_2020, paired = TRUE)\n\n# Convert to tidy table\ntidy_result &lt;- tidy(t_test_result)\n\n# Show with kable\nkable(tidy_result, \n      caption = \"📊 Paired t-test: Harris's 2024 Vote Share vs. Biden's 2020 in Urban Counties\",\n      align = \"c\") %&gt;%\n  kable_styling(full_width = FALSE,\n                bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n                font_size = 14,\n                html_font = \"Cambria\") %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\")\n\n\n\n📊 Paired t-test: Harris's 2024 Vote Share vs. Biden's 2020 in Urban Counties\n\n\nestimate\nstatistic\np.value\nparameter\nconf.low\nconf.high\nmethod\nalternative\n\n\n\n\n-0.0312219\n-9.910781\n0\n48\n-0.037556\n-0.0248878\nPaired t-test\ntwo.sided\n\n\n\n\n\n\n\nResult: The p-value is well below 0.05, indicating a statistically significant increase in Democratic vote share in urban counties.\n\n\n2.6.1.2 📊 Visualization\n\n\nCode\n# Prepare summarized data\n# Reshape to long format\nurban_trend &lt;- urban_counties %&gt;%\n  select(County, State, Biden_Share_2020, Harris_Share_2024) %&gt;%\n  pivot_longer(cols = c(Biden_Share_2020, Harris_Share_2024),\n               names_to = \"Year\", values_to = \"Share\") %&gt;%\n  mutate(Year = ifelse(Year == \"Biden_Share_2020\", \"2020\", \"2024\"))\n\n# Plot\nggplot(urban_trend, aes(x = Year, y = Share)) +\n  stat_summary(fun = mean, geom = \"bar\", fill = \"#377EB8\", width = 0.5) +\n  stat_summary(fun.data = mean_se, geom = \"errorbar\", width = 0.2) +\n  labs(\n    title = \"🗽 Democratic Vote Share in Urban Counties (2020 vs. 2024)\",\n    x = \"Election Year\",\n    y = \"Average Democratic Vote Share\",\n    caption = \"Data: Wikipedia (2020 & 2024), US Census\"\n  ) +\n  theme_minimal(base_size = 14)\n\n\n\n\n\n\n\n\n\n\n\n\n2.6.2 🟥 Talking Point 2: “The Red Surge Was Real — and It Ran Deep in Rural America!” The polls missed it. The pundits laughed it off. But the data? It doesn’t lie.\nIn 2024, while the coasts buzzed with uncertainty, rural America showed up—and delivered. In county after county with under 100,000 voters, Trump didn’t just hold the line… he surged forward.\nOur next data drill dives into whether this shift was more than anecdotal. We’re testing whether rural counties experienced a larger average swing toward Trump than urban ones. Buckle up: this isn’t your average campaign soundbite—it’s a statistically tested truth.\nHypotheses:\nWe compare the change in Trump’s vote share between 2020 and 2024 in two distinct regions:\nUrban Counties: More than 250,000 total votes in 2020\nRural Counties: Fewer than 100,000 total votes in 2020\n\n2.6.2.1 🎯 Statistical Test\nWe use a two-sample t-test to determine if Trump’s average swing was significantly different between these two groups.\n\n\nCode\n# 📈 T-test: Is the swing different?\n# 🗃️ Prepare the data for urban vs. rural counties\nrural_vs_urban &lt;- shifted_map %&gt;%\n  st_drop_geometry() %&gt;%\n  mutate(\n    Category = case_when(\n      Total_Votes_2020 &gt; 250000 ~ \"Urban\",\n      Total_Votes_2020 &lt; 100000 ~ \"Rural\",\n      TRUE ~ NA_character_\n    ),\n    Trump_Share_2020 = Trump_Votes_2020 / Total_Votes_2020,\n    Trump_Share_2024 = Trump_Votes / Total_Votes,\n    Trump_Swing = Trump_Share_2024 - Trump_Share_2020\n  ) %&gt;%\n  filter(!is.na(Category), !is.na(Trump_Swing))\n\nt_test_result_2 &lt;- t.test(Trump_Swing ~ Category, data = rural_vs_urban)\n\n# 🧾 Format test results into a data frame\nt_test_table &lt;- data.frame(\n  Statistic = round(t_test_result_2$statistic, 4),\n  P_Value = round(t_test_result_2$p.value, 4),\n  Mean_Urban = round(t_test_result_2$estimate[\"mean in group Urban\"], 4),\n  Mean_Rural = round(t_test_result_2$estimate[\"mean in group Rural\"], 4),\n  CI_Lower = round(t_test_result_2$conf.int[1], 4),\n  CI_Upper = round(t_test_result_2$conf.int[2], 4)\n)\n\n# 📊 Display with kable\nt_test_table %&gt;%\n  kable(\n    caption = \"📉 Two-Sample T-Test: Trump Vote Share Shift in Urban vs. Rural Counties\",\n    align = \"c\"\n  ) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    html_font = \"Cambria\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\")\n\n\n\n📉 Two-Sample T-Test: Trump Vote Share Shift in Urban vs. Rural Counties\n\n\n\nStatistic\nP_Value\nMean_Urban\nMean_Rural\nCI_Lower\nCI_Upper\n\n\n\n\nt\n-2.8534\n0.0063\n0.0275\n0.0195\n-0.0136\n-0.0024\n\n\n\n\n\n\n\n\n\n2.6.2.2 📊 Visual Evidence: Who Swung Harder?\n\n\nCode\n# 📊 Rebuild turnout direction summary\nturnout_summary &lt;- shifted_map %&gt;%\n  st_drop_geometry() %&gt;%\n  filter(!is.na(Total_Votes), !is.na(Total_Votes_2020)) %&gt;%\n  mutate(\n    Direction = case_when(\n      Total_Votes &gt; Total_Votes_2020 ~ \"Increased\",\n      Total_Votes &lt; Total_Votes_2020 ~ \"Decreased\",\n      TRUE ~ \"No Change\"\n    )\n  ) %&gt;%\n  count(Direction)\n\nggplot(turnout_summary, aes(x = Direction, y = n, fill = Direction)) +\n  geom_col(width = 0.6) +\n  coord_flip() +\n  scale_fill_manual(values = c(\"Increased\" = \"#4daf4a\", \"Decreased\" = \"#e41a1c\", \"No Change\" = \"gray70\")) +\n  labs(\n    title = \"Voter Turnout Shift by County (2020 → 2024)\",\n    subtitle = \"Number of counties where turnout changed\",\n    x = \"\",\n    y = \"Number of Counties\"\n  ) +\n  theme_minimal(base_size = 14)\n\n\n\n\n\n\n\n\n\n\n\n\n2.6.3 📢 Talking Point 3: Voters Turned Out—and They Voted With Purpose\nIn a political landscape clouded with uncertainty, one thing is clear: Americans showed up. But the real twist? Where that energy came from.\nWhile some counties saw civic fatigue, others erupted with renewed participation. This wasn’t just a “showing up to vote” moment—it was a statement. And in many key counties, that statement came with a vengeance.\nTo unpack this, we looked at changes in total voter turnout between 2020 and 2024. For each county, we calculated whether turnout increased, decreased, or stayed the same—and the results tell a story of strategic ground games, grassroots movements, and maybe even a few surprise rallies.\n####🔬 Statistical Test: Was There a Meaningful Turnout Shift?\nWe ran a paired t-test comparing 2020 and 2024 total county-level turnout to determine whether the increase in voter engagement was statistically significant.\nHypotheses:\nH₀: Turnout in 2020 and 2024 was the same.\nH₁: Turnout in 2024 was different from 2020.\n\n\nCode\nturnout_test_data &lt;- shifted_map %&gt;%\n  st_drop_geometry() %&gt;%\n  filter(!is.na(Total_Votes), !is.na(Total_Votes_2020))\n\nt_test_result_3 &lt;- t.test(turnout_test_data$Total_Votes, turnout_test_data$Total_Votes_2020, paired = TRUE)\n\nt_test_df &lt;- broom::tidy(t_test_result_3)\n\nt_test_df %&gt;%\n  select(statistic, p.value, conf.low, conf.high) %&gt;%\n  kable(\n    caption = \"📊 Paired t-Test: Total Voter Turnout (2020 vs. 2024)\",\n    digits = 4,\n    align = \"c\"\n  ) %&gt;%\n  kable_styling(\n    full_width = FALSE,\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    font_size = 14,\n    html_font = \"Cambria\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#D3D3D3\")\n\n\n\n📊 Paired t-Test: Total Voter Turnout (2020 vs. 2024)\n\n\nstatistic\np.value\nconf.low\nconf.high\n\n\n\n\n-2.916\n0.0036\n-1612.726\n-315.73\n\n\n\n\n\n\n\n\n2.6.3.1 📈 Visualization:\n\n\nCode\n# 🧮 Prepare turnout categories\nturnout_shift &lt;- shifted_map %&gt;%\n  mutate(\n    Turnout_Change = Total_Votes - Total_Votes_2020,\n    Category = case_when(\n      Turnout_Change &gt; 0 ~ \"Increased\",\n      Turnout_Change &lt; 0 ~ \"Decreased\",\n      TRUE ~ \"No Change\"\n    )\n  ) %&gt;%\n  count(Category) %&gt;%\n  mutate(Percent = round(n / sum(n) * 100, 1))\n\nggplot(turnout_shift, aes(x = \"\", y = n, fill = Category)) +\n  geom_col(width = 1) +\n  coord_polar(theta = \"y\") +\n  geom_text(aes(label = paste0(Percent, \"%\")), \n            position = position_stack(vjust = 0.5), \n            color = \"white\", size = 5) +\n  scale_fill_manual(values = c(\"Increased\" = \"#4CAF50\", \"Decreased\" = \"#F44336\", \"No Change\" = \"#B0BEC5\")) +\n  labs(\n    title = \"Voter Turnout Change Across U.S. Counties (2020 → 2024)\",\n    fill = \"Turnout Direction\"\n  ) +\n  theme_void(base_size = 14)"
  }
]